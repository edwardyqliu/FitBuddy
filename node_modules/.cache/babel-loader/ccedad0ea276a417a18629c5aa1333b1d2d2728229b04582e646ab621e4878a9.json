{"ast":null,"code":"'use client';\n\n// src/use-event-listeners.ts\nimport { useCallback, useEffect, useRef } from \"react\";\nfunction useEventListeners() {\n  var listeners = useRef( /* @__PURE__ */new Map());\n  var currentListeners = listeners.current;\n  var add = useCallback(function (el, type, listener, options) {\n    listeners.current.set(listener, {\n      type: type,\n      el: el,\n      options: options\n    });\n    el.addEventListener(type, listener, options);\n  }, []);\n  var remove = useCallback(function (el, type, listener, options) {\n    el.removeEventListener(type, listener, options);\n    listeners.current.delete(listener);\n  }, []);\n  useEffect(function () {\n    return function () {\n      currentListeners.forEach(function (value, key) {\n        remove(value.el, value.type, key, value.options);\n      });\n    };\n  }, [remove, currentListeners]);\n  return {\n    add: add,\n    remove: remove\n  };\n}\nexport { useEventListeners };","map":{"version":3,"names":["useCallback","useEffect","useRef","useEventListeners","listeners","Map","currentListeners","current","add","el","type","listener","options","set","addEventListener","remove","removeEventListener","delete","forEach","value","key"],"sources":["/Users/eyliu/Desktop/FitBuddy/node_modules/@chakra-ui/clickable/src/use-event-listeners.ts"],"sourcesContent":["import { useCallback, useEffect, useRef } from \"react\"\n\ninterface EventListeners {\n  add<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (this: Document, ev: DocumentEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  add(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  remove<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (this: Document, ev: DocumentEventMap[K]) => any,\n    options?: boolean | EventListenerOptions,\n  ): void\n  remove(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | EventListenerOptions,\n  ): void\n}\n\nexport function useEventListeners(): EventListeners {\n  const listeners = useRef(new Map())\n  const currentListeners = listeners.current\n\n  const add = useCallback((el: any, type: any, listener: any, options: any) => {\n    listeners.current.set(listener, { type, el, options })\n    el.addEventListener(type, listener, options)\n  }, [])\n\n  const remove = useCallback(\n    (el: any, type: any, listener: any, options: any) => {\n      el.removeEventListener(type, listener, options)\n      listeners.current.delete(listener)\n    },\n    [],\n  )\n\n  useEffect(\n    () => () => {\n      currentListeners.forEach((value, key) => {\n        remove(value.el, value.type, key, value.options)\n      })\n    },\n    [remove, currentListeners],\n  )\n\n  return { add, remove }\n}\n"],"mappings":";;;AAAA,SAASA,WAAA,EAAaC,SAAA,EAAWC,MAAA,QAAc;AA6BxC,SAASC,kBAAA,EAAoC;EAClD,IAAMC,SAAA,GAAYF,MAAA,EAAO,mBAAIG,GAAA,CAAI,CAAC;EAClC,IAAMC,gBAAA,GAAmBF,SAAA,CAAUG,OAAA;EAEnC,IAAMC,GAAA,GAAMR,WAAA,CAAY,UAACS,EAAA,EAASC,IAAA,EAAWC,QAAA,EAAeC,OAAA,EAAiB;IAC3ER,SAAA,CAAUG,OAAA,CAAQM,GAAA,CAAIF,QAAA,EAAU;MAAED,IAAA,EAAAA,IAAA;MAAMD,EAAA,EAAAA,EAAA;MAAIG,OAAA,EAAAA;IAAQ,CAAC;IACrDH,EAAA,CAAGK,gBAAA,CAAiBJ,IAAA,EAAMC,QAAA,EAAUC,OAAO;EAC7C,GAAG,EAAE;EAEL,IAAMG,MAAA,GAASf,WAAA,CACb,UAACS,EAAA,EAASC,IAAA,EAAWC,QAAA,EAAeC,OAAA,EAAiB;IACnDH,EAAA,CAAGO,mBAAA,CAAoBN,IAAA,EAAMC,QAAA,EAAUC,OAAO;IAC9CR,SAAA,CAAUG,OAAA,CAAQU,MAAA,CAAON,QAAQ;EACnC,GACA,EACF;EAEAV,SAAA,CACE;IAAA,OAAM,YAAM;MACVK,gBAAA,CAAiBY,OAAA,CAAQ,UAACC,KAAA,EAAOC,GAAA,EAAQ;QACvCL,MAAA,CAAOI,KAAA,CAAMV,EAAA,EAAIU,KAAA,CAAMT,IAAA,EAAMU,GAAA,EAAKD,KAAA,CAAMP,OAAO;MACjD,CAAC;IACH;EAAA,GACA,CAACG,MAAA,EAAQT,gBAAgB,CAC3B;EAEA,OAAO;IAAEE,GAAA,EAAAA,GAAA;IAAKO,MAAA,EAAAA;EAAO;AACvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}