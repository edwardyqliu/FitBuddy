{"ast":null,"code":"'use client';\n\n// src/text.tsx\nimport _objectSpread from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"className\", \"align\", \"decoration\", \"casing\"];\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { compact } from \"@chakra-ui/object-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Text = forwardRef(function Text2(props, ref) {\n  var styles = useStyleConfig(\"Text\", props);\n  var _omitThemingProps = omitThemingProps(props),\n    className = _omitThemingProps.className,\n    align = _omitThemingProps.align,\n    decoration = _omitThemingProps.decoration,\n    casing = _omitThemingProps.casing,\n    rest = _objectWithoutProperties(_omitThemingProps, _excluded);\n  var aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing\n  });\n  return /* @__PURE__ */jsx(chakra.p, _objectSpread(_objectSpread(_objectSpread({\n    ref: ref,\n    className: cx(\"chakra-text\", props.className)\n  }, aliasedProps), rest), {}, {\n    __css: styles\n  }));\n});\nText.displayName = \"Text\";\nexport { Text };","map":{"version":3,"names":["chakra","forwardRef","omitThemingProps","useStyleConfig","cx","compact","jsx","Text","Text2","props","ref","styles","_omitThemingProps","className","align","decoration","casing","rest","_objectWithoutProperties","_excluded","aliasedProps","textAlign","textDecoration","textTransform","p","_objectSpread","__css","displayName"],"sources":["/Users/eyliu/Desktop/FitBuddy/node_modules/@chakra-ui/layout/src/text.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } =\n    omitThemingProps(props)\n\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nText.displayName = \"Text\"\n"],"mappings":";;;;;;AAAA,SACEA,MAAA,EACAC,UAAA,EACAC,gBAAA,EAGAC,cAAA,QAEK;AACP,SAASC,EAAA,QAAU;AACnB,SAASC,OAAA,QAAe;AAqCpB,SAAAC,GAAA;AAZG,IAAMC,IAAA,GAAON,UAAA,CAA2B,SAASO,MAAKC,KAAA,EAAOC,GAAA,EAAK;EACvE,IAAMC,MAAA,GAASR,cAAA,CAAe,QAAQM,KAAK;EAC3C,IAAAG,iBAAA,GACEV,gBAAA,CAAiBO,KAAK;IADhBI,SAAA,GAAAD,iBAAA,CAAAC,SAAA;IAAWC,KAAA,GAAAF,iBAAA,CAAAE,KAAA;IAAOC,UAAA,GAAAH,iBAAA,CAAAG,UAAA;IAAYC,MAAA,GAAAJ,iBAAA,CAAAI,MAAA;IAAWC,IAAA,GAAAC,wBAAA,CAAAN,iBAAA,EAAAO,SAAA;EAGjD,IAAMC,YAAA,GAAef,OAAA,CAAQ;IAC3BgB,SAAA,EAAWZ,KAAA,CAAMK,KAAA;IACjBQ,cAAA,EAAgBb,KAAA,CAAMM,UAAA;IACtBQ,aAAA,EAAed,KAAA,CAAMO;EACvB,CAAC;EAED,OACE,eAAAV,GAAA,CAACN,MAAA,CAAOwB,CAAA,EAAAC,aAAA,CAAAA,aAAA,CAAAA,aAAA;IACNf,GAAA,EAAAA,GAAA;IACAG,SAAA,EAAWT,EAAA,CAAG,eAAeK,KAAA,CAAMI,SAAS;EAAA,GACxCO,YAAA,GACAH,IAAA;IACJS,KAAA,EAAOf;EAAA,EACT;AAEJ,CAAC;AAEDJ,IAAA,CAAKoB,WAAA,GAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}