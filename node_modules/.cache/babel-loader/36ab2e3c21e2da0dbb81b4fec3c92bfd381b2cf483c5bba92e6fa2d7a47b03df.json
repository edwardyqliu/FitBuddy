{"ast":null,"code":"import _slicedToArray from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createClass from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\n/**\n * A simple guard function:\n *\n * ```js\n * Math.min(Math.max(low, value), high)\n * ```\n */\nfunction guard(low, high, value) {\n  return Math.min(Math.max(low, value), high);\n}\nvar ColorError = /*#__PURE__*/function (_Error) {\n  _inherits(ColorError, _Error);\n  var _super = _createSuper(ColorError);\n  function ColorError(color) {\n    _classCallCheck(this, ColorError);\n    return _super.call(this, \"Failed to parse color: \\\"\".concat(color, \"\\\"\"));\n  }\n  return _createClass(ColorError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar ColorError$1 = ColorError;\n\n/**\n * Parses a color into red, gree, blue, alpha parts\n *\n * @param color the input color. Can be a RGB, RBGA, HSL, HSLA, or named color\n */\nfunction parseToRgba(color) {\n  if (typeof color !== 'string') throw new ColorError$1(color);\n  if (color.trim().toLowerCase() === 'transparent') return [0, 0, 0, 0];\n  var normalizedColor = color.trim();\n  normalizedColor = namedColorRegex.test(color) ? nameToHex(color) : color;\n  var reducedHexMatch = reducedHexRegex.exec(normalizedColor);\n  if (reducedHexMatch) {\n    var arr = Array.from(reducedHexMatch).slice(1);\n    return [].concat(_toConsumableArray(arr.slice(0, 3).map(function (x) {\n      return parseInt(r(x, 2), 16);\n    })), [parseInt(r(arr[3] || 'f', 2), 16) / 255]);\n  }\n  var hexMatch = hexRegex.exec(normalizedColor);\n  if (hexMatch) {\n    var _arr = Array.from(hexMatch).slice(1);\n    return [].concat(_toConsumableArray(_arr.slice(0, 3).map(function (x) {\n      return parseInt(x, 16);\n    })), [parseInt(_arr[3] || 'ff', 16) / 255]);\n  }\n  var rgbaMatch = rgbaRegex.exec(normalizedColor);\n  if (rgbaMatch) {\n    var _arr2 = Array.from(rgbaMatch).slice(1);\n    return [].concat(_toConsumableArray(_arr2.slice(0, 3).map(function (x) {\n      return parseInt(x, 10);\n    })), [parseFloat(_arr2[3] || '1')]);\n  }\n  var hslaMatch = hslaRegex.exec(normalizedColor);\n  if (hslaMatch) {\n    var _Array$from$slice$map = Array.from(hslaMatch).slice(1).map(parseFloat),\n      _Array$from$slice$map2 = _slicedToArray(_Array$from$slice$map, 4),\n      h = _Array$from$slice$map2[0],\n      s = _Array$from$slice$map2[1],\n      l = _Array$from$slice$map2[2],\n      a = _Array$from$slice$map2[3];\n    if (guard(0, 100, s) !== s) throw new ColorError$1(color);\n    if (guard(0, 100, l) !== l) throw new ColorError$1(color);\n    return [].concat(_toConsumableArray(hslToRgb(h, s, l)), [Number.isNaN(a) ? 1 : a]);\n  }\n  throw new ColorError$1(color);\n}\nfunction hash(str) {\n  var hash = 5381;\n  var i = str.length;\n  while (i) {\n    hash = hash * 33 ^ str.charCodeAt(--i);\n  }\n\n  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */\n  return (hash >>> 0) % 2341;\n}\nvar colorToInt = function colorToInt(x) {\n  return parseInt(x.replace(/_/g, ''), 36);\n};\nvar compressedColorMap = '1q29ehhb 1n09sgk7 1kl1ekf_ _yl4zsno 16z9eiv3 1p29lhp8 _bd9zg04 17u0____ _iw9zhe5 _to73___ _r45e31e _7l6g016 _jh8ouiv _zn3qba8 1jy4zshs 11u87k0u 1ro9yvyo 1aj3xael 1gz9zjz0 _3w8l4xo 1bf1ekf_ _ke3v___ _4rrkb__ 13j776yz _646mbhl _nrjr4__ _le6mbhl 1n37ehkb _m75f91n _qj3bzfz 1939yygw 11i5z6x8 _1k5f8xs 1509441m 15t5lwgf _ae2th1n _tg1ugcv 1lp1ugcv 16e14up_ _h55rw7n _ny9yavn _7a11xb_ 1ih442g9 _pv442g9 1mv16xof 14e6y7tu 1oo9zkds 17d1cisi _4v9y70f _y98m8kc 1019pq0v 12o9zda8 _348j4f4 1et50i2o _8epa8__ _ts6senj 1o350i2o 1mi9eiuo 1259yrp0 1ln80gnw _632xcoy 1cn9zldc _f29edu4 1n490c8q _9f9ziet 1b94vk74 _m49zkct 1kz6s73a 1eu9dtog _q58s1rz 1dy9sjiq __u89jo3 _aj5nkwg _ld89jo3 13h9z6wx _qa9z2ii _l119xgq _bs5arju 1hj4nwk9 1qt4nwk9 1ge6wau6 14j9zlcw 11p1edc_ _ms1zcxe _439shk6 _jt9y70f _754zsow 1la40eju _oq5p___ _x279qkz 1fa5r3rv _yd2d9ip _424tcku _8y1di2_ _zi2uabw _yy7rn9h 12yz980_ __39ljp6 1b59zg0x _n39zfzp 1fy9zest _b33k___ _hp9wq92 1il50hz4 _io472ub _lj9z3eo 19z9ykg0 _8t8iu3a 12b9bl4a 1ak5yw0o _896v4ku _tb8k8lv _s59zi6t _c09ze0p 1lg80oqn 1id9z8wb _238nba5 1kq6wgdi _154zssg _tn3zk49 _da9y6tc 1sg7cv4f _r12jvtt 1gq5fmkz 1cs9rvci _lp9jn1c _xw1tdnb 13f9zje6 16f6973h _vo7ir40 _bt5arjf _rc45e4t _hr4e100 10v4e100 _hc9zke2 _w91egv_ _sj2r1kk 13c87yx8 _vqpds__ _ni8ggk8 _tj9yqfb 1ia2j4r4 _7x9b10u 1fc9ld4j 1eq9zldr _5j9lhpx _ez9zl6o _md61fzm'.split(' ').reduce(function (acc, next) {\n  var key = colorToInt(next.substring(0, 3));\n  var hex = colorToInt(next.substring(3)).toString(16);\n\n  // NOTE: padStart could be used here but it breaks Node 6 compat\n  // https://github.com/ricokahler/color2k/issues/351\n  var prefix = '';\n  for (var i = 0; i < 6 - hex.length; i++) {\n    prefix += '0';\n  }\n  acc[key] = \"\".concat(prefix).concat(hex);\n  return acc;\n}, {});\n\n/**\n * Checks if a string is a CSS named color and returns its equivalent hex value, otherwise returns the original color.\n */\nfunction nameToHex(color) {\n  var normalizedColorName = color.toLowerCase().trim();\n  var result = compressedColorMap[hash(normalizedColorName)];\n  if (!result) throw new ColorError$1(color);\n  return \"#\".concat(result);\n}\nvar r = function r(str, amount) {\n  return Array.from(Array(amount)).map(function () {\n    return str;\n  }).join('');\n};\nvar reducedHexRegex = new RegExp(\"^#\".concat(r('([a-f0-9])', 3), \"([a-f0-9])?$\"), 'i');\nvar hexRegex = new RegExp(\"^#\".concat(r('([a-f0-9]{2})', 3), \"([a-f0-9]{2})?$\"), 'i');\nvar rgbaRegex = new RegExp(\"^rgba?\\\\(\\\\s*(\\\\d+)\\\\s*\".concat(r(',\\\\s*(\\\\d+)\\\\s*', 2), \"(?:,\\\\s*([\\\\d.]+))?\\\\s*\\\\)$\"), 'i');\nvar hslaRegex = /^hsla?\\(\\s*([\\d.]+)\\s*,\\s*([\\d.]+)%\\s*,\\s*([\\d.]+)%(?:\\s*,\\s*([\\d.]+))?\\s*\\)$/i;\nvar namedColorRegex = /^[a-z]+$/i;\nvar roundColor = function roundColor(color) {\n  return Math.round(color * 255);\n};\nvar hslToRgb = function hslToRgb(hue, saturation, lightness) {\n  var l = lightness / 100;\n  if (saturation === 0) {\n    // achromatic\n    return [l, l, l].map(roundColor);\n  }\n\n  // formulae from https://en.wikipedia.org/wiki/HSL_and_HSV\n  var huePrime = (hue % 360 + 360) % 360 / 60;\n  var chroma = (1 - Math.abs(2 * l - 1)) * (saturation / 100);\n  var secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));\n  var red = 0;\n  var green = 0;\n  var blue = 0;\n  if (huePrime >= 0 && huePrime < 1) {\n    red = chroma;\n    green = secondComponent;\n  } else if (huePrime >= 1 && huePrime < 2) {\n    red = secondComponent;\n    green = chroma;\n  } else if (huePrime >= 2 && huePrime < 3) {\n    green = chroma;\n    blue = secondComponent;\n  } else if (huePrime >= 3 && huePrime < 4) {\n    green = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 4 && huePrime < 5) {\n    red = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 5 && huePrime < 6) {\n    red = chroma;\n    blue = secondComponent;\n  }\n  var lightnessModification = l - chroma / 2;\n  var finalRed = red + lightnessModification;\n  var finalGreen = green + lightnessModification;\n  var finalBlue = blue + lightnessModification;\n  return [finalRed, finalGreen, finalBlue].map(roundColor);\n};\n\n// taken from:\n\n/**\n * Parses a color in hue, saturation, lightness, and the alpha channel.\n *\n * Hue is a number between 0 and 360, saturation, lightness, and alpha are\n * decimal percentages between 0 and 1\n */\nfunction parseToHsla(color) {\n  var _parseToRgba$map = parseToRgba(color).map(function (value, index) {\n      return (\n        // 3rd index is alpha channel which is already normalized\n        index === 3 ? value : value / 255\n      );\n    }),\n    _parseToRgba$map2 = _slicedToArray(_parseToRgba$map, 4),\n    red = _parseToRgba$map2[0],\n    green = _parseToRgba$map2[1],\n    blue = _parseToRgba$map2[2],\n    alpha = _parseToRgba$map2[3];\n  var max = Math.max(red, green, blue);\n  var min = Math.min(red, green, blue);\n  var lightness = (max + min) / 2;\n\n  // achromatic\n  if (max === min) return [0, 0, lightness, alpha];\n  var delta = max - min;\n  var saturation = lightness > 0.5 ? delta / (2 - max - min) : delta / (max + min);\n  var hue = 60 * (red === max ? (green - blue) / delta + (green < blue ? 6 : 0) : green === max ? (blue - red) / delta + 2 : (red - green) / delta + 4);\n  return [hue, saturation, lightness, alpha];\n}\n\n/**\n * Takes in hsla parts and constructs an hsla string\n *\n * @param hue The color circle (from 0 to 360) - 0 (or 360) is red, 120 is green, 240 is blue\n * @param saturation Percentage of saturation, given as a decimal between 0 and 1\n * @param lightness Percentage of lightness, given as a decimal between 0 and 1\n * @param alpha Percentage of opacity, given as a decimal between 0 and 1\n */\nfunction hsla(hue, saturation, lightness, alpha) {\n  return \"hsla(\".concat((hue % 360).toFixed(), \", \").concat(guard(0, 100, saturation * 100).toFixed(), \"%, \").concat(guard(0, 100, lightness * 100).toFixed(), \"%, \").concat(parseFloat(guard(0, 1, alpha).toFixed(3)), \")\");\n}\n\n/**\n * Adjusts the current hue of the color by the given degrees. Wraps around when\n * over 360.\n *\n * @param color input color\n * @param degrees degrees to adjust the input color, accepts degree integers\n * (0 - 360) and wraps around on overflow\n */\nfunction adjustHue(color, degrees) {\n  var _parseToHsla = parseToHsla(color),\n    _parseToHsla2 = _slicedToArray(_parseToHsla, 4),\n    h = _parseToHsla2[0],\n    s = _parseToHsla2[1],\n    l = _parseToHsla2[2],\n    a = _parseToHsla2[3];\n  return hsla(h + degrees, s, l, a);\n}\n\n/**\n * Darkens using lightness. This is equivalent to subtracting the lightness\n * from the L in HSL.\n *\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction darken(color, amount) {\n  var _parseToHsla3 = parseToHsla(color),\n    _parseToHsla4 = _slicedToArray(_parseToHsla3, 4),\n    hue = _parseToHsla4[0],\n    saturation = _parseToHsla4[1],\n    lightness = _parseToHsla4[2],\n    alpha = _parseToHsla4[3];\n  return hsla(hue, saturation, lightness - amount, alpha);\n}\n\n/**\n * Desaturates the input color by the given amount via subtracting from the `s`\n * in `hsla`.\n *\n * @param amount The amount to desaturate, given as a decimal between 0 and 1\n */\nfunction desaturate(color, amount) {\n  var _parseToHsla5 = parseToHsla(color),\n    _parseToHsla6 = _slicedToArray(_parseToHsla5, 4),\n    h = _parseToHsla6[0],\n    s = _parseToHsla6[1],\n    l = _parseToHsla6[2],\n    a = _parseToHsla6[3];\n  return hsla(h, s - amount, l, a);\n}\n\n// taken from:\n// https://github.com/styled-components/polished/blob/0764c982551b487469043acb56281b0358b3107b/src/color/getLuminance.js\n\n/**\n * Returns a number (float) representing the luminance of a color.\n */\nfunction getLuminance(color) {\n  if (color === 'transparent') return 0;\n  function f(x) {\n    var channel = x / 255;\n    return channel <= 0.03928 ? channel / 12.92 : Math.pow((channel + 0.055) / 1.055, 2.4);\n  }\n  var _parseToRgba = parseToRgba(color),\n    _parseToRgba2 = _slicedToArray(_parseToRgba, 3),\n    r = _parseToRgba2[0],\n    g = _parseToRgba2[1],\n    b = _parseToRgba2[2];\n  return 0.2126 * f(r) + 0.7152 * f(g) + 0.0722 * f(b);\n}\n\n// taken from:\n\n/**\n * Returns the contrast ratio between two colors based on\n * [W3's recommended equation for calculating contrast](http://www.w3.org/TR/WCAG20/#contrast-ratiodef).\n */\nfunction getContrast(color1, color2) {\n  var luminance1 = getLuminance(color1);\n  var luminance2 = getLuminance(color2);\n  return luminance1 > luminance2 ? (luminance1 + 0.05) / (luminance2 + 0.05) : (luminance2 + 0.05) / (luminance1 + 0.05);\n}\n\n/**\n * Takes in rgba parts and returns an rgba string\n *\n * @param red The amount of red in the red channel, given in a number between 0 and 255 inclusive\n * @param green The amount of green in the red channel, given in a number between 0 and 255 inclusive\n * @param blue The amount of blue in the red channel, given in a number between 0 and 255 inclusive\n * @param alpha Percentage of opacity, given as a decimal between 0 and 1\n */\nfunction rgba(red, green, blue, alpha) {\n  return \"rgba(\".concat(guard(0, 255, red).toFixed(), \", \").concat(guard(0, 255, green).toFixed(), \", \").concat(guard(0, 255, blue).toFixed(), \", \").concat(parseFloat(guard(0, 1, alpha).toFixed(3)), \")\");\n}\n\n/**\n * Mixes two colors together. Taken from sass's implementation.\n */\nfunction mix(color1, color2, weight) {\n  var normalize = function normalize(n, index) {\n    return (\n      // 3rd index is alpha channel which is already normalized\n      index === 3 ? n : n / 255\n    );\n  };\n  var _parseToRgba$map3 = parseToRgba(color1).map(normalize),\n    _parseToRgba$map4 = _slicedToArray(_parseToRgba$map3, 4),\n    r1 = _parseToRgba$map4[0],\n    g1 = _parseToRgba$map4[1],\n    b1 = _parseToRgba$map4[2],\n    a1 = _parseToRgba$map4[3];\n  var _parseToRgba$map5 = parseToRgba(color2).map(normalize),\n    _parseToRgba$map6 = _slicedToArray(_parseToRgba$map5, 4),\n    r2 = _parseToRgba$map6[0],\n    g2 = _parseToRgba$map6[1],\n    b2 = _parseToRgba$map6[2],\n    a2 = _parseToRgba$map6[3];\n\n  // The formula is copied from the original Sass implementation:\n  // http://sass-lang.com/documentation/Sass/Script/Functions.html#mix-instance_method\n  var alphaDelta = a2 - a1;\n  var normalizedWeight = weight * 2 - 1;\n  var combinedWeight = normalizedWeight * alphaDelta === -1 ? normalizedWeight : normalizedWeight + alphaDelta / (1 + normalizedWeight * alphaDelta);\n  var weight2 = (combinedWeight + 1) / 2;\n  var weight1 = 1 - weight2;\n  var r = (r1 * weight1 + r2 * weight2) * 255;\n  var g = (g1 * weight1 + g2 * weight2) * 255;\n  var b = (b1 * weight1 + b2 * weight2) * 255;\n  var a = a2 * weight + a1 * (1 - weight);\n  return rgba(r, g, b, a);\n}\n\n/**\n * Given a series colors, this function will return a `scale(x)` function that\n * accepts a percentage as a decimal between 0 and 1 and returns the color at\n * that percentage in the scale.\n *\n * ```js\n * const scale = getScale('red', 'yellow', 'green');\n * console.log(scale(0)); // rgba(255, 0, 0, 1)\n * console.log(scale(0.5)); // rgba(255, 255, 0, 1)\n * console.log(scale(1)); // rgba(0, 128, 0, 1)\n * ```\n *\n * If you'd like to limit the domain and range like chroma-js, we recommend\n * wrapping scale again.\n *\n * ```js\n * const _scale = getScale('red', 'yellow', 'green');\n * const scale = x => _scale(x / 100);\n *\n * console.log(scale(0)); // rgba(255, 0, 0, 1)\n * console.log(scale(50)); // rgba(255, 255, 0, 1)\n * console.log(scale(100)); // rgba(0, 128, 0, 1)\n * ```\n */\nfunction getScale() {\n  for (var _len = arguments.length, colors = new Array(_len), _key = 0; _key < _len; _key++) {\n    colors[_key] = arguments[_key];\n  }\n  return function (n) {\n    var lastIndex = colors.length - 1;\n    var lowIndex = guard(0, lastIndex, Math.floor(n * lastIndex));\n    var highIndex = guard(0, lastIndex, Math.ceil(n * lastIndex));\n    var color1 = colors[lowIndex];\n    var color2 = colors[highIndex];\n    var unit = 1 / lastIndex;\n    var weight = (n - unit * lowIndex) / unit;\n    return mix(color1, color2, weight);\n  };\n}\nvar guidelines = {\n  decorative: 1.5,\n  readable: 3,\n  aa: 4.5,\n  aaa: 7\n};\n\n/**\n * Returns whether or not a color has bad contrast against a background\n * according to a given standard.\n */\nfunction hasBadContrast(color) {\n  var standard = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'aa';\n  var background = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '#fff';\n  return getContrast(color, background) < guidelines[standard];\n}\n\n/**\n * Lightens a color by a given amount. This is equivalent to\n * `darken(color, -amount)`\n *\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction lighten(color, amount) {\n  return darken(color, -amount);\n}\n\n/**\n * Takes in a color and makes it more transparent by convert to `rgba` and\n * decreasing the amount in the alpha channel.\n *\n * @param amount The amount to increase the transparency by, given as a decimal between 0 and 1\n */\nfunction transparentize(color, amount) {\n  var _parseToRgba3 = parseToRgba(color),\n    _parseToRgba4 = _slicedToArray(_parseToRgba3, 4),\n    r = _parseToRgba4[0],\n    g = _parseToRgba4[1],\n    b = _parseToRgba4[2],\n    a = _parseToRgba4[3];\n  return rgba(r, g, b, a - amount);\n}\n\n/**\n * Takes a color and un-transparentizes it. Equivalent to\n * `transparentize(color, -amount)`\n *\n * @param amount The amount to increase the opacity by, given as a decimal between 0 and 1\n */\nfunction opacify(color, amount) {\n  return transparentize(color, -amount);\n}\n\n/**\n * An alternative function to `readableColor`. Returns whether or not the \n * readable color (i.e. the color to be place on top the input color) should be\n * black.\n */\nfunction readableColorIsBlack(color) {\n  return getLuminance(color) > 0.179;\n}\n\n/**\n * Returns black or white for best contrast depending on the luminosity of the\n * given color.\n */\nfunction readableColor(color) {\n  return readableColorIsBlack(color) ? '#000' : '#fff';\n}\n\n/**\n * Saturates a color by converting it to `hsl` and increasing the saturation\n * amount. Equivalent to `desaturate(color, -amount)`\n * \n * @param color Input color\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction saturate(color, amount) {\n  return desaturate(color, -amount);\n}\n\n/**\n * Takes in any color and returns it as a hex code.\n */\nfunction toHex(color) {\n  var _parseToRgba5 = parseToRgba(color),\n    _parseToRgba6 = _slicedToArray(_parseToRgba5, 4),\n    r = _parseToRgba6[0],\n    g = _parseToRgba6[1],\n    b = _parseToRgba6[2],\n    a = _parseToRgba6[3];\n  var hex = function hex(x) {\n    var h = guard(0, 255, x).toString(16);\n    // NOTE: padStart could be used here but it breaks Node 6 compat\n    // https://github.com/ricokahler/color2k/issues/351\n    return h.length === 1 ? \"0\".concat(h) : h;\n  };\n  return \"#\".concat(hex(r)).concat(hex(g)).concat(hex(b)).concat(a < 1 ? hex(Math.round(a * 255)) : '');\n}\n\n/**\n * Takes in any color and returns it as an rgba string.\n */\nfunction toRgba(color) {\n  return rgba.apply(void 0, _toConsumableArray(parseToRgba(color)));\n}\n\n/**\n * Takes in any color and returns it as an hsla string.\n */\nfunction toHsla(color) {\n  return hsla.apply(void 0, _toConsumableArray(parseToHsla(color)));\n}\nexport { ColorError$1 as ColorError, adjustHue, darken, desaturate, getContrast, getLuminance, getScale, guard, hasBadContrast, hsla, lighten, mix, opacify, parseToHsla, parseToRgba, readableColor, readableColorIsBlack, rgba, saturate, toHex, toHsla, toRgba, transparentize };","map":{"version":3,"names":["guard","low","high","value","Math","min","max","ColorError","_Error","_inherits","_super","_createSuper","color","_classCallCheck","call","concat","_createClass","_wrapNativeSuper","Error","ColorError$1","parseToRgba","trim","toLowerCase","normalizedColor","namedColorRegex","test","nameToHex","reducedHexMatch","reducedHexRegex","exec","arr","Array","from","slice","_toConsumableArray","map","x","parseInt","r","hexMatch","hexRegex","rgbaMatch","rgbaRegex","parseFloat","hslaMatch","hslaRegex","_Array$from$slice$map","_Array$from$slice$map2","_slicedToArray","h","s","l","a","hslToRgb","Number","isNaN","hash","str","i","length","charCodeAt","colorToInt","replace","compressedColorMap","split","reduce","acc","next","key","substring","hex","toString","prefix","normalizedColorName","result","amount","join","RegExp","roundColor","round","hue","saturation","lightness","huePrime","chroma","abs","secondComponent","red","green","blue","lightnessModification","finalRed","finalGreen","finalBlue","parseToHsla","_parseToRgba$map","index","_parseToRgba$map2","alpha","delta","hsla","toFixed","adjustHue","degrees","_parseToHsla","_parseToHsla2","darken","_parseToHsla3","_parseToHsla4","desaturate","_parseToHsla5","_parseToHsla6","getLuminance","f","channel","pow","_parseToRgba","_parseToRgba2","g","b","getContrast","color1","color2","luminance1","luminance2","rgba","mix","weight","normalize","n","_parseToRgba$map3","_parseToRgba$map4","r1","g1","b1","a1","_parseToRgba$map5","_parseToRgba$map6","r2","g2","b2","a2","alphaDelta","normalizedWeight","combinedWeight","weight2","weight1","getScale","_len","arguments","colors","_key","lastIndex","lowIndex","floor","highIndex","ceil","unit","guidelines","decorative","readable","aa","aaa","hasBadContrast","standard","undefined","background","lighten","transparentize","_parseToRgba3","_parseToRgba4","opacify","readableColorIsBlack","readableColor","saturate","toHex","_parseToRgba5","_parseToRgba6","toRgba","apply","toHsla"],"sources":["/Users/eyliu/Desktop/FitBuddy/node_modules/color2k/src/guard.ts","/Users/eyliu/Desktop/FitBuddy/node_modules/color2k/src/ColorError.ts","/Users/eyliu/Desktop/FitBuddy/node_modules/color2k/src/parseToRgba.ts","/Users/eyliu/Desktop/FitBuddy/node_modules/color2k/src/parseToHsla.ts","/Users/eyliu/Desktop/FitBuddy/node_modules/color2k/src/hsla.ts","/Users/eyliu/Desktop/FitBuddy/node_modules/color2k/src/adjustHue.ts","/Users/eyliu/Desktop/FitBuddy/node_modules/color2k/src/darken.ts","/Users/eyliu/Desktop/FitBuddy/node_modules/color2k/src/desaturate.ts","/Users/eyliu/Desktop/FitBuddy/node_modules/color2k/src/getLuminance.ts","/Users/eyliu/Desktop/FitBuddy/node_modules/color2k/src/getContrast.ts","/Users/eyliu/Desktop/FitBuddy/node_modules/color2k/src/rgba.ts","/Users/eyliu/Desktop/FitBuddy/node_modules/color2k/src/mix.ts","/Users/eyliu/Desktop/FitBuddy/node_modules/color2k/src/getScale.ts","/Users/eyliu/Desktop/FitBuddy/node_modules/color2k/src/hasBadContrast.ts","/Users/eyliu/Desktop/FitBuddy/node_modules/color2k/src/lighten.ts","/Users/eyliu/Desktop/FitBuddy/node_modules/color2k/src/transparentize.ts","/Users/eyliu/Desktop/FitBuddy/node_modules/color2k/src/opacify.ts","/Users/eyliu/Desktop/FitBuddy/node_modules/color2k/src/readableColorIsBlack.ts","/Users/eyliu/Desktop/FitBuddy/node_modules/color2k/src/readableColor.ts","/Users/eyliu/Desktop/FitBuddy/node_modules/color2k/src/saturate.ts","/Users/eyliu/Desktop/FitBuddy/node_modules/color2k/src/toHex.ts","/Users/eyliu/Desktop/FitBuddy/node_modules/color2k/src/toRgba.ts","/Users/eyliu/Desktop/FitBuddy/node_modules/color2k/src/toHsla.ts"],"sourcesContent":["/**\n * A simple guard function:\n *\n * ```js\n * Math.min(Math.max(low, value), high)\n * ```\n */\nfunction guard(low: number, high: number, value: number): number {\n  return Math.min(Math.max(low, value), high);\n}\n\nexport default guard;\n","class ColorError extends Error {\n  constructor(color: string) {\n    super(`Failed to parse color: \"${color}\"`);\n  }\n}\n\nexport default ColorError;\n","import guard from './guard';\nimport ColorError from './ColorError';\n\n/**\n * Parses a color into red, gree, blue, alpha parts\n *\n * @param color the input color. Can be a RGB, RBGA, HSL, HSLA, or named color\n */\nfunction parseToRgba(color: string): [number, number, number, number] {\n  if (typeof color !== 'string') throw new ColorError(color);\n  if (color.trim().toLowerCase() === 'transparent') return [0, 0, 0, 0];\n\n  let normalizedColor = color.trim();\n  normalizedColor = namedColorRegex.test(color) ? nameToHex(color) : color;\n\n  const reducedHexMatch = reducedHexRegex.exec(normalizedColor);\n  if (reducedHexMatch) {\n    const arr = Array.from(reducedHexMatch).slice(1);\n    return [\n      ...arr.slice(0, 3).map((x) => parseInt(r(x, 2), 16)),\n      parseInt(r(arr[3] || 'f', 2), 16) / 255,\n    ] as [number, number, number, number];\n  }\n\n  const hexMatch = hexRegex.exec(normalizedColor);\n  if (hexMatch) {\n    const arr = Array.from(hexMatch).slice(1);\n    return [\n      ...arr.slice(0, 3).map((x) => parseInt(x, 16)),\n      parseInt(arr[3] || 'ff', 16) / 255,\n    ] as [number, number, number, number];\n  }\n\n  const rgbaMatch = rgbaRegex.exec(normalizedColor);\n  if (rgbaMatch) {\n    const arr = Array.from(rgbaMatch).slice(1);\n    return [\n      ...arr.slice(0, 3).map((x) => parseInt(x, 10)),\n      parseFloat(arr[3] || '1'),\n    ] as [number, number, number, number];\n  }\n\n  const hslaMatch = hslaRegex.exec(normalizedColor);\n  if (hslaMatch) {\n    const [h, s, l, a] = Array.from(hslaMatch).slice(1).map(parseFloat);\n    if (guard(0, 100, s) !== s) throw new ColorError(color);\n    if (guard(0, 100, l) !== l) throw new ColorError(color);\n    return [...hslToRgb(h, s, l), Number.isNaN(a) ? 1 : a] as [\n      number,\n      number,\n      number,\n      number\n    ];\n  }\n\n  throw new ColorError(color);\n}\n\nfunction hash(str: string) {\n  let hash = 5381;\n  let i = str.length;\n\n  while (i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i);\n  }\n\n  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */\n  return (hash >>> 0) % 2341;\n}\n\nconst colorToInt = (x: string) => parseInt(x.replace(/_/g, ''), 36);\n\nconst compressedColorMap =\n  '1q29ehhb 1n09sgk7 1kl1ekf_ _yl4zsno 16z9eiv3 1p29lhp8 _bd9zg04 17u0____ _iw9zhe5 _to73___ _r45e31e _7l6g016 _jh8ouiv _zn3qba8 1jy4zshs 11u87k0u 1ro9yvyo 1aj3xael 1gz9zjz0 _3w8l4xo 1bf1ekf_ _ke3v___ _4rrkb__ 13j776yz _646mbhl _nrjr4__ _le6mbhl 1n37ehkb _m75f91n _qj3bzfz 1939yygw 11i5z6x8 _1k5f8xs 1509441m 15t5lwgf _ae2th1n _tg1ugcv 1lp1ugcv 16e14up_ _h55rw7n _ny9yavn _7a11xb_ 1ih442g9 _pv442g9 1mv16xof 14e6y7tu 1oo9zkds 17d1cisi _4v9y70f _y98m8kc 1019pq0v 12o9zda8 _348j4f4 1et50i2o _8epa8__ _ts6senj 1o350i2o 1mi9eiuo 1259yrp0 1ln80gnw _632xcoy 1cn9zldc _f29edu4 1n490c8q _9f9ziet 1b94vk74 _m49zkct 1kz6s73a 1eu9dtog _q58s1rz 1dy9sjiq __u89jo3 _aj5nkwg _ld89jo3 13h9z6wx _qa9z2ii _l119xgq _bs5arju 1hj4nwk9 1qt4nwk9 1ge6wau6 14j9zlcw 11p1edc_ _ms1zcxe _439shk6 _jt9y70f _754zsow 1la40eju _oq5p___ _x279qkz 1fa5r3rv _yd2d9ip _424tcku _8y1di2_ _zi2uabw _yy7rn9h 12yz980_ __39ljp6 1b59zg0x _n39zfzp 1fy9zest _b33k___ _hp9wq92 1il50hz4 _io472ub _lj9z3eo 19z9ykg0 _8t8iu3a 12b9bl4a 1ak5yw0o _896v4ku _tb8k8lv _s59zi6t _c09ze0p 1lg80oqn 1id9z8wb _238nba5 1kq6wgdi _154zssg _tn3zk49 _da9y6tc 1sg7cv4f _r12jvtt 1gq5fmkz 1cs9rvci _lp9jn1c _xw1tdnb 13f9zje6 16f6973h _vo7ir40 _bt5arjf _rc45e4t _hr4e100 10v4e100 _hc9zke2 _w91egv_ _sj2r1kk 13c87yx8 _vqpds__ _ni8ggk8 _tj9yqfb 1ia2j4r4 _7x9b10u 1fc9ld4j 1eq9zldr _5j9lhpx _ez9zl6o _md61fzm'\n    .split(' ')\n    .reduce((acc, next) => {\n      const key = colorToInt(next.substring(0, 3));\n      const hex = colorToInt(next.substring(3)).toString(16);\n\n      // NOTE: padStart could be used here but it breaks Node 6 compat\n      // https://github.com/ricokahler/color2k/issues/351\n      let prefix = '';\n      for (let i = 0; i < 6 - hex.length; i++) {\n        prefix += '0';\n      }\n\n      acc[key] = `${prefix}${hex}`;\n      return acc;\n    }, {} as { [key: string]: string });\n\n/**\n * Checks if a string is a CSS named color and returns its equivalent hex value, otherwise returns the original color.\n */\nfunction nameToHex(color: string): string {\n  const normalizedColorName = color.toLowerCase().trim();\n  const result = compressedColorMap[hash(normalizedColorName)];\n  if (!result) throw new ColorError(color);\n  return `#${result}`;\n}\n\nconst r = (str: string, amount: number) =>\n  Array.from(Array(amount))\n    .map(() => str)\n    .join('');\n\nconst reducedHexRegex = new RegExp(`^#${r('([a-f0-9])', 3)}([a-f0-9])?$`, 'i');\nconst hexRegex = new RegExp(`^#${r('([a-f0-9]{2})', 3)}([a-f0-9]{2})?$`, 'i');\nconst rgbaRegex = new RegExp(\n  `^rgba?\\\\(\\\\s*(\\\\d+)\\\\s*${r(\n    ',\\\\s*(\\\\d+)\\\\s*',\n    2\n  )}(?:,\\\\s*([\\\\d.]+))?\\\\s*\\\\)$`,\n  'i'\n);\nconst hslaRegex =\n  /^hsla?\\(\\s*([\\d.]+)\\s*,\\s*([\\d.]+)%\\s*,\\s*([\\d.]+)%(?:\\s*,\\s*([\\d.]+))?\\s*\\)$/i;\nconst namedColorRegex = /^[a-z]+$/i;\n\nconst roundColor = (color: number): number => {\n  return Math.round(color * 255);\n};\n\nconst hslToRgb = (\n  hue: number,\n  saturation: number,\n  lightness: number\n): [number, number, number] => {\n  let l = lightness / 100;\n  if (saturation === 0) {\n    // achromatic\n    return [l, l, l].map(roundColor) as [number, number, number];\n  }\n\n  // formulae from https://en.wikipedia.org/wiki/HSL_and_HSV\n  const huePrime = (((hue % 360) + 360) % 360) / 60;\n  const chroma = (1 - Math.abs(2 * l - 1)) * (saturation / 100);\n  const secondComponent = chroma * (1 - Math.abs((huePrime % 2) - 1));\n\n  let red = 0;\n  let green = 0;\n  let blue = 0;\n\n  if (huePrime >= 0 && huePrime < 1) {\n    red = chroma;\n    green = secondComponent;\n  } else if (huePrime >= 1 && huePrime < 2) {\n    red = secondComponent;\n    green = chroma;\n  } else if (huePrime >= 2 && huePrime < 3) {\n    green = chroma;\n    blue = secondComponent;\n  } else if (huePrime >= 3 && huePrime < 4) {\n    green = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 4 && huePrime < 5) {\n    red = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 5 && huePrime < 6) {\n    red = chroma;\n    blue = secondComponent;\n  }\n\n  const lightnessModification = l - chroma / 2;\n  const finalRed = red + lightnessModification;\n  const finalGreen = green + lightnessModification;\n  const finalBlue = blue + lightnessModification;\n\n  return [finalRed, finalGreen, finalBlue].map(roundColor) as [\n    number,\n    number,\n    number\n  ];\n};\n\nexport default parseToRgba;\n","// taken from:\n// https://github.com/styled-components/polished/blob/a23a6a2bb26802b3d922d9c3b67bac3f3a54a310/src/internalHelpers/_rgbToHsl.js\nimport parseToRgba from './parseToRgba';\n\n/**\n * Parses a color in hue, saturation, lightness, and the alpha channel.\n *\n * Hue is a number between 0 and 360, saturation, lightness, and alpha are\n * decimal percentages between 0 and 1\n */\nfunction parseToHsla(color: string): [number, number, number, number] {\n  const [red, green, blue, alpha] = parseToRgba(color).map((value, index) =>\n    // 3rd index is alpha channel which is already normalized\n    index === 3 ? value : value / 255\n  );\n\n  const max = Math.max(red, green, blue);\n  const min = Math.min(red, green, blue);\n  const lightness = (max + min) / 2;\n\n  // achromatic\n  if (max === min) return [0, 0, lightness, alpha];\n\n  const delta = max - min;\n  const saturation =\n    lightness > 0.5 ? delta / (2 - max - min) : delta / (max + min);\n\n  const hue =\n    60 *\n    (red === max\n      ? (green - blue) / delta + (green < blue ? 6 : 0)\n      : green === max\n      ? (blue - red) / delta + 2\n      : (red - green) / delta + 4);\n\n  return [hue, saturation, lightness, alpha];\n}\n\nexport default parseToHsla;\n","import guard from './guard';\n\n/**\n * Takes in hsla parts and constructs an hsla string\n *\n * @param hue The color circle (from 0 to 360) - 0 (or 360) is red, 120 is green, 240 is blue\n * @param saturation Percentage of saturation, given as a decimal between 0 and 1\n * @param lightness Percentage of lightness, given as a decimal between 0 and 1\n * @param alpha Percentage of opacity, given as a decimal between 0 and 1\n */\nfunction hsla(\n  hue: number,\n  saturation: number,\n  lightness: number,\n  alpha: number\n): string {\n  return `hsla(${(hue % 360).toFixed()}, ${guard(\n    0,\n    100,\n    saturation * 100\n  ).toFixed()}%, ${guard(0, 100, lightness * 100).toFixed()}%, ${parseFloat(\n    guard(0, 1, alpha).toFixed(3)\n  )})`;\n}\n\nexport default hsla;\n","import parseToHsla from './parseToHsla';\nimport hsla from './hsla';\n\n/**\n * Adjusts the current hue of the color by the given degrees. Wraps around when\n * over 360.\n *\n * @param color input color\n * @param degrees degrees to adjust the input color, accepts degree integers\n * (0 - 360) and wraps around on overflow\n */\nfunction adjustHue(color: string, degrees: number): string {\n  const [h, s, l, a] = parseToHsla(color);\n  return hsla(h + degrees, s, l, a);\n}\n\nexport default adjustHue;\n","import parseToHsla from './parseToHsla';\nimport hsla from './hsla';\n\n/**\n * Darkens using lightness. This is equivalent to subtracting the lightness\n * from the L in HSL.\n *\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction darken(color: string, amount: number): string {\n  const [hue, saturation, lightness, alpha] = parseToHsla(color);\n  return hsla(hue, saturation, lightness - amount, alpha);\n}\n\nexport default darken;\n","import parseToHsla from './parseToHsla';\nimport hsla from './hsla';\n\n/**\n * Desaturates the input color by the given amount via subtracting from the `s`\n * in `hsla`.\n *\n * @param amount The amount to desaturate, given as a decimal between 0 and 1\n */\nfunction desaturate(color: string, amount: number): string {\n  const [h, s, l, a] = parseToHsla(color);\n  return hsla(h, s - amount, l, a);\n}\n\nexport default desaturate;\n","import parseToRgba from './parseToRgba';\n// taken from:\n// https://github.com/styled-components/polished/blob/0764c982551b487469043acb56281b0358b3107b/src/color/getLuminance.js\n\n/**\n * Returns a number (float) representing the luminance of a color.\n */\nfunction getLuminance(color: string): number {\n  if (color === 'transparent') return 0;\n\n  function f(x: number) {\n    const channel = x / 255;\n    return channel <= 0.03928\n      ? channel / 12.92\n      : Math.pow(((channel + 0.055) / 1.055), 2.4);\n  }\n\n  const [r, g, b] = parseToRgba(color);\n  return 0.2126 * f(r) + 0.7152 * f(g) + 0.0722 * f(b);\n}\n\nexport default getLuminance;\n","// taken from:\n// https://github.com/styled-components/polished/blob/0764c982551b487469043acb56281b0358b3107b/src/color/getContrast.js\nimport getLuminance from './getLuminance';\n\n/**\n * Returns the contrast ratio between two colors based on\n * [W3's recommended equation for calculating contrast](http://www.w3.org/TR/WCAG20/#contrast-ratiodef).\n */\nfunction getContrast(color1: string, color2: string): number {\n  const luminance1 = getLuminance(color1);\n  const luminance2 = getLuminance(color2);\n\n  return luminance1 > luminance2\n    ? (luminance1 + 0.05) / (luminance2 + 0.05)\n    : (luminance2 + 0.05) / (luminance1 + 0.05);\n}\n\nexport default getContrast;\n","import guard from './guard';\n\n/**\n * Takes in rgba parts and returns an rgba string\n *\n * @param red The amount of red in the red channel, given in a number between 0 and 255 inclusive\n * @param green The amount of green in the red channel, given in a number between 0 and 255 inclusive\n * @param blue The amount of blue in the red channel, given in a number between 0 and 255 inclusive\n * @param alpha Percentage of opacity, given as a decimal between 0 and 1\n */\nfunction rgba(red: number, green: number, blue: number, alpha: number): string {\n  return `rgba(${guard(0, 255, red).toFixed()}, ${guard(\n    0,\n    255,\n    green\n  ).toFixed()}, ${guard(0, 255, blue).toFixed()}, ${parseFloat(\n    guard(0, 1, alpha).toFixed(3)\n  )})`;\n}\n\nexport default rgba;\n","import parseToRgba from './parseToRgba';\nimport rgba from './rgba';\n\n/**\n * Mixes two colors together. Taken from sass's implementation.\n */\nfunction mix(color1: string, color2: string, weight: number): string {\n  const normalize = (n: number, index: number) =>\n    // 3rd index is alpha channel which is already normalized\n    index === 3 ? n : n / 255;\n\n  const [r1, g1, b1, a1] = parseToRgba(color1).map(normalize);\n  const [r2, g2, b2, a2] = parseToRgba(color2).map(normalize);\n\n  // The formula is copied from the original Sass implementation:\n  // http://sass-lang.com/documentation/Sass/Script/Functions.html#mix-instance_method\n  const alphaDelta = a2 - a1;\n  const normalizedWeight = weight * 2 - 1;\n  const combinedWeight =\n    normalizedWeight * alphaDelta === -1\n      ? normalizedWeight\n      : normalizedWeight + alphaDelta / (1 + normalizedWeight * alphaDelta);\n  const weight2 = (combinedWeight + 1) / 2;\n  const weight1 = 1 - weight2;\n\n  const r = (r1 * weight1 + r2 * weight2) * 255;\n  const g = (g1 * weight1 + g2 * weight2) * 255;\n  const b = (b1 * weight1 + b2 * weight2) * 255;\n  const a = a2 * weight + a1 * (1 - weight);\n\n  return rgba(r, g, b, a);\n}\n\nexport default mix;\n","import mix from './mix';\nimport guard from './guard';\n\n/**\n * Given a series colors, this function will return a `scale(x)` function that\n * accepts a percentage as a decimal between 0 and 1 and returns the color at\n * that percentage in the scale.\n *\n * ```js\n * const scale = getScale('red', 'yellow', 'green');\n * console.log(scale(0)); // rgba(255, 0, 0, 1)\n * console.log(scale(0.5)); // rgba(255, 255, 0, 1)\n * console.log(scale(1)); // rgba(0, 128, 0, 1)\n * ```\n *\n * If you'd like to limit the domain and range like chroma-js, we recommend\n * wrapping scale again.\n *\n * ```js\n * const _scale = getScale('red', 'yellow', 'green');\n * const scale = x => _scale(x / 100);\n *\n * console.log(scale(0)); // rgba(255, 0, 0, 1)\n * console.log(scale(50)); // rgba(255, 255, 0, 1)\n * console.log(scale(100)); // rgba(0, 128, 0, 1)\n * ```\n */\nfunction getScale(...colors: string[]): (n: number) => string {\n  return (n) => {\n    const lastIndex = colors.length - 1;\n    const lowIndex = guard(0, lastIndex, Math.floor(n * lastIndex));\n    const highIndex = guard(0, lastIndex, Math.ceil(n * lastIndex));\n\n    const color1 = colors[lowIndex];\n    const color2 = colors[highIndex];\n\n    const unit = 1 / lastIndex;\n    const weight = (n - unit * lowIndex) / unit;\n\n    return mix(color1, color2, weight);\n  };\n}\n\nexport default getScale;\n","import getContrast from './getContrast';\n\nconst guidelines = {\n  decorative: 1.5,\n  readable: 3,\n  aa: 4.5,\n  aaa: 7,\n};\n\n/**\n * Returns whether or not a color has bad contrast against a background\n * according to a given standard.\n */\nfunction hasBadContrast(\n  color: string,\n  standard: 'decorative' | 'readable' | 'aa' | 'aaa' = 'aa',\n  background: string = '#fff'\n): boolean {\n  return getContrast(color, background) < guidelines[standard];\n}\n\nexport default hasBadContrast;\n","import darken from './darken';\n/**\n * Lightens a color by a given amount. This is equivalent to\n * `darken(color, -amount)`\n *\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction lighten(color: string, amount: number): string {\n  return darken(color, -amount);\n}\n\nexport default lighten;\n","import parseToRgba from './parseToRgba';\nimport rgba from './rgba';\n\n/**\n * Takes in a color and makes it more transparent by convert to `rgba` and\n * decreasing the amount in the alpha channel.\n *\n * @param amount The amount to increase the transparency by, given as a decimal between 0 and 1\n */\nfunction transparentize(color: string, amount: number): string {\n  const [r, g, b, a] = parseToRgba(color);\n  return rgba(r, g, b, a - amount);\n}\n\nexport default transparentize;\n","import transparentize from './transparentize';\n\n/**\n * Takes a color and un-transparentizes it. Equivalent to\n * `transparentize(color, -amount)`\n *\n * @param amount The amount to increase the opacity by, given as a decimal between 0 and 1\n */\nfunction opacify(color: string, amount: number): string {\n  return transparentize(color, -amount);\n}\n\nexport default opacify;\n","import getLuminance from './getLuminance';\n\n/**\n * An alternative function to `readableColor`. Returns whether or not the \n * readable color (i.e. the color to be place on top the input color) should be\n * black.\n */\nfunction readableColorIsBlack(color: string): boolean {\n  return getLuminance(color) > 0.179;\n}\n\nexport default readableColorIsBlack;\n","import readableColorIsBlack from './readableColorIsBlack';\n\n/**\n * Returns black or white for best contrast depending on the luminosity of the\n * given color.\n */\nfunction readableColor(color: string): string {\n  return readableColorIsBlack(color) ? '#000' : '#fff';\n}\n\nexport default readableColor;\n","import desaturate from './desaturate';\n\n/**\n * Saturates a color by converting it to `hsl` and increasing the saturation\n * amount. Equivalent to `desaturate(color, -amount)`\n * \n * @param color Input color\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction saturate(color: string, amount: number): string {\n  return desaturate(color, -amount);\n}\n\nexport default saturate;\n","import parseToRgba from './parseToRgba';\nimport guard from './guard';\n\n/**\n * Takes in any color and returns it as a hex code.\n */\nfunction toHex(color: string): string {\n  const [r, g, b, a] = parseToRgba(color);\n\n  let hex = (x: number) => {\n    const h = guard(0, 255, x).toString(16);\n    // NOTE: padStart could be used here but it breaks Node 6 compat\n    // https://github.com/ricokahler/color2k/issues/351\n    return h.length === 1 ? `0${h}` : h;\n  };\n\n  return `#${hex(r)}${hex(g)}${hex(b)}${a < 1 ? hex(Math.round(a * 255)) : ''}`;\n}\n\nexport default toHex;\n","import parseToRgba from './parseToRgba';\nimport rgba from './rgba';\n\n/**\n * Takes in any color and returns it as an rgba string.\n */\nfunction toRgba(color: string): string {\n  return rgba(...parseToRgba(color));\n}\n\nexport default toRgba;\n","import parseToHsla from './parseToHsla';\nimport hsla from './hsla';\n\n/**\n * Takes in any color and returns it as an hsla string.\n */\nfunction toHsla(color: string): string {\n  return hsla(...parseToHsla(color));\n}\n\nexport default toHsla;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}