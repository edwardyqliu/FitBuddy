{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useId } from \"./chunk-6B2YUEGK.mjs\";\nimport { useControllableProp } from \"./chunk-7JSBRQFI.mjs\";\nimport { useCallbackRef } from \"./chunk-KA2477BY.mjs\";\n\n// src/use-disclosure.ts\nimport { callAllHandlers } from \"@chakra-ui/utils\";\nimport { useCallback, useState } from \"react\";\nfunction useDisclosure() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var onCloseProp = props.onClose,\n    onOpenProp = props.onOpen,\n    isOpenProp = props.isOpen,\n    idProp = props.id;\n  var onOpenPropCallbackRef = useCallbackRef(onOpenProp);\n  var onClosePropCallbackRef = useCallbackRef(onCloseProp);\n  var _useState = useState(props.defaultIsOpen || false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isOpenState = _useState2[0],\n    setIsOpen = _useState2[1];\n  var _useControllableProp = useControllableProp(isOpenProp, isOpenState),\n    _useControllableProp2 = _slicedToArray(_useControllableProp, 2),\n    isControlled = _useControllableProp2[0],\n    isOpen = _useControllableProp2[1];\n  var id = useId(idProp, \"disclosure\");\n  var onClose = useCallback(function () {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n    onClosePropCallbackRef == null ? void 0 : onClosePropCallbackRef();\n  }, [isControlled, onClosePropCallbackRef]);\n  var onOpen = useCallback(function () {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n    onOpenPropCallbackRef == null ? void 0 : onOpenPropCallbackRef();\n  }, [isControlled, onOpenPropCallbackRef]);\n  var onToggle = useCallback(function () {\n    var action = isOpen ? onClose : onOpen;\n    action();\n  }, [isOpen, onOpen, onClose]);\n  return {\n    isOpen: !!isOpen,\n    onOpen: onOpen,\n    onClose: onClose,\n    onToggle: onToggle,\n    isControlled: isControlled,\n    getButtonProps: function getButtonProps() {\n      var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return _objectSpread(_objectSpread({}, props2), {}, {\n        \"aria-expanded\": isOpen,\n        \"aria-controls\": id,\n        onClick: callAllHandlers(props2.onClick, onToggle)\n      });\n    },\n    getDisclosureProps: function getDisclosureProps() {\n      var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return _objectSpread(_objectSpread({}, props2), {}, {\n        hidden: !isOpen,\n        id: id\n      });\n    }\n  };\n}\nexport { useDisclosure };","map":{"version":3,"names":["callAllHandlers","useCallback","useState","useDisclosure","props","arguments","length","undefined","onCloseProp","onClose","onOpenProp","onOpen","isOpenProp","isOpen","idProp","id","onOpenPropCallbackRef","useCallbackRef","onClosePropCallbackRef","_useState","defaultIsOpen","_useState2","_slicedToArray","isOpenState","setIsOpen","_useControllableProp","useControllableProp","_useControllableProp2","isControlled","useId","onToggle","action","getButtonProps","props2","_objectSpread","onClick","getDisclosureProps","hidden"],"sources":["/Users/eyliu/Desktop/FitBuddy/node_modules/@chakra-ui/hooks/src/use-disclosure.ts"],"sourcesContent":["import { callAllHandlers } from \"@chakra-ui/utils\"\nimport { useControllableProp } from \"./use-controllable\"\nimport { useId } from \"./use-id\"\nimport { useCallbackRef } from \"./use-callback-ref\"\nimport { useCallback, useState } from \"react\"\n\nexport interface UseDisclosureProps {\n  isOpen?: boolean\n  defaultIsOpen?: boolean\n  onClose?(): void\n  onOpen?(): void\n  id?: string\n}\n\nexport function useDisclosure(props: UseDisclosureProps = {}) {\n  const {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp,\n  } = props\n\n  const onOpenPropCallbackRef = useCallbackRef(onOpenProp)\n  const onClosePropCallbackRef = useCallbackRef(onCloseProp)\n  const [isOpenState, setIsOpen] = useState(props.defaultIsOpen || false)\n  const [isControlled, isOpen] = useControllableProp(isOpenProp, isOpenState)\n\n  const id = useId(idProp, \"disclosure\")\n\n  const onClose = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false)\n    }\n    onClosePropCallbackRef?.()\n  }, [isControlled, onClosePropCallbackRef])\n\n  const onOpen = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true)\n    }\n    onOpenPropCallbackRef?.()\n  }, [isControlled, onOpenPropCallbackRef])\n\n  const onToggle = useCallback(() => {\n    const action = isOpen ? onClose : onOpen\n    action()\n  }, [isOpen, onOpen, onClose])\n\n  return {\n    isOpen: !!isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps: (props: any = {}) => ({\n      ...props,\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": id,\n      onClick: callAllHandlers(props.onClick, onToggle),\n    }),\n    getDisclosureProps: (props: any = {}) => ({\n      ...props,\n      hidden: !isOpen,\n      id,\n    }),\n  }\n}\n\nexport type UseDisclosureReturn = ReturnType<typeof useDisclosure>\n"],"mappings":";;;;;;;;;AAAA,SAASA,eAAA,QAAuB;AAIhC,SAASC,WAAA,EAAaC,QAAA,QAAgB;AAU/B,SAASC,cAAA,EAA8C;EAAA,IAAhCC,KAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA4B,CAAC;EACzD,IACWG,WAAA,GAIPJ,KAAA,CAJFK,OAAA;IACQC,UAAA,GAGNN,KAAA,CAHFO,MAAA;IACQC,UAAA,GAENR,KAAA,CAFFS,MAAA;IACIC,MAAA,GACFV,KAAA,CADFW,EAAA;EAGF,IAAMC,qBAAA,GAAwBC,cAAA,CAAeP,UAAU;EACvD,IAAMQ,sBAAA,GAAyBD,cAAA,CAAeT,WAAW;EACzD,IAAAW,SAAA,GAAiCjB,QAAA,CAASE,KAAA,CAAMgB,aAAA,IAAiB,KAAK;IAAAC,UAAA,GAAAC,cAAA,CAAAH,SAAA;IAA/DI,WAAA,GAAAF,UAAA;IAAaG,SAAS,GAAAH,UAAA;EAC7B,IAAAI,oBAAA,GAA+BC,mBAAA,CAAoBd,UAAA,EAAYW,WAAW;IAAAI,qBAAA,GAAAL,cAAA,CAAAG,oBAAA;IAAnEG,YAAA,GAAAD,qBAAA;IAAcd,MAAM,GAAAc,qBAAA;EAE3B,IAAMZ,EAAA,GAAKc,KAAA,CAAMf,MAAA,EAAQ,YAAY;EAErC,IAAML,OAAA,GAAUR,WAAA,CAAY,YAAM;IAChC,IAAI,CAAC2B,YAAA,EAAc;MACjBJ,SAAA,CAAU,KAAK;IACjB;IACAN,sBAAA,oBAAAA,sBAAA;EACF,GAAG,CAACU,YAAA,EAAcV,sBAAsB,CAAC;EAEzC,IAAMP,MAAA,GAASV,WAAA,CAAY,YAAM;IAC/B,IAAI,CAAC2B,YAAA,EAAc;MACjBJ,SAAA,CAAU,IAAI;IAChB;IACAR,qBAAA,oBAAAA,qBAAA;EACF,GAAG,CAACY,YAAA,EAAcZ,qBAAqB,CAAC;EAExC,IAAMc,QAAA,GAAW7B,WAAA,CAAY,YAAM;IACjC,IAAM8B,MAAA,GAASlB,MAAA,GAASJ,OAAA,GAAUE,MAAA;IAClCoB,MAAA,CAAO;EACT,GAAG,CAAClB,MAAA,EAAQF,MAAA,EAAQF,OAAO,CAAC;EAE5B,OAAO;IACLI,MAAA,EAAQ,CAAC,CAACA,MAAA;IACVF,MAAA,EAAAA,MAAA;IACAF,OAAA,EAAAA,OAAA;IACAqB,QAAA,EAAAA,QAAA;IACAF,YAAA,EAAAA,YAAA;IACAI,cAAA,EAAgB,SAAAA,eAAA;MAAA,IAACC,MAAA,GAAA5B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAa,CAAC;MAAA,OAAA6B,aAAA,CAAAA,aAAA,KAC1BD,MAAA;QACH,iBAAiBpB,MAAA;QACjB,iBAAiBE,EAAA;QACjBoB,OAAA,EAASnC,eAAA,CAAgBiC,MAAA,CAAME,OAAA,EAASL,QAAQ;MAAA;IAAA,CAClD;IACAM,kBAAA,EAAoB,SAAAA,mBAAA;MAAA,IAACH,MAAA,GAAA5B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAa,CAAC;MAAA,OAAA6B,aAAA,CAAAA,aAAA,KAC9BD,MAAA;QACHI,MAAA,EAAQ,CAACxB,MAAA;QACTE,EAAA,EAAAA;MAAA;IAAA;EAEJ;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}