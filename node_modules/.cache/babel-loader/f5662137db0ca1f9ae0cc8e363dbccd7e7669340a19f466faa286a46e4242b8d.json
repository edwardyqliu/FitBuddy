{"ast":null,"code":"'use client';\n\nimport { useCallbackRef } from \"./chunk-KA2477BY.mjs\";\n\n// src/use-timeout.ts\nimport { useEffect } from \"react\";\nfunction useTimeout(callback, delay) {\n  var fn = useCallbackRef(callback);\n  useEffect(function () {\n    if (delay == null) return void 0;\n    var timeoutId = null;\n    timeoutId = window.setTimeout(function () {\n      fn();\n    }, delay);\n    return function () {\n      if (timeoutId) {\n        window.clearTimeout(timeoutId);\n      }\n    };\n  }, [delay, fn]);\n}\nexport { useTimeout };","map":{"version":3,"names":["useEffect","useTimeout","callback","delay","fn","useCallbackRef","timeoutId","window","setTimeout","clearTimeout"],"sources":["/Users/eyliu/Desktop/FitBuddy/node_modules/@chakra-ui/hooks/src/use-timeout.ts"],"sourcesContent":["import { useEffect } from \"react\"\nimport { useCallbackRef } from \"./use-callback-ref\"\n\n/**\n * React hook that provides a declarative `setTimeout`\n *\n * @param callback the callback to run after specified delay\n * @param delay the delay (in ms)\n */\nexport function useTimeout(\n  callback: (...args: any[]) => void,\n  delay: number | null,\n) {\n  const fn = useCallbackRef(callback)\n\n  useEffect(() => {\n    if (delay == null) return undefined\n\n    let timeoutId: number | null = null\n\n    timeoutId = window.setTimeout(() => {\n      fn()\n    }, delay)\n\n    return () => {\n      if (timeoutId) {\n        window.clearTimeout(timeoutId)\n      }\n    }\n  }, [delay, fn])\n}\n"],"mappings":";;;;;AAAA,SAASA,SAAA,QAAiB;AASnB,SAASC,WACdC,QAAA,EACAC,KAAA,EACA;EACA,IAAMC,EAAA,GAAKC,cAAA,CAAeH,QAAQ;EAElCF,SAAA,CAAU,YAAM;IACd,IAAIG,KAAA,IAAS,MAAM,OAAO;IAE1B,IAAIG,SAAA,GAA2B;IAE/BA,SAAA,GAAYC,MAAA,CAAOC,UAAA,CAAW,YAAM;MAClCJ,EAAA,CAAG;IACL,GAAGD,KAAK;IAER,OAAO,YAAM;MACX,IAAIG,SAAA,EAAW;QACbC,MAAA,CAAOE,YAAA,CAAaH,SAAS;MAC/B;IACF;EACF,GAAG,CAACH,KAAA,EAAOC,EAAE,CAAC;AAChB"},"metadata":{},"sourceType":"module","externalDependencies":[]}