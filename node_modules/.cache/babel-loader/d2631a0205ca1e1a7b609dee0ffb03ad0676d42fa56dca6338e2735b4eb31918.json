{"ast":null,"code":"// src/index.ts\nimport { isDom } from \"@zag-js/dom-query\";\nvar hasSetup = false;\nvar modality = null;\nvar hasEventBeforeFocus = false;\nvar hasBlurredWindowRecently = false;\nvar handlers = /* @__PURE__ */new Set();\nfunction trigger(modality2, event) {\n  handlers.forEach(function (handler) {\n    return handler(modality2, event);\n  });\n}\nvar isMac = typeof window !== \"undefined\" && window.navigator != null ? /^Mac/.test(window.navigator.platform) : false;\nfunction isValidKey(e) {\n  return !(e.metaKey || !isMac && e.altKey || e.ctrlKey || e.key === \"Control\" || e.key === \"Shift\" || e.key === \"Meta\");\n}\nfunction onKeyboardEvent(event) {\n  hasEventBeforeFocus = true;\n  if (isValidKey(event)) {\n    modality = \"keyboard\";\n    trigger(\"keyboard\", event);\n  }\n}\nfunction onPointerEvent(event) {\n  modality = \"pointer\";\n  if (event.type === \"mousedown\" || event.type === \"pointerdown\") {\n    hasEventBeforeFocus = true;\n    var target = event.composedPath ? event.composedPath()[0] : event.target;\n    var matches = false;\n    try {\n      matches = target.matches(\":focus-visible\");\n    } catch (_unused) {}\n    if (matches) return;\n    trigger(\"pointer\", event);\n  }\n}\nfunction isVirtualClick(event) {\n  if (event.mozInputSource === 0 && event.isTrusted) return true;\n  return event.detail === 0 && !event.pointerType;\n}\nfunction onClickEvent(e) {\n  if (isVirtualClick(e)) {\n    hasEventBeforeFocus = true;\n    modality = \"virtual\";\n  }\n}\nfunction onWindowFocus(event) {\n  if (event.target === window || event.target === document) {\n    return;\n  }\n  if (!hasEventBeforeFocus && !hasBlurredWindowRecently) {\n    modality = \"virtual\";\n    trigger(\"virtual\", event);\n  }\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = false;\n}\nfunction onWindowBlur() {\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = true;\n}\nfunction isFocusVisible() {\n  return modality !== \"pointer\";\n}\nfunction setupGlobalFocusEvents() {\n  if (!isDom() || hasSetup) {\n    return;\n  }\n  var focus = HTMLElement.prototype.focus;\n  HTMLElement.prototype.focus = function focusElement() {\n    hasEventBeforeFocus = true;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    focus.apply(this, args);\n  };\n  document.addEventListener(\"keydown\", onKeyboardEvent, true);\n  document.addEventListener(\"keyup\", onKeyboardEvent, true);\n  document.addEventListener(\"click\", onClickEvent, true);\n  window.addEventListener(\"focus\", onWindowFocus, true);\n  window.addEventListener(\"blur\", onWindowBlur, false);\n  if (typeof PointerEvent !== \"undefined\") {\n    document.addEventListener(\"pointerdown\", onPointerEvent, true);\n    document.addEventListener(\"pointermove\", onPointerEvent, true);\n    document.addEventListener(\"pointerup\", onPointerEvent, true);\n  } else {\n    document.addEventListener(\"mousedown\", onPointerEvent, true);\n    document.addEventListener(\"mousemove\", onPointerEvent, true);\n    document.addEventListener(\"mouseup\", onPointerEvent, true);\n  }\n  hasSetup = true;\n}\nfunction trackFocusVisible(fn) {\n  setupGlobalFocusEvents();\n  fn(isFocusVisible());\n  var handler = function handler() {\n    return fn(isFocusVisible());\n  };\n  handlers.add(handler);\n  return function () {\n    handlers.delete(handler);\n  };\n}\nfunction trackInteractionModality(fn) {\n  setupGlobalFocusEvents();\n  fn(modality);\n  var handler = function handler() {\n    return fn(modality);\n  };\n  handlers.add(handler);\n  return function () {\n    handlers.delete(handler);\n  };\n}\nfunction setInteractionModality(value) {\n  modality = value;\n  trigger(value, null);\n}\nfunction getInteractionModality() {\n  return modality;\n}\nexport { getInteractionModality, setInteractionModality, trackFocusVisible, trackInteractionModality };","map":{"version":3,"names":["isDom","hasSetup","modality","hasEventBeforeFocus","hasBlurredWindowRecently","handlers","Set","trigger","modality2","event","forEach","handler","isMac","window","navigator","test","platform","isValidKey","e","metaKey","altKey","ctrlKey","key","onKeyboardEvent","onPointerEvent","type","target","composedPath","matches","_unused","isVirtualClick","mozInputSource","isTrusted","detail","pointerType","onClickEvent","onWindowFocus","document","onWindowBlur","isFocusVisible","setupGlobalFocusEvents","focus","HTMLElement","prototype","focusElement","_len","arguments","length","args","Array","_key","apply","addEventListener","PointerEvent","trackFocusVisible","fn","add","delete","trackInteractionModality","setInteractionModality","value","getInteractionModality"],"sources":["/Users/eyliu/Desktop/FitBuddy/node_modules/@zag-js/focus-visible/src/index.ts"],"sourcesContent":["import { isDom } from \"@zag-js/dom-query\"\n\ntype Modality = \"keyboard\" | \"pointer\" | \"virtual\"\ntype HandlerEvent = PointerEvent | MouseEvent | KeyboardEvent | FocusEvent\ntype Handler = (modality: Modality, e: HandlerEvent | null) => void\ntype FocusVisibleCallback = (isFocusVisible: boolean) => void\n\nlet hasSetup = false\nlet modality: Modality | null = null\nlet hasEventBeforeFocus = false\nlet hasBlurredWindowRecently = false\n\nconst handlers = new Set<Handler>()\n\nfunction trigger(modality: Modality, event: HandlerEvent | null) {\n  handlers.forEach((handler) => handler(modality, event))\n}\n\nconst isMac = typeof window !== \"undefined\" && window.navigator != null ? /^Mac/.test(window.navigator.platform) : false\n\nfunction isValidKey(e: KeyboardEvent) {\n  return !(\n    e.metaKey ||\n    (!isMac && e.altKey) ||\n    e.ctrlKey ||\n    e.key === \"Control\" ||\n    e.key === \"Shift\" ||\n    e.key === \"Meta\"\n  )\n}\n\nfunction onKeyboardEvent(event: KeyboardEvent) {\n  hasEventBeforeFocus = true\n  if (isValidKey(event)) {\n    modality = \"keyboard\"\n    trigger(\"keyboard\", event)\n  }\n}\n\nfunction onPointerEvent(event: PointerEvent | MouseEvent) {\n  modality = \"pointer\"\n\n  if (event.type === \"mousedown\" || event.type === \"pointerdown\") {\n    hasEventBeforeFocus = true\n    const target = event.composedPath ? event.composedPath()[0] : event.target\n\n    let matches = false\n    try {\n      matches = (target as any).matches(\":focus-visible\")\n    } catch {}\n\n    if (matches) return\n    trigger(\"pointer\", event)\n  }\n}\n\nfunction isVirtualClick(event: MouseEvent | PointerEvent): boolean {\n  // JAWS/NVDA with Firefox.\n  if ((event as any).mozInputSource === 0 && event.isTrusted) return true\n  return event.detail === 0 && !(event as PointerEvent).pointerType\n}\n\nfunction onClickEvent(e: MouseEvent) {\n  if (isVirtualClick(e)) {\n    hasEventBeforeFocus = true\n    modality = \"virtual\"\n  }\n}\n\nfunction onWindowFocus(event: FocusEvent) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (event.target === window || event.target === document) {\n    return\n  }\n\n  // If a focus event occurs without a preceding keyboard or pointer event, switch to keyboard modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n  if (!hasEventBeforeFocus && !hasBlurredWindowRecently) {\n    modality = \"virtual\"\n    trigger(\"virtual\", event)\n  }\n\n  hasEventBeforeFocus = false\n  hasBlurredWindowRecently = false\n}\n\nfunction onWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  hasEventBeforeFocus = false\n  hasBlurredWindowRecently = true\n}\n\nfunction isFocusVisible() {\n  return modality !== \"pointer\"\n}\n\nfunction setupGlobalFocusEvents() {\n  if (!isDom() || hasSetup) {\n    return\n  }\n\n  // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n  const { focus } = HTMLElement.prototype\n  HTMLElement.prototype.focus = function focusElement(...args) {\n    hasEventBeforeFocus = true\n    focus.apply(this, args)\n  }\n\n  document.addEventListener(\"keydown\", onKeyboardEvent, true)\n  document.addEventListener(\"keyup\", onKeyboardEvent, true)\n  document.addEventListener(\"click\", onClickEvent, true)\n\n  // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n  window.addEventListener(\"focus\", onWindowFocus, true)\n  window.addEventListener(\"blur\", onWindowBlur, false)\n\n  if (typeof PointerEvent !== \"undefined\") {\n    document.addEventListener(\"pointerdown\", onPointerEvent, true)\n    document.addEventListener(\"pointermove\", onPointerEvent, true)\n    document.addEventListener(\"pointerup\", onPointerEvent, true)\n  } else {\n    document.addEventListener(\"mousedown\", onPointerEvent, true)\n    document.addEventListener(\"mousemove\", onPointerEvent, true)\n    document.addEventListener(\"mouseup\", onPointerEvent, true)\n  }\n\n  hasSetup = true\n}\n\nexport function trackFocusVisible(fn: FocusVisibleCallback) {\n  setupGlobalFocusEvents()\n\n  fn(isFocusVisible())\n  const handler = () => fn(isFocusVisible())\n\n  handlers.add(handler)\n  return () => {\n    handlers.delete(handler)\n  }\n}\n\nexport function trackInteractionModality(fn: (value: Modality | null) => void) {\n  setupGlobalFocusEvents()\n\n  fn(modality)\n  const handler = () => fn(modality)\n\n  handlers.add(handler)\n  return () => {\n    handlers.delete(handler)\n  }\n}\n\nexport function setInteractionModality(value: Modality) {\n  modality = value\n  trigger(value, null)\n}\n\nexport function getInteractionModality() {\n  return modality\n}\n"],"mappings":";AAAA,SAASA,KAAA,QAAa;AAOtB,IAAIC,QAAA,GAAW;AACf,IAAIC,QAAA,GAA4B;AAChC,IAAIC,mBAAA,GAAsB;AAC1B,IAAIC,wBAAA,GAA2B;AAE/B,IAAMC,QAAA,GAAW,mBAAIC,GAAA,CAAa;AAElC,SAASC,QAAQC,SAAA,EAAoBC,KAAA,EAA4B;EAC/DJ,QAAA,CAASK,OAAA,CAAQ,UAACC,OAAA;IAAA,OAAYA,OAAA,CAAQH,SAAA,EAAUC,KAAK,CAAC;EAAA;AACxD;AAEA,IAAMG,KAAA,GAAQ,OAAOC,MAAA,KAAW,eAAeA,MAAA,CAAOC,SAAA,IAAa,OAAO,OAAOC,IAAA,CAAKF,MAAA,CAAOC,SAAA,CAAUE,QAAQ,IAAI;AAEnH,SAASC,WAAWC,CAAA,EAAkB;EACpC,OAAO,EACLA,CAAA,CAAEC,OAAA,IACD,CAACP,KAAA,IAASM,CAAA,CAAEE,MAAA,IACbF,CAAA,CAAEG,OAAA,IACFH,CAAA,CAAEI,GAAA,KAAQ,aACVJ,CAAA,CAAEI,GAAA,KAAQ,WACVJ,CAAA,CAAEI,GAAA,KAAQ;AAEd;AAEA,SAASC,gBAAgBd,KAAA,EAAsB;EAC7CN,mBAAA,GAAsB;EACtB,IAAIc,UAAA,CAAWR,KAAK,GAAG;IACrBP,QAAA,GAAW;IACXK,OAAA,CAAQ,YAAYE,KAAK;EAC3B;AACF;AAEA,SAASe,eAAef,KAAA,EAAkC;EACxDP,QAAA,GAAW;EAEX,IAAIO,KAAA,CAAMgB,IAAA,KAAS,eAAehB,KAAA,CAAMgB,IAAA,KAAS,eAAe;IAC9DtB,mBAAA,GAAsB;IACtB,IAAMuB,MAAA,GAASjB,KAAA,CAAMkB,YAAA,GAAelB,KAAA,CAAMkB,YAAA,CAAa,EAAE,CAAC,IAAIlB,KAAA,CAAMiB,MAAA;IAEpE,IAAIE,OAAA,GAAU;IACd,IAAI;MACFA,OAAA,GAAWF,MAAA,CAAeE,OAAA,CAAQ,gBAAgB;IACpD,SAAAC,OAAA,EAAQ,CAAC;IAET,IAAID,OAAA,EAAS;IACbrB,OAAA,CAAQ,WAAWE,KAAK;EAC1B;AACF;AAEA,SAASqB,eAAerB,KAAA,EAA2C;EAEjE,IAAKA,KAAA,CAAcsB,cAAA,KAAmB,KAAKtB,KAAA,CAAMuB,SAAA,EAAW,OAAO;EACnE,OAAOvB,KAAA,CAAMwB,MAAA,KAAW,KAAK,CAAExB,KAAA,CAAuByB,WAAA;AACxD;AAEA,SAASC,aAAajB,CAAA,EAAe;EACnC,IAAIY,cAAA,CAAeZ,CAAC,GAAG;IACrBf,mBAAA,GAAsB;IACtBD,QAAA,GAAW;EACb;AACF;AAEA,SAASkC,cAAc3B,KAAA,EAAmB;EAIxC,IAAIA,KAAA,CAAMiB,MAAA,KAAWb,MAAA,IAAUJ,KAAA,CAAMiB,MAAA,KAAWW,QAAA,EAAU;IACxD;EACF;EAIA,IAAI,CAAClC,mBAAA,IAAuB,CAACC,wBAAA,EAA0B;IACrDF,QAAA,GAAW;IACXK,OAAA,CAAQ,WAAWE,KAAK;EAC1B;EAEAN,mBAAA,GAAsB;EACtBC,wBAAA,GAA2B;AAC7B;AAEA,SAASkC,aAAA,EAAe;EAGtBnC,mBAAA,GAAsB;EACtBC,wBAAA,GAA2B;AAC7B;AAEA,SAASmC,eAAA,EAAiB;EACxB,OAAOrC,QAAA,KAAa;AACtB;AAEA,SAASsC,uBAAA,EAAyB;EAChC,IAAI,CAACxC,KAAA,CAAM,KAAKC,QAAA,EAAU;IACxB;EACF;EAMA,IAAQwC,KAAA,GAAUC,WAAA,CAAYC,SAAA,CAAtBF,KAAA;EACRC,WAAA,CAAYC,SAAA,CAAUF,KAAA,GAAQ,SAASG,aAAA,EAAsB;IAC3DzC,mBAAA,GAAsB;IAAA,SAAA0C,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAD+BC,IAAA,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAAF,IAAA,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;IAAA;IAErDT,KAAA,CAAMU,KAAA,CAAM,MAAMH,IAAI;EACxB;EAEAX,QAAA,CAASe,gBAAA,CAAiB,WAAW7B,eAAA,EAAiB,IAAI;EAC1Dc,QAAA,CAASe,gBAAA,CAAiB,SAAS7B,eAAA,EAAiB,IAAI;EACxDc,QAAA,CAASe,gBAAA,CAAiB,SAASjB,YAAA,EAAc,IAAI;EAIrDtB,MAAA,CAAOuC,gBAAA,CAAiB,SAAShB,aAAA,EAAe,IAAI;EACpDvB,MAAA,CAAOuC,gBAAA,CAAiB,QAAQd,YAAA,EAAc,KAAK;EAEnD,IAAI,OAAOe,YAAA,KAAiB,aAAa;IACvChB,QAAA,CAASe,gBAAA,CAAiB,eAAe5B,cAAA,EAAgB,IAAI;IAC7Da,QAAA,CAASe,gBAAA,CAAiB,eAAe5B,cAAA,EAAgB,IAAI;IAC7Da,QAAA,CAASe,gBAAA,CAAiB,aAAa5B,cAAA,EAAgB,IAAI;EAC7D,OAAO;IACLa,QAAA,CAASe,gBAAA,CAAiB,aAAa5B,cAAA,EAAgB,IAAI;IAC3Da,QAAA,CAASe,gBAAA,CAAiB,aAAa5B,cAAA,EAAgB,IAAI;IAC3Da,QAAA,CAASe,gBAAA,CAAiB,WAAW5B,cAAA,EAAgB,IAAI;EAC3D;EAEAvB,QAAA,GAAW;AACb;AAEO,SAASqD,kBAAkBC,EAAA,EAA0B;EAC1Df,sBAAA,CAAuB;EAEvBe,EAAA,CAAGhB,cAAA,CAAe,CAAC;EACnB,IAAM5B,OAAA,GAAU,SAAVA,QAAA;IAAA,OAAgB4C,EAAA,CAAGhB,cAAA,CAAe,CAAC;EAAA;EAEzClC,QAAA,CAASmD,GAAA,CAAI7C,OAAO;EACpB,OAAO,YAAM;IACXN,QAAA,CAASoD,MAAA,CAAO9C,OAAO;EACzB;AACF;AAEO,SAAS+C,yBAAyBH,EAAA,EAAsC;EAC7Ef,sBAAA,CAAuB;EAEvBe,EAAA,CAAGrD,QAAQ;EACX,IAAMS,OAAA,GAAU,SAAVA,QAAA;IAAA,OAAgB4C,EAAA,CAAGrD,QAAQ;EAAA;EAEjCG,QAAA,CAASmD,GAAA,CAAI7C,OAAO;EACpB,OAAO,YAAM;IACXN,QAAA,CAASoD,MAAA,CAAO9C,OAAO;EACzB;AACF;AAEO,SAASgD,uBAAuBC,KAAA,EAAiB;EACtD1D,QAAA,GAAW0D,KAAA;EACXrD,OAAA,CAAQqD,KAAA,EAAO,IAAI;AACrB;AAEO,SAASC,uBAAA,EAAyB;EACvC,OAAO3D,QAAA;AACT"},"metadata":{},"sourceType":"module","externalDependencies":[]}