{"ast":null,"code":"'use client';\n\nimport _toConsumableArray from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { styled } from \"./chunk-5PL47M24.mjs\";\n\n// src/factory.ts\nfunction factory() {\n  var cache = /* @__PURE__ */new Map();\n  return new Proxy(styled, {\n    /**\n     * @example\n     * const Div = chakra(\"div\")\n     * const WithChakra = chakra(AnotherComponent)\n     */\n    apply: function apply(target, thisArg, argArray) {\n      return styled.apply(void 0, _toConsumableArray(argArray));\n    },\n    /**\n     * @example\n     * <chakra.div />\n     */\n    get: function get(_, element) {\n      if (!cache.has(element)) {\n        cache.set(element, styled(element));\n      }\n      return cache.get(element);\n    }\n  });\n}\nvar chakra = factory();\nexport { chakra };","map":{"version":3,"names":["factory","cache","Map","Proxy","styled","apply","target","thisArg","argArray","_toConsumableArray","get","_","element","has","set","chakra"],"sources":["/Users/eyliu/Desktop/FitBuddy/node_modules/@chakra-ui/system/src/factory.ts"],"sourcesContent":["import { DOMElements } from \"./system.utils\"\nimport { ChakraStyledOptions, HTMLChakraComponents, styled } from \"./system\"\nimport { As, ChakraComponent } from \"./system.types\"\n\ntype ChakraFactory = {\n  <T extends As, P extends object = {}>(\n    component: T,\n    options?: ChakraStyledOptions,\n  ): ChakraComponent<T, P>\n}\n\nfunction factory() {\n  const cache = new Map<DOMElements, ChakraComponent<DOMElements>>()\n\n  return new Proxy(styled, {\n    /**\n     * @example\n     * const Div = chakra(\"div\")\n     * const WithChakra = chakra(AnotherComponent)\n     */\n    apply(target, thisArg, argArray: [DOMElements, ChakraStyledOptions]) {\n      return styled(...argArray)\n    },\n    /**\n     * @example\n     * <chakra.div />\n     */\n    get(_, element: DOMElements) {\n      if (!cache.has(element)) {\n        cache.set(element, styled(element))\n      }\n      return cache.get(element)\n    },\n  }) as ChakraFactory & HTMLChakraComponents\n}\n/**\n * The Chakra factory serves as an object of chakra enabled JSX elements,\n * and also a function that can be used to enable custom component receive chakra's style props.\n *\n * @see Docs https://chakra-ui.com/docs/styled-system/chakra-factory\n */\nexport const chakra = factory()\n"],"mappings":";;;;;;AAWA,SAASA,QAAA,EAAU;EACjB,IAAMC,KAAA,GAAQ,mBAAIC,GAAA,CAA+C;EAEjE,OAAO,IAAIC,KAAA,CAAMC,MAAA,EAAQ;IAAA;AAAA;AAAA;AAAA;AAAA;IAMvBC,KAAA,WAAAA,MAAMC,MAAA,EAAQC,OAAA,EAASC,QAAA,EAA8C;MACnE,OAAOJ,MAAA,CAAAC,KAAA,SAAAI,kBAAA,CAAUD,QAAQ;IAC3B;IAAA;AAAA;AAAA;AAAA;IAKAE,GAAA,WAAAA,IAAIC,CAAA,EAAGC,OAAA,EAAsB;MAC3B,IAAI,CAACX,KAAA,CAAMY,GAAA,CAAID,OAAO,GAAG;QACvBX,KAAA,CAAMa,GAAA,CAAIF,OAAA,EAASR,MAAA,CAAOQ,OAAO,CAAC;MACpC;MACA,OAAOX,KAAA,CAAMS,GAAA,CAAIE,OAAO;IAC1B;EACF,CAAC;AACH;AAOO,IAAMG,MAAA,GAASf,OAAA,CAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}