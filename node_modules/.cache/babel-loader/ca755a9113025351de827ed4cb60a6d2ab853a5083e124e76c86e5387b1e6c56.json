{"ast":null,"code":"'use client';\n\n// src/use-pin-input.ts\nimport _objectSpread from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _toConsumableArray from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _excluded = [\"index\"];\nimport { createDescendantContext } from \"@chakra-ui/descendant\";\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\";\nimport { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\";\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { useCallback, useEffect, useState, useId } from \"react\";\nvar _createDescendantCont = createDescendantContext(),\n  _createDescendantCont2 = _slicedToArray(_createDescendantCont, 4),\n  PinInputDescendantsProvider = _createDescendantCont2[0],\n  usePinInputDescendantsContext = _createDescendantCont2[1],\n  usePinInputDescendants = _createDescendantCont2[2],\n  usePinInputDescendant = _createDescendantCont2[3];\nvar _createContext = createContext({\n    name: \"PinInputContext\",\n    errorMessage: \"usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`\"\n  }),\n  _createContext2 = _slicedToArray(_createContext, 2),\n  PinInputProvider = _createContext2[0],\n  usePinInputContext = _createContext2[1];\nvar toArray = function toArray(value) {\n  return value == null ? void 0 : value.split(\"\");\n};\nfunction validate(value, type) {\n  var NUMERIC_REGEX = /^[0-9]+$/;\n  var ALPHA_NUMERIC_REGEX = /^[a-zA-Z0-9]+$/i;\n  var regex = type === \"alphanumeric\" ? ALPHA_NUMERIC_REGEX : NUMERIC_REGEX;\n  return regex.test(value);\n}\nfunction usePinInput() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var autoFocus = props.autoFocus,\n    value = props.value,\n    defaultValue = props.defaultValue,\n    _onChange = props.onChange,\n    onComplete = props.onComplete,\n    _props$placeholder = props.placeholder,\n    placeholder = _props$placeholder === void 0 ? \"\\u25CB\" : _props$placeholder,\n    _props$manageFocus = props.manageFocus,\n    manageFocus = _props$manageFocus === void 0 ? true : _props$manageFocus,\n    _props$otp = props.otp,\n    otp = _props$otp === void 0 ? false : _props$otp,\n    idProp = props.id,\n    isDisabled = props.isDisabled,\n    isInvalid = props.isInvalid,\n    _props$type = props.type,\n    type = _props$type === void 0 ? \"number\" : _props$type,\n    mask = props.mask;\n  var uuid = useId();\n  var id = idProp != null ? idProp : \"pin-input-\".concat(uuid);\n  var descendants = usePinInputDescendants();\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    moveFocus = _useState2[0],\n    setMoveFocus = _useState2[1];\n  var _useState3 = useState(-1),\n    _useState4 = _slicedToArray(_useState3, 2),\n    focusedIndex = _useState4[0],\n    setFocusedIndex = _useState4[1];\n  var _useControllableState = useControllableState({\n      defaultValue: toArray(defaultValue) || [],\n      value: toArray(value),\n      onChange: function onChange(values2) {\n        return _onChange == null ? void 0 : _onChange(values2.join(\"\"));\n      }\n    }),\n    _useControllableState2 = _slicedToArray(_useControllableState, 2),\n    values = _useControllableState2[0],\n    setValues = _useControllableState2[1];\n  useEffect(function () {\n    if (autoFocus) {\n      var first = descendants.first();\n      if (first) {\n        requestAnimationFrame(function () {\n          first.node.focus();\n        });\n      }\n    }\n  }, [descendants]);\n  var focusNext = useCallback(function (index) {\n    if (!moveFocus || !manageFocus) return;\n    var next = descendants.next(index, false);\n    if (next) {\n      requestAnimationFrame(function () {\n        next.node.focus();\n      });\n    }\n  }, [descendants, moveFocus, manageFocus]);\n  var setValue = useCallback(function (value2, index) {\n    var handleFocus = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var nextValues = _toConsumableArray(values);\n    nextValues[index] = value2;\n    setValues(nextValues);\n    var isComplete = value2 !== \"\" && nextValues.length === descendants.count() && nextValues.every(function (inputValue) {\n      return inputValue != null && inputValue !== \"\";\n    });\n    if (isComplete) {\n      onComplete == null ? void 0 : onComplete(nextValues.join(\"\"));\n    } else {\n      if (handleFocus) focusNext(index);\n    }\n  }, [values, setValues, focusNext, onComplete, descendants]);\n  var clear = useCallback(function () {\n    var _a;\n    var values2 = Array(descendants.count()).fill(\"\");\n    setValues(values2);\n    var first = descendants.first();\n    (_a = first == null ? void 0 : first.node) == null ? void 0 : _a.focus();\n  }, [descendants, setValues]);\n  var getNextValue = useCallback(function (value2, eventValue) {\n    var nextValue = eventValue;\n    if ((value2 == null ? void 0 : value2.length) > 0) {\n      if (value2[0] === eventValue.charAt(0)) {\n        nextValue = eventValue.charAt(1);\n      } else if (value2[0] === eventValue.charAt(1)) {\n        nextValue = eventValue.charAt(0);\n      }\n    }\n    return nextValue;\n  }, []);\n  var getInputProps = useCallback(function (props2) {\n    var index = props2.index,\n      rest = _objectWithoutProperties(props2, _excluded);\n    var onChange2 = function onChange2(event) {\n      var eventValue = event.target.value;\n      var currentValue = values[index];\n      var nextValue = getNextValue(currentValue, eventValue);\n      if (nextValue === \"\") {\n        setValue(\"\", index);\n        return;\n      }\n      if (eventValue.length > 2) {\n        if (validate(eventValue, type)) {\n          var nextValue2 = eventValue.split(\"\").filter(function (_, index2) {\n            return index2 < descendants.count();\n          });\n          setValues(nextValue2);\n          if (nextValue2.length === descendants.count()) {\n            onComplete == null ? void 0 : onComplete(nextValue2.join(\"\"));\n          }\n        }\n      } else {\n        if (validate(nextValue, type)) {\n          setValue(nextValue, index);\n        }\n        setMoveFocus(true);\n      }\n    };\n    var onKeyDown = function onKeyDown(event) {\n      var _a;\n      if (event.key === \"Backspace\" && manageFocus) {\n        if (event.target.value === \"\") {\n          var prevInput = descendants.prev(index, false);\n          if (prevInput) {\n            setValue(\"\", index - 1, false);\n            (_a = prevInput.node) == null ? void 0 : _a.focus();\n            setMoveFocus(true);\n          }\n        } else {\n          setMoveFocus(false);\n        }\n      }\n    };\n    var onFocus = function onFocus() {\n      setFocusedIndex(index);\n    };\n    var onBlur = function onBlur() {\n      setFocusedIndex(-1);\n    };\n    var hasFocus = focusedIndex === index;\n    var inputType = type === \"number\" ? \"tel\" : \"text\";\n    return _objectSpread(_objectSpread({\n      \"aria-label\": \"Please enter your pin code\",\n      inputMode: type === \"number\" ? \"numeric\" : \"text\",\n      type: mask ? \"password\" : inputType\n    }, rest), {}, {\n      id: \"\".concat(id, \"-\").concat(index),\n      disabled: isDisabled,\n      \"aria-invalid\": ariaAttr(isInvalid),\n      onChange: callAllHandlers(rest.onChange, onChange2),\n      onKeyDown: callAllHandlers(rest.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(rest.onFocus, onFocus),\n      onBlur: callAllHandlers(rest.onBlur, onBlur),\n      value: values[index] || \"\",\n      autoComplete: otp ? \"one-time-code\" : \"off\",\n      placeholder: hasFocus ? \"\" : placeholder\n    });\n  }, [descendants, focusedIndex, getNextValue, id, isDisabled, mask, isInvalid, manageFocus, onComplete, otp, placeholder, setValue, setValues, type, values]);\n  return {\n    // prop getter\n    getInputProps: getInputProps,\n    // state\n    id: id,\n    descendants: descendants,\n    values: values,\n    // actions\n    setValue: setValue,\n    setValues: setValues,\n    clear: clear\n  };\n}\nfunction usePinInputField() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var _usePinInputContext = usePinInputContext(),\n    getInputProps = _usePinInputContext.getInputProps;\n  var _usePinInputDescendan = usePinInputDescendant(),\n    index = _usePinInputDescendan.index,\n    register = _usePinInputDescendan.register;\n  return getInputProps(_objectSpread(_objectSpread({}, props), {}, {\n    ref: mergeRefs(register, ref),\n    index: index\n  }));\n}\nexport { PinInputDescendantsProvider, usePinInputDescendantsContext, usePinInputDescendants, usePinInputDescendant, PinInputProvider, usePinInputContext, usePinInput, usePinInputField };","map":{"version":3,"names":["createDescendantContext","useControllableState","ariaAttr","callAllHandlers","createContext","mergeRefs","useCallback","useEffect","useState","useId","_createDescendantCont","_createDescendantCont2","_slicedToArray","PinInputDescendantsProvider","usePinInputDescendantsContext","usePinInputDescendants","usePinInputDescendant","_createContext","name","errorMessage","_createContext2","PinInputProvider","usePinInputContext","toArray","value","split","validate","type","NUMERIC_REGEX","ALPHA_NUMERIC_REGEX","regex","test","usePinInput","props","arguments","length","undefined","autoFocus","defaultValue","onChange","onComplete","_props$placeholder","placeholder","_props$manageFocus","manageFocus","_props$otp","otp","idProp","id","isDisabled","isInvalid","_props$type","mask","uuid","concat","descendants","_useState","_useState2","moveFocus","setMoveFocus","_useState3","_useState4","focusedIndex","setFocusedIndex","_useControllableState","values2","join","_useControllableState2","values","setValues","first","requestAnimationFrame","node","focus","focusNext","index","next","setValue","value2","handleFocus","nextValues","_toConsumableArray","isComplete","count","every","inputValue","clear","_a","Array","fill","getNextValue","eventValue","nextValue","charAt","getInputProps","props2","rest","_objectWithoutProperties","_excluded","onChange2","event","target","currentValue","nextValue2","filter","_","index2","onKeyDown","key","prevInput","prev","onFocus","onBlur","hasFocus","inputType","_objectSpread","inputMode","disabled","autoComplete","usePinInputField","ref","_usePinInputContext","_usePinInputDescendan","register"],"sources":["/Users/eyliu/Desktop/FitBuddy/node_modules/@chakra-ui/pin-input/src/use-pin-input.ts"],"sourcesContent":["import { createDescendantContext } from \"@chakra-ui/descendant\"\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\"\nimport { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { useCallback, useEffect, useState, useId } from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * Create context to track descendants and their indices\n * -----------------------------------------------------------------------------------------------*/\n\nexport const [\n  PinInputDescendantsProvider,\n  usePinInputDescendantsContext,\n  usePinInputDescendants,\n  usePinInputDescendant,\n] = createDescendantContext<HTMLInputElement>()\n\n/* -------------------------------------------------------------------------------------------------\n * Create context that stores pin-input logic\n * -----------------------------------------------------------------------------------------------*/\n\nexport type PinInputContext = Omit<UsePinInputReturn, \"descendants\"> & {\n  /**\n   * Sets the pin input component to the disabled state\n   */\n  isDisabled?: boolean\n  /**\n   * Sets the pin input component to the invalid state\n   */\n  isInvalid?: boolean\n}\n\nexport const [PinInputProvider, usePinInputContext] =\n  createContext<PinInputContext>({\n    name: \"PinInputContext\",\n    errorMessage:\n      \"usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`\",\n  })\n\n/* -------------------------------------------------------------------------------------------------\n * usePinInput hook\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UsePinInputProps {\n  /**\n   * If `true`, the pin input receives focus on mount\n   */\n  autoFocus?: boolean\n  /**\n   * The value of the pin input. This is the value\n   * that will be returned when the pin input is filled\n   */\n  value?: string\n  /**\n   * The default value of the pin input\n   */\n  defaultValue?: string\n  /**\n   * Function called on input change\n   */\n  onChange?: (value: string) => void\n  /**\n   * Function called when all inputs have valid values\n   */\n  onComplete?: (value: string) => void\n  /**\n   * The placeholder for the pin input\n   */\n  placeholder?: string\n  /**\n   * If `true`, focus will move automatically to the next input once filled\n   * @default true\n   */\n  manageFocus?: boolean\n  /**\n   * If `true`, the pin input component signals to its fields that they should\n   * use `autocomplete=\"one-time-code\"`.\n   */\n  otp?: boolean\n  /**\n   * The top-level id string that will be applied to the input fields.\n   * The index of the input will be appended to this top-level id.\n   *\n   * @example\n   * if id=\"foo\", the first input will have `foo-0`\n   */\n  id?: string\n  /**\n   * If `true`, the pin input component is put in the disabled state\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the pin input component is put in the invalid state\n   */\n  isInvalid?: boolean\n  /**\n   * The type of values the pin-input should allow\n   */\n  type?: \"alphanumeric\" | \"number\"\n  /**\n   * If `true`, the input's value will be masked just like `type=password`\n   */\n  mask?: boolean\n}\n\nconst toArray = (value?: string) => value?.split(\"\")\n\nfunction validate(value: string, type: UsePinInputProps[\"type\"]) {\n  const NUMERIC_REGEX = /^[0-9]+$/\n  const ALPHA_NUMERIC_REGEX = /^[a-zA-Z0-9]+$/i\n  const regex = type === \"alphanumeric\" ? ALPHA_NUMERIC_REGEX : NUMERIC_REGEX\n  return regex.test(value)\n}\n\n/* -------------------------------------------------------------------------------------------------\n * usePinInput - handles the general pin input logic\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal\n */\nexport function usePinInput(props: UsePinInputProps = {}) {\n  const {\n    autoFocus,\n    value,\n    defaultValue,\n    onChange,\n    onComplete,\n    placeholder = \"○\",\n    manageFocus = true,\n    otp = false,\n    id: idProp,\n    isDisabled,\n    isInvalid,\n    type = \"number\",\n    mask,\n  } = props\n\n  const uuid = useId()\n  const id = idProp ?? `pin-input-${uuid}`\n\n  const descendants = usePinInputDescendants()\n\n  const [moveFocus, setMoveFocus] = useState(true)\n  const [focusedIndex, setFocusedIndex] = useState(-1)\n\n  const [values, setValues] = useControllableState<string[]>({\n    defaultValue: toArray(defaultValue) || [],\n    value: toArray(value),\n    onChange: (values) => onChange?.(values.join(\"\")),\n  })\n\n  useEffect(() => {\n    if (autoFocus) {\n      const first = descendants.first()\n      if (first) {\n        requestAnimationFrame(() => {\n          first.node.focus()\n        })\n      }\n    }\n    // We don't want to listen for updates to `autoFocus` since it only runs initially\n    // eslint-disable-next-line\n  }, [descendants])\n\n  const focusNext = useCallback(\n    (index: number) => {\n      if (!moveFocus || !manageFocus) return\n      const next = descendants.next(index, false)\n      if (next) {\n        requestAnimationFrame(() => {\n          next.node.focus()\n        })\n      }\n    },\n    [descendants, moveFocus, manageFocus],\n  )\n\n  const setValue = useCallback(\n    (value: string, index: number, handleFocus: boolean = true) => {\n      const nextValues = [...values]\n      nextValues[index] = value\n      setValues(nextValues)\n\n      const isComplete =\n        value !== \"\" &&\n        nextValues.length === descendants.count() &&\n        nextValues.every(\n          (inputValue) => inputValue != null && inputValue !== \"\",\n        )\n\n      if (isComplete) {\n        onComplete?.(nextValues.join(\"\"))\n      } else {\n        if (handleFocus) focusNext(index)\n      }\n    },\n    [values, setValues, focusNext, onComplete, descendants],\n  )\n\n  const clear = useCallback(() => {\n    const values: string[] = Array(descendants.count()).fill(\"\")\n    setValues(values)\n    const first = descendants.first()\n    first?.node?.focus()\n  }, [descendants, setValues])\n\n  const getNextValue = useCallback((value: string, eventValue: string) => {\n    let nextValue = eventValue\n    if (value?.length > 0) {\n      if (value[0] === eventValue.charAt(0)) {\n        nextValue = eventValue.charAt(1)\n      } else if (value[0] === eventValue.charAt(1)) {\n        nextValue = eventValue.charAt(0)\n      }\n    }\n    return nextValue\n  }, [])\n\n  const getInputProps = useCallback(\n    (props: InputProps & { index: number }): InputProps => {\n      const { index, ...rest } = props\n\n      /**\n       * Improved from: https://github.com/uber/baseweb/blob/master/src/pin-code/pin-code.js\n       */\n      const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const eventValue = event.target.value\n        const currentValue = values[index]\n        const nextValue = getNextValue(currentValue, eventValue)\n\n        // if the value was removed using backspace\n        if (nextValue === \"\") {\n          setValue(\"\", index)\n          return\n        }\n\n        // in the case of an autocomplete or copy and paste\n        if (eventValue.length > 2) {\n          // see if we can use the string to fill out our values\n          if (validate(eventValue, type)) {\n            // Ensure the value matches the number of inputs\n            const nextValue = eventValue\n              .split(\"\")\n              .filter((_, index) => index < descendants.count())\n\n            setValues(nextValue)\n\n            // if pasting fills the entire input fields, trigger `onComplete`\n            if (nextValue.length === descendants.count()) {\n              onComplete?.(nextValue.join(\"\"))\n            }\n          }\n        } else {\n          // only set if the new value is a number\n          if (validate(nextValue, type)) {\n            setValue(nextValue, index)\n          }\n\n          setMoveFocus(true)\n        }\n      }\n\n      const onKeyDown = (event: React.KeyboardEvent) => {\n        if (event.key === \"Backspace\" && manageFocus) {\n          if ((event.target as HTMLInputElement).value === \"\") {\n            const prevInput = descendants.prev(index, false)\n            if (prevInput) {\n              setValue(\"\", index - 1, false)\n              prevInput.node?.focus()\n              setMoveFocus(true)\n            }\n          } else {\n            setMoveFocus(false)\n          }\n        }\n      }\n\n      const onFocus = () => {\n        setFocusedIndex(index)\n      }\n\n      const onBlur = () => {\n        setFocusedIndex(-1)\n      }\n\n      const hasFocus = focusedIndex === index\n      const inputType = type === \"number\" ? \"tel\" : \"text\"\n\n      return {\n        \"aria-label\": \"Please enter your pin code\",\n        inputMode: type === \"number\" ? \"numeric\" : \"text\",\n        type: mask ? \"password\" : inputType,\n        ...rest,\n        id: `${id}-${index}`,\n        disabled: isDisabled,\n        \"aria-invalid\": ariaAttr(isInvalid),\n        onChange: callAllHandlers(rest.onChange, onChange),\n        onKeyDown: callAllHandlers(rest.onKeyDown, onKeyDown),\n        onFocus: callAllHandlers(rest.onFocus, onFocus),\n        onBlur: callAllHandlers(rest.onBlur, onBlur),\n        value: values[index] || \"\",\n        autoComplete: otp ? \"one-time-code\" : \"off\",\n        placeholder: hasFocus ? \"\" : placeholder,\n      }\n    },\n    [\n      descendants,\n      focusedIndex,\n      getNextValue,\n      id,\n      isDisabled,\n      mask,\n      isInvalid,\n      manageFocus,\n      onComplete,\n      otp,\n      placeholder,\n      setValue,\n      setValues,\n      type,\n      values,\n    ],\n  )\n\n  return {\n    // prop getter\n    getInputProps,\n    // state\n    id,\n    descendants,\n    values,\n    // actions\n    setValue,\n    setValues,\n    clear,\n  }\n}\n\nexport type UsePinInputReturn = ReturnType<typeof usePinInput>\n\nexport interface UsePinInputFieldProps extends InputProps {\n  ref?: React.Ref<HTMLInputElement>\n}\n\n/**\n * @internal\n */\nexport function usePinInputField(\n  props: UsePinInputFieldProps = {},\n  ref: React.Ref<any> = null,\n) {\n  const { getInputProps } = usePinInputContext()\n  const { index, register } = usePinInputDescendant()\n\n  return getInputProps({\n    ...props,\n    ref: mergeRefs(register, ref),\n    index,\n  })\n}\n\ninterface InputProps\n  extends Omit<\n    React.ComponentPropsWithRef<\"input\">,\n    \"color\" | \"height\" | \"width\"\n  > {}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}