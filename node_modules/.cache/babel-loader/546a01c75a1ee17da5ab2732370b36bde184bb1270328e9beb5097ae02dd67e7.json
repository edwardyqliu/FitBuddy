{"ast":null,"code":"function createRenderStep(runNextFrame) {\n  var toRun = [];\n  var toRunNextFrame = [];\n  var numToRun = 0;\n  var isProcessing = false;\n  var flushNextFrame = false;\n  var toKeepAlive = new WeakSet();\n  var step = {\n    schedule: function schedule(callback) {\n      var keepAlive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var immediate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var addToCurrentFrame = immediate && isProcessing;\n      var buffer = addToCurrentFrame ? toRun : toRunNextFrame;\n      if (keepAlive) toKeepAlive.add(callback);\n      if (buffer.indexOf(callback) === -1) {\n        buffer.push(callback);\n        if (addToCurrentFrame && isProcessing) numToRun = toRun.length;\n      }\n      return callback;\n    },\n    cancel: function cancel(callback) {\n      var index = toRunNextFrame.indexOf(callback);\n      if (index !== -1) toRunNextFrame.splice(index, 1);\n      toKeepAlive.delete(callback);\n    },\n    process: function process(frameData) {\n      if (isProcessing) {\n        flushNextFrame = true;\n        return;\n      }\n      isProcessing = true;\n      var _ref = [toRunNextFrame, toRun];\n      toRun = _ref[0];\n      toRunNextFrame = _ref[1];\n      toRunNextFrame.length = 0;\n      numToRun = toRun.length;\n      if (numToRun) {\n        for (var i = 0; i < numToRun; i++) {\n          var callback = toRun[i];\n          callback(frameData);\n          if (toKeepAlive.has(callback)) {\n            step.schedule(callback);\n            runNextFrame();\n          }\n        }\n      }\n      isProcessing = false;\n      if (flushNextFrame) {\n        flushNextFrame = false;\n        step.process(frameData);\n      }\n    }\n  };\n  return step;\n}\nexport { createRenderStep };","map":{"version":3,"names":["createRenderStep","runNextFrame","toRun","toRunNextFrame","numToRun","isProcessing","flushNextFrame","toKeepAlive","WeakSet","step","schedule","callback","keepAlive","arguments","length","undefined","immediate","addToCurrentFrame","buffer","add","indexOf","push","cancel","index","splice","delete","process","frameData","_ref","i","has"],"sources":["/Users/eyliu/Desktop/FitBuddy/node_modules/framesync/dist/es/create-render-step.mjs"],"sourcesContent":["function createRenderStep(runNextFrame) {\n    let toRun = [];\n    let toRunNextFrame = [];\n    let numToRun = 0;\n    let isProcessing = false;\n    let flushNextFrame = false;\n    const toKeepAlive = new WeakSet();\n    const step = {\n        schedule: (callback, keepAlive = false, immediate = false) => {\n            const addToCurrentFrame = immediate && isProcessing;\n            const buffer = addToCurrentFrame ? toRun : toRunNextFrame;\n            if (keepAlive)\n                toKeepAlive.add(callback);\n            if (buffer.indexOf(callback) === -1) {\n                buffer.push(callback);\n                if (addToCurrentFrame && isProcessing)\n                    numToRun = toRun.length;\n            }\n            return callback;\n        },\n        cancel: (callback) => {\n            const index = toRunNextFrame.indexOf(callback);\n            if (index !== -1)\n                toRunNextFrame.splice(index, 1);\n            toKeepAlive.delete(callback);\n        },\n        process: (frameData) => {\n            if (isProcessing) {\n                flushNextFrame = true;\n                return;\n            }\n            isProcessing = true;\n            [toRun, toRunNextFrame] = [toRunNextFrame, toRun];\n            toRunNextFrame.length = 0;\n            numToRun = toRun.length;\n            if (numToRun) {\n                for (let i = 0; i < numToRun; i++) {\n                    const callback = toRun[i];\n                    callback(frameData);\n                    if (toKeepAlive.has(callback)) {\n                        step.schedule(callback);\n                        runNextFrame();\n                    }\n                }\n            }\n            isProcessing = false;\n            if (flushNextFrame) {\n                flushNextFrame = false;\n                step.process(frameData);\n            }\n        },\n    };\n    return step;\n}\n\nexport { createRenderStep };\n"],"mappings":"AAAA,SAASA,gBAAgBA,CAACC,YAAY,EAAE;EACpC,IAAIC,KAAK,GAAG,EAAE;EACd,IAAIC,cAAc,GAAG,EAAE;EACvB,IAAIC,QAAQ,GAAG,CAAC;EAChB,IAAIC,YAAY,GAAG,KAAK;EACxB,IAAIC,cAAc,GAAG,KAAK;EAC1B,IAAMC,WAAW,GAAG,IAAIC,OAAO,CAAC,CAAC;EACjC,IAAMC,IAAI,GAAG;IACTC,QAAQ,EAAE,SAAAA,SAACC,QAAQ,EAA2C;MAAA,IAAzCC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;MAAA,IAAEG,SAAS,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;MACrD,IAAMI,iBAAiB,GAAGD,SAAS,IAAIX,YAAY;MACnD,IAAMa,MAAM,GAAGD,iBAAiB,GAAGf,KAAK,GAAGC,cAAc;MACzD,IAAIS,SAAS,EACTL,WAAW,CAACY,GAAG,CAACR,QAAQ,CAAC;MAC7B,IAAIO,MAAM,CAACE,OAAO,CAACT,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;QACjCO,MAAM,CAACG,IAAI,CAACV,QAAQ,CAAC;QACrB,IAAIM,iBAAiB,IAAIZ,YAAY,EACjCD,QAAQ,GAAGF,KAAK,CAACY,MAAM;MAC/B;MACA,OAAOH,QAAQ;IACnB,CAAC;IACDW,MAAM,EAAE,SAAAA,OAACX,QAAQ,EAAK;MAClB,IAAMY,KAAK,GAAGpB,cAAc,CAACiB,OAAO,CAACT,QAAQ,CAAC;MAC9C,IAAIY,KAAK,KAAK,CAAC,CAAC,EACZpB,cAAc,CAACqB,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC;MACnChB,WAAW,CAACkB,MAAM,CAACd,QAAQ,CAAC;IAChC,CAAC;IACDe,OAAO,EAAE,SAAAA,QAACC,SAAS,EAAK;MACpB,IAAItB,YAAY,EAAE;QACdC,cAAc,GAAG,IAAI;QACrB;MACJ;MACAD,YAAY,GAAG,IAAI;MAAC,IAAAuB,IAAA,GACM,CAACzB,cAAc,EAAED,KAAK,CAAC;MAAhDA,KAAK,GAAA0B,IAAA;MAAEzB,cAAc,GAAAyB,IAAA;MACtBzB,cAAc,CAACW,MAAM,GAAG,CAAC;MACzBV,QAAQ,GAAGF,KAAK,CAACY,MAAM;MACvB,IAAIV,QAAQ,EAAE;QACV,KAAK,IAAIyB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGzB,QAAQ,EAAEyB,CAAC,EAAE,EAAE;UAC/B,IAAMlB,QAAQ,GAAGT,KAAK,CAAC2B,CAAC,CAAC;UACzBlB,QAAQ,CAACgB,SAAS,CAAC;UACnB,IAAIpB,WAAW,CAACuB,GAAG,CAACnB,QAAQ,CAAC,EAAE;YAC3BF,IAAI,CAACC,QAAQ,CAACC,QAAQ,CAAC;YACvBV,YAAY,CAAC,CAAC;UAClB;QACJ;MACJ;MACAI,YAAY,GAAG,KAAK;MACpB,IAAIC,cAAc,EAAE;QAChBA,cAAc,GAAG,KAAK;QACtBG,IAAI,CAACiB,OAAO,CAACC,SAAS,CAAC;MAC3B;IACJ;EACJ,CAAC;EACD,OAAOlB,IAAI;AACf;AAEA,SAAST,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}