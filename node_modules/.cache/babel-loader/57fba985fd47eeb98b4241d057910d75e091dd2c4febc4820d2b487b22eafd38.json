{"ast":null,"code":"'use client';\n\n// src/textarea.tsx\nimport _objectSpread from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _createForOfIteratorHelper from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nvar _excluded = [\"className\", \"rows\"];\nimport { useFormControl } from \"@chakra-ui/form-control\";\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\n\n// ../../utilities/object-utils/src/omit.ts\nfunction omit(object) {\n  var keysToOmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var clone = Object.assign({}, object);\n  var _iterator = _createForOfIteratorHelper(keysToOmit),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var key = _step.value;\n      if (key in clone) {\n        delete clone[key];\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return clone;\n}\n\n// src/textarea.tsx\nimport { jsx } from \"react/jsx-runtime\";\nvar omitted = [\"h\", \"minH\", \"height\", \"minHeight\"];\nvar Textarea = forwardRef(function (props, ref) {\n  var styles = useStyleConfig(\"Textarea\", props);\n  var _omitThemingProps = omitThemingProps(props),\n    className = _omitThemingProps.className,\n    rows = _omitThemingProps.rows,\n    rest = _objectWithoutProperties(_omitThemingProps, _excluded);\n  var textareaProps = useFormControl(rest);\n  var textareaStyles = rows ? omit(styles, omitted) : styles;\n  return /* @__PURE__ */jsx(chakra.textarea, _objectSpread(_objectSpread({\n    ref: ref,\n    rows: rows\n  }, textareaProps), {}, {\n    className: cx(\"chakra-textarea\", className),\n    __css: textareaStyles\n  }));\n});\nTextarea.displayName = \"Textarea\";\nexport { Textarea };","map":{"version":3,"names":["useFormControl","chakra","forwardRef","omitThemingProps","useStyleConfig","cx","omit","object","keysToOmit","arguments","length","undefined","clone","Object","assign","_iterator","_createForOfIteratorHelper","_step","s","n","done","key","value","err","e","f","jsx","omitted","Textarea","props","ref","styles","_omitThemingProps","className","rows","rest","_objectWithoutProperties","_excluded","textareaProps","textareaStyles","textarea","_objectSpread","__css","displayName"],"sources":["/Users/eyliu/Desktop/FitBuddy/node_modules/@chakra-ui/textarea/src/textarea.tsx","/Users/eyliu/Desktop/FitBuddy/node_modules/utilities/object-utils/src/omit.ts"],"sourcesContent":["import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { omit } from \"@chakra-ui/object-utils\"\n\ninterface TextareaOptions {\n  /**\n   * The border color when the textarea is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the textarea is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\"\n\nconst omitted = [\"h\", \"minH\", \"height\", \"minHeight\"]\n\nexport interface TextareaProps\n  extends Omit<HTMLChakraProps<\"textarea\">, Omitted>,\n    TextareaOptions,\n    FormControlOptions,\n    ThemingProps<\"Textarea\"> {}\n\n/**\n * Textarea is used to enter an amount of text that's longer than a single line\n * @see Docs https://chakra-ui.com/textarea\n */\nexport const Textarea = forwardRef<TextareaProps, \"textarea\">((props, ref) => {\n  const styles = useStyleConfig(\"Textarea\", props)\n  const { className, rows, ...rest } = omitThemingProps(props)\n\n  const textareaProps = useFormControl<HTMLTextAreaElement>(rest)\n\n  //@ts-ignore\n  const textareaStyles = rows ? omit(styles, omitted) : styles\n\n  return (\n    <chakra.textarea\n      ref={ref}\n      rows={rows}\n      {...textareaProps}\n      className={cx(\"chakra-textarea\", className)}\n      __css={textareaStyles}\n    />\n  )\n})\n\nTextarea.displayName = \"Textarea\"\n","export function omit<T extends Record<string, any>, K extends keyof T>(\n  object: T,\n  keysToOmit: K[] = [],\n) {\n  const clone: Record<string, unknown> = Object.assign({}, object)\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key as string]\n    }\n  }\n  return clone as Omit<T, K>\n}\n"],"mappings":";;;;;;;AAAA,SAA6BA,cAAA,QAAsB;AACnD,SACEC,MAAA,EACAC,UAAA,EAEAC,gBAAA,EAEAC,cAAA,QACK;AACP,SAASC,EAAA,QAAU;;;ACTZ,SAASC,KACdC,MAAA,EAEA;EAAA,IADAC,UAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAkB,EAAC;EAEnB,IAAMG,KAAA,GAAiCC,MAAA,CAAOC,MAAA,CAAO,CAAC,GAAGP,MAAM;EAAA,IAAAQ,SAAA,GAAAC,0BAAA,CAC7CR,UAAA;IAAAS,KAAA;EAAA;IAAlB,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAA8B;MAAA,IAAnBC,GAAA,GAAAJ,KAAA,CAAAK,KAAA;MACT,IAAID,GAAA,IAAOT,KAAA,EAAO;QAChB,OAAOA,KAAA,CAAMS,GAAa;MAC5B;IACF;EAAA,SAAAE,GAAA;IAAAR,SAAA,CAAAS,CAAA,CAAAD,GAAA;EAAA;IAAAR,SAAA,CAAAU,CAAA;EAAA;EACA,OAAOb,KAAA;AACT;;;ADwCI,SAAAc,GAAA;AAtBJ,IAAMC,OAAA,GAAU,CAAC,KAAK,QAAQ,UAAU,WAAW;AAY5C,IAAMC,QAAA,GAAW1B,UAAA,CAAsC,UAAC2B,KAAA,EAAOC,GAAA,EAAQ;EAC5E,IAAMC,MAAA,GAAS3B,cAAA,CAAe,YAAYyB,KAAK;EAC/C,IAAAG,iBAAA,GAAqC7B,gBAAA,CAAiB0B,KAAK;IAAnDI,SAAA,GAAAD,iBAAA,CAAAC,SAAA;IAAWC,IAAA,GAAAF,iBAAA,CAAAE,IAAA;IAASC,IAAA,GAAAC,wBAAA,CAAAJ,iBAAA,EAAAK,SAAA;EAE5B,IAAMC,aAAA,GAAgBtC,cAAA,CAAoCmC,IAAI;EAG9D,IAAMI,cAAA,GAAiBL,IAAA,GAAO5B,IAAA,CAAKyB,MAAA,EAAQJ,OAAO,IAAII,MAAA;EAEtD,OACE,eAAAL,GAAA,CAACzB,MAAA,CAAOuC,QAAA,EAAAC,aAAA,CAAAA,aAAA;IACNX,GAAA,EAAAA,GAAA;IACAI,IAAA,EAAAA;EAAA,GACII,aAAA;IACJL,SAAA,EAAW5B,EAAA,CAAG,mBAAmB4B,SAAS;IAC1CS,KAAA,EAAOH;EAAA,EACT;AAEJ,CAAC;AAEDX,QAAA,CAASe,WAAA,GAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}