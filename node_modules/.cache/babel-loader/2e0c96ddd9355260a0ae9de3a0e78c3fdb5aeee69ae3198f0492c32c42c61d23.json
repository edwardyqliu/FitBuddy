{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useSafeLayoutEffect } from \"./chunk-724WJZW4.mjs\";\n\n// src/use-dimensions.ts\nimport { getBox } from \"@chakra-ui/utils\";\nimport { useRef, useState } from \"react\";\nfunction useDimensions(ref, observe) {\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    dimensions = _useState2[0],\n    setDimensions = _useState2[1];\n  var rafId = useRef();\n  useSafeLayoutEffect(function () {\n    function measure() {\n      var node = ref.current;\n      if (!node) return;\n      rafId.current = requestAnimationFrame(function () {\n        var boxModel = getBox(node);\n        setDimensions(boxModel);\n      });\n    }\n    measure();\n    if (observe) {\n      window.addEventListener(\"resize\", measure);\n      window.addEventListener(\"scroll\", measure);\n    }\n    return function () {\n      if (observe) {\n        window.removeEventListener(\"resize\", measure);\n        window.removeEventListener(\"scroll\", measure);\n      }\n      if (rafId.current) {\n        cancelAnimationFrame(rafId.current);\n      }\n    };\n  }, [observe]);\n  return dimensions;\n}\nexport { useDimensions };","map":{"version":3,"names":["getBox","useRef","useState","useDimensions","ref","observe","_useState","_useState2","_slicedToArray","dimensions","setDimensions","rafId","useSafeLayoutEffect","measure","node","current","requestAnimationFrame","boxModel","window","addEventListener","removeEventListener","cancelAnimationFrame"],"sources":["/Users/eyliu/Desktop/FitBuddy/node_modules/@chakra-ui/hooks/src/use-dimensions.ts"],"sourcesContent":["import { getBox, BoxModel } from \"@chakra-ui/utils\"\nimport { useRef, useState } from \"react\"\nimport { useSafeLayoutEffect } from \"./use-safe-layout-effect\"\n\n/**\n * React hook to measure a component's dimensions\n *\n * @param ref ref of the component to measure\n * @param observe if `true`, resize and scroll observers will be turned on\n *\n * @deprecated use the `useSize` hook instead\n *\n * ```jsx\n * import { useSize } from \"@chakra-ui/react-use-size\"\n * ```\n */\nexport function useDimensions(\n  ref: React.RefObject<HTMLElement>,\n  observe?: boolean,\n) {\n  const [dimensions, setDimensions] = useState<BoxModel | null>(null)\n  const rafId = useRef<number>()\n\n  useSafeLayoutEffect(() => {\n    function measure() {\n      const node = ref.current\n      if (!node) return\n      rafId.current = requestAnimationFrame(() => {\n        const boxModel = getBox(node)\n        setDimensions(boxModel)\n      })\n    }\n\n    measure()\n\n    if (observe) {\n      window.addEventListener(\"resize\", measure)\n      window.addEventListener(\"scroll\", measure)\n    }\n\n    return () => {\n      if (observe) {\n        window.removeEventListener(\"resize\", measure)\n        window.removeEventListener(\"scroll\", measure)\n      }\n\n      if (rafId.current) {\n        cancelAnimationFrame(rafId.current)\n      }\n    }\n  }, [observe])\n\n  return dimensions\n}\n"],"mappings":";;;;;;AAAA,SAASA,MAAA,QAAwB;AACjC,SAASC,MAAA,EAAQC,QAAA,QAAgB;AAe1B,SAASC,cACdC,GAAA,EACAC,OAAA,EACA;EACA,IAAAC,SAAA,GAAoCJ,QAAA,CAA0B,IAAI;IAAAK,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA3DG,UAAA,GAAAF,UAAA;IAAYG,aAAa,GAAAH,UAAA;EAChC,IAAMI,KAAA,GAAQV,MAAA,CAAe;EAE7BW,mBAAA,CAAoB,YAAM;IACxB,SAASC,QAAA,EAAU;MACjB,IAAMC,IAAA,GAAOV,GAAA,CAAIW,OAAA;MACjB,IAAI,CAACD,IAAA,EAAM;MACXH,KAAA,CAAMI,OAAA,GAAUC,qBAAA,CAAsB,YAAM;QAC1C,IAAMC,QAAA,GAAWjB,MAAA,CAAOc,IAAI;QAC5BJ,aAAA,CAAcO,QAAQ;MACxB,CAAC;IACH;IAEAJ,OAAA,CAAQ;IAER,IAAIR,OAAA,EAAS;MACXa,MAAA,CAAOC,gBAAA,CAAiB,UAAUN,OAAO;MACzCK,MAAA,CAAOC,gBAAA,CAAiB,UAAUN,OAAO;IAC3C;IAEA,OAAO,YAAM;MACX,IAAIR,OAAA,EAAS;QACXa,MAAA,CAAOE,mBAAA,CAAoB,UAAUP,OAAO;QAC5CK,MAAA,CAAOE,mBAAA,CAAoB,UAAUP,OAAO;MAC9C;MAEA,IAAIF,KAAA,CAAMI,OAAA,EAAS;QACjBM,oBAAA,CAAqBV,KAAA,CAAMI,OAAO;MACpC;IACF;EACF,GAAG,CAACV,OAAO,CAAC;EAEZ,OAAOI,UAAA;AACT"},"metadata":{},"sourceType":"module","externalDependencies":[]}