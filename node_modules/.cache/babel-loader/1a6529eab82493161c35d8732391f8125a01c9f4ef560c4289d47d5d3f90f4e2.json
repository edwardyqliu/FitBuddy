{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"columns\", \"spacingX\", \"spacingY\", \"spacing\", \"minChildWidth\"];\nimport { Grid } from \"./chunk-JARCRF6W.mjs\";\n\n// src/simple-grid.tsx\nimport { forwardRef, getToken, useTheme } from \"@chakra-ui/system\";\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar SimpleGrid = forwardRef(function SimpleGrid2(props, ref) {\n  var columns = props.columns,\n    spacingX = props.spacingX,\n    spacingY = props.spacingY,\n    spacing = props.spacing,\n    minChildWidth = props.minChildWidth,\n    rest = _objectWithoutProperties(props, _excluded);\n  var theme = useTheme();\n  var templateColumns = minChildWidth ? widthToColumns(minChildWidth, theme) : countToColumns(columns);\n  return /* @__PURE__ */jsx(Grid, _objectSpread({\n    ref: ref,\n    gap: spacing,\n    columnGap: spacingX,\n    rowGap: spacingY,\n    templateColumns: templateColumns\n  }, rest));\n});\nSimpleGrid.displayName = \"SimpleGrid\";\nfunction toPx(n) {\n  return typeof n === \"number\" ? \"\".concat(n, \"px\") : n;\n}\nfunction widthToColumns(width, theme) {\n  return mapResponsive(width, function (value) {\n    var _value = getToken(\"sizes\", value, toPx(value))(theme);\n    return value === null ? null : \"repeat(auto-fit, minmax(\".concat(_value, \", 1fr))\");\n  });\n}\nfunction countToColumns(count) {\n  return mapResponsive(count, function (value) {\n    return value === null ? null : \"repeat(\".concat(value, \", minmax(0, 1fr))\");\n  });\n}\nexport { SimpleGrid };","map":{"version":3,"names":["forwardRef","getToken","useTheme","mapResponsive","jsx","SimpleGrid","SimpleGrid2","props","ref","columns","spacingX","spacingY","spacing","minChildWidth","rest","_objectWithoutProperties","_excluded","theme","templateColumns","widthToColumns","countToColumns","Grid","_objectSpread","gap","columnGap","rowGap","displayName","toPx","n","concat","width","value","_value","count"],"sources":["/Users/eyliu/Desktop/FitBuddy/node_modules/@chakra-ui/layout/src/simple-grid.tsx"],"sourcesContent":["import {\n  forwardRef,\n  getToken,\n  ResponsiveValue,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component that uses the `Grid` component and provides\n * a simpler interface to create responsive grid layouts.\n *\n * Provides props that easily define columns and spacing.\n *\n * @see Docs https://chakra-ui.com/simplegrid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">(\n  function SimpleGrid(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } =\n      props\n\n    const theme = useTheme()\n    const templateColumns = minChildWidth\n      ? widthToColumns(minChildWidth, theme)\n      : countToColumns(columns)\n\n    return (\n      <Grid\n        ref={ref}\n        gap={spacing}\n        columnGap={spacingX}\n        rowGap={spacingY}\n        templateColumns={templateColumns}\n        {...rest}\n      />\n    )\n  },\n)\n\nSimpleGrid.displayName = \"SimpleGrid\"\n\nfunction toPx(n: string | number) {\n  return typeof n === \"number\" ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any, theme: Record<string, any>) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme)\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`\n  })\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    value === null ? null : `repeat(${value}, minmax(0, 1fr))`,\n  )\n}\n"],"mappings":";;;;;;;;AAAA,SACEA,UAAA,EACAC,QAAA,EAEAC,QAAA,QACK;AACP,SAASC,aAAA,QAAqB;AAiDxB,SAAAC,GAAA;AAXC,IAAMC,UAAA,GAAaL,UAAA,CACxB,SAASM,YAAWC,KAAA,EAAOC,GAAA,EAAK;EAC9B,IAAQC,OAAA,GACNF,KAAA,CADME,OAAA;IAASC,QAAA,GACfH,KAAA,CADeG,QAAA;IAAUC,QAAA,GACzBJ,KAAA,CADyBI,QAAA;IAAUC,OAAA,GACnCL,KAAA,CADmCK,OAAA;IAASC,aAAA,GAC5CN,KAAA,CAD4CM,aAAA;IAAkBC,IAAA,GAAAC,wBAAA,CAC9DR,KAAA,EAAAS,SAAA;EAEF,IAAMC,KAAA,GAAQf,QAAA,CAAS;EACvB,IAAMgB,eAAA,GAAkBL,aAAA,GACpBM,cAAA,CAAeN,aAAA,EAAeI,KAAK,IACnCG,cAAA,CAAeX,OAAO;EAE1B,OACE,eAAAL,GAAA,CAACiB,IAAA,EAAAC,aAAA;IACCd,GAAA,EAAAA,GAAA;IACAe,GAAA,EAAKX,OAAA;IACLY,SAAA,EAAWd,QAAA;IACXe,MAAA,EAAQd,QAAA;IACRO,eAAA,EAAAA;EAAA,GACIJ,IAAA,CACN;AAEJ,CACF;AAEAT,UAAA,CAAWqB,WAAA,GAAc;AAEzB,SAASC,KAAKC,CAAA,EAAoB;EAChC,OAAO,OAAOA,CAAA,KAAM,cAAAC,MAAA,CAAcD,CAAC,UAAOA,CAAA;AAC5C;AAEA,SAAST,eAAeW,KAAA,EAAYb,KAAA,EAA4B;EAC9D,OAAOd,aAAA,CAAc2B,KAAA,EAAO,UAACC,KAAA,EAAU;IACrC,IAAMC,MAAA,GAAS/B,QAAA,CAAS,SAAS8B,KAAA,EAAOJ,IAAA,CAAKI,KAAK,CAAC,EAAEd,KAAK;IAC1D,OAAOc,KAAA,KAAU,OAAO,kCAAAF,MAAA,CAAkCG,MAAM;EAClE,CAAC;AACH;AAEA,SAASZ,eAAea,KAAA,EAAY;EAClC,OAAO9B,aAAA,CAAc8B,KAAA,EAAO,UAACF,KAAA;IAAA,OAC3BA,KAAA,KAAU,OAAO,iBAAAF,MAAA,CAAiBE,KAAK;EAAA,CACzC;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}