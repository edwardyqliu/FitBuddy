{"ast":null,"code":"// src/css-calc.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nfunction toRef(operand) {\n  if (isObject(operand) && operand.reference) {\n    return operand.reference;\n  }\n  return String(operand);\n}\nvar toExpr = function toExpr(operator) {\n  for (var _len = arguments.length, operands = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    operands[_key - 1] = arguments[_key];\n  }\n  return operands.map(toRef).join(\" \".concat(operator, \" \")).replace(/calc/g, \"\");\n};\nvar _add = function add() {\n  for (var _len2 = arguments.length, operands = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    operands[_key2] = arguments[_key2];\n  }\n  return \"calc(\".concat(toExpr.apply(void 0, [\"+\"].concat(operands)), \")\");\n};\nvar _subtract = function subtract() {\n  for (var _len3 = arguments.length, operands = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    operands[_key3] = arguments[_key3];\n  }\n  return \"calc(\".concat(toExpr.apply(void 0, [\"-\"].concat(operands)), \")\");\n};\nvar _multiply = function multiply() {\n  for (var _len4 = arguments.length, operands = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    operands[_key4] = arguments[_key4];\n  }\n  return \"calc(\".concat(toExpr.apply(void 0, [\"*\"].concat(operands)), \")\");\n};\nvar _divide = function divide() {\n  for (var _len5 = arguments.length, operands = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    operands[_key5] = arguments[_key5];\n  }\n  return \"calc(\".concat(toExpr.apply(void 0, [\"/\"].concat(operands)), \")\");\n};\nvar _negate = function negate(x) {\n  var value = toRef(x);\n  if (value != null && !Number.isNaN(parseFloat(value))) {\n    return String(value).startsWith(\"-\") ? String(value).slice(1) : \"-\".concat(value);\n  }\n  return _multiply(value, -1);\n};\nvar calc = Object.assign(function (x) {\n  return {\n    add: function add() {\n      for (var _len6 = arguments.length, operands = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        operands[_key6] = arguments[_key6];\n      }\n      return calc(_add.apply(void 0, [x].concat(operands)));\n    },\n    subtract: function subtract() {\n      for (var _len7 = arguments.length, operands = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        operands[_key7] = arguments[_key7];\n      }\n      return calc(_subtract.apply(void 0, [x].concat(operands)));\n    },\n    multiply: function multiply() {\n      for (var _len8 = arguments.length, operands = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        operands[_key8] = arguments[_key8];\n      }\n      return calc(_multiply.apply(void 0, [x].concat(operands)));\n    },\n    divide: function divide() {\n      for (var _len9 = arguments.length, operands = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n        operands[_key9] = arguments[_key9];\n      }\n      return calc(_divide.apply(void 0, [x].concat(operands)));\n    },\n    negate: function negate() {\n      return calc(_negate(x));\n    },\n    toString: function toString() {\n      return x.toString();\n    }\n  };\n}, {\n  add: _add,\n  subtract: _subtract,\n  multiply: _multiply,\n  divide: _divide,\n  negate: _negate\n});\nexport { calc };","map":{"version":3,"names":["isObject","toRef","operand","reference","String","toExpr","operator","_len","arguments","length","operands","Array","_key","map","join","concat","replace","add","_len2","_key2","apply","subtract","_len3","_key3","multiply","_len4","_key4","divide","_len5","_key5","negate","x","value","Number","isNaN","parseFloat","startsWith","slice","calc","Object","assign","_len6","_key6","_len7","_key7","_len8","_key8","_len9","_key9","toString"],"sources":["/Users/eyliu/Desktop/FitBuddy/node_modules/@chakra-ui/theme-tools/src/css-calc.ts"],"sourcesContent":["import { isObject } from \"@chakra-ui/shared-utils\"\nimport { CSSVar } from \"./css-var\"\n\nexport type Operand = string | number | CSSVar\ntype Operands = Operand[]\n\ntype Operator = \"+\" | \"-\" | \"*\" | \"/\"\n\nfunction toRef(operand: Operand): string {\n  if (isObject(operand) && operand.reference) {\n    return operand.reference\n  }\n  return String(operand)\n}\n\nconst toExpr = (operator: Operator, ...operands: Operands) =>\n  operands.map(toRef).join(` ${operator} `).replace(/calc/g, \"\")\n\nconst add = (...operands: Operands) => `calc(${toExpr(\"+\", ...operands)})`\n\nconst subtract = (...operands: Operands) => `calc(${toExpr(\"-\", ...operands)})`\n\nconst multiply = (...operands: Operands) => `calc(${toExpr(\"*\", ...operands)})`\n\nconst divide = (...operands: Operands) => `calc(${toExpr(\"/\", ...operands)})`\n\nconst negate = (x: Operand) => {\n  const value = toRef(x)\n\n  if (value != null && !Number.isNaN(parseFloat(value))) {\n    return String(value).startsWith(\"-\") ? String(value).slice(1) : `-${value}`\n  }\n\n  return multiply(value, -1)\n}\n\nexport interface CalcChain {\n  add: (...operands: Operands) => CalcChain\n  subtract: (...operands: Operands) => CalcChain\n  multiply: (...operands: Operands) => CalcChain\n  divide: (...operands: Operands) => CalcChain\n  negate: () => CalcChain\n  toString: () => string\n}\n\nexport const calc = Object.assign(\n  (x: Operand): CalcChain => ({\n    add: (...operands) => calc(add(x, ...operands)),\n    subtract: (...operands) => calc(subtract(x, ...operands)),\n    multiply: (...operands) => calc(multiply(x, ...operands)),\n    divide: (...operands) => calc(divide(x, ...operands)),\n    negate: () => calc(negate(x)),\n    toString: () => x.toString(),\n  }),\n  {\n    add,\n    subtract,\n    multiply,\n    divide,\n    negate,\n  },\n)\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}