{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { ToastComponent } from \"./chunk-VXESY33O.mjs\";\nimport { toastStore } from \"./chunk-HYCJNCPE.mjs\";\nimport { getToastListStyle } from \"./chunk-LDADOVIM.mjs\";\n\n// src/toast.provider.tsx\nimport { AnimatePresence } from \"framer-motion\";\nimport { Portal } from \"@chakra-ui/portal\";\nimport { useSyncExternalStore } from \"react\";\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { jsx } from \"react/jsx-runtime\";\nvar _createContext = createContext({\n    name: \"ToastOptionsContext\",\n    strict: false\n  }),\n  _createContext2 = _slicedToArray(_createContext, 2),\n  ToastOptionProvider = _createContext2[0],\n  useToastOptionContext = _createContext2[1];\nvar ToastProvider = function ToastProvider(props) {\n  var state = useSyncExternalStore(toastStore.subscribe, toastStore.getState, toastStore.getState);\n  var motionVariants = props.motionVariants,\n    _props$component = props.component,\n    Component = _props$component === void 0 ? ToastComponent : _props$component,\n    portalProps = props.portalProps;\n  var stateKeys = Object.keys(state);\n  var toastList = stateKeys.map(function (position) {\n    var toasts = state[position];\n    return /* @__PURE__ */jsx(\"div\", {\n      role: \"region\",\n      \"aria-live\": \"polite\",\n      \"aria-label\": \"Notifications\",\n      id: \"chakra-toast-manager-\".concat(position),\n      style: getToastListStyle(position),\n      children: /* @__PURE__ */jsx(AnimatePresence, {\n        initial: false,\n        children: toasts.map(function (toast) {\n          return /* @__PURE__ */jsx(Component, _objectSpread({\n            motionVariants: motionVariants\n          }, toast), toast.id);\n        })\n      })\n    }, position);\n  });\n  return /* @__PURE__ */jsx(Portal, _objectSpread(_objectSpread({}, portalProps), {}, {\n    children: toastList\n  }));\n};\nexport { ToastOptionProvider, useToastOptionContext, ToastProvider };","map":{"version":3,"names":["AnimatePresence","Portal","useSyncExternalStore","createContext","jsx","_createContext","name","strict","_createContext2","_slicedToArray","ToastOptionProvider","useToastOptionContext","ToastProvider","props","state","toastStore","subscribe","getState","motionVariants","_props$component","component","Component","ToastComponent","portalProps","stateKeys","Object","keys","toastList","map","position","toasts","role","id","concat","style","getToastListStyle","children","initial","toast","_objectSpread"],"sources":["/Users/eyliu/Desktop/FitBuddy/node_modules/@chakra-ui/toast/src/toast.provider.tsx"],"sourcesContent":["import { AnimatePresence, Variants } from \"framer-motion\"\nimport { Portal, PortalProps } from \"@chakra-ui/portal\"\nimport { ToastComponent, ToastComponentProps } from \"./toast.component\"\nimport type {\n  CloseAllToastsOptions,\n  ToastId,\n  ToastMessage,\n  ToastOptions,\n} from \"./toast.types\"\nimport type { UseToastOptions } from \"./use-toast\"\nimport { toastStore } from \"./toast.store\"\nimport { getToastListStyle } from \"./toast.utils\"\nimport { useSyncExternalStore } from \"react\"\nimport { createContext } from \"@chakra-ui/react-context\"\n\nexport interface ToastMethods {\n  /**\n   * Function to actually create a toast and add it\n   * to state at the specified position\n   */\n  notify: (message: ToastMessage, options?: CreateToastOptions) => ToastId\n  /**\n   * Close all toasts at once.\n   * If given positions, will only close those.\n   */\n  closeAll: (options?: CloseAllToastsOptions) => void\n  /**\n   * Requests to close a toast based on its id and position\n   */\n  close: (id: ToastId) => void\n  /**\n   * Update a specific toast with new options based on the\n   * passed `id`\n   */\n  update: (id: ToastId, options: Omit<UseToastOptions, \"id\">) => void\n  isActive: (id: ToastId) => boolean\n}\n\nexport type CreateToastOptions = Partial<\n  Pick<\n    ToastOptions,\n    | \"status\"\n    | \"duration\"\n    | \"position\"\n    | \"id\"\n    | \"onCloseComplete\"\n    | \"containerStyle\"\n  >\n>\n\nexport type ToastProviderProps = React.PropsWithChildren<{\n  /**\n   * Default options for `useToast(options)`\n   *\n   * @example\n   * <ToastProvider defaultOptions={{ duration: 10_000, isClosable: true }} />\n   */\n  defaultOptions?: UseToastOptions\n\n  /**\n   * Customize the default motion config to animate the toasts your way\n   *\n   * @example\n   * const motionVariants =\n   * <ToastProvider motionVariants={motionVariants} />\n   */\n  motionVariants?: Variants\n\n  /**\n   * Are you looking for a way to style the toast? Use a custom `Alert` variant in the theme.\n   * This property overrides the default ToastComponent with your own implementation.\n   *\n   * @example\n   * const CustomToastComponent = (props: ToastComponentProps) => ...\n   * <ToastProvider component={CustomToastComponent} />\n   *\n   * @default ToastComponent\n   */\n  component?: React.FC<ToastComponentProps>\n\n  /**\n   * Define the margin between toasts\n   *\n   * @default 0.5rem\n   */\n  toastSpacing?: string | number\n  /**\n   * Props to be forwarded to the portal component\n   */\n  portalProps?: Pick<PortalProps, \"appendToParentPortal\" | \"containerRef\">\n}>\n\n/**\n * Passes default options down to be used by toast creator function\n */\nexport const [ToastOptionProvider, useToastOptionContext] = createContext<\n  UseToastOptions | undefined\n>({\n  name: `ToastOptionsContext`,\n  strict: false,\n})\n\n/**\n * Manages the creation, and removal of toasts\n * across all corners (\"top\", \"bottom\", etc.)\n */\nexport const ToastProvider = (props: ToastProviderProps) => {\n  const state = useSyncExternalStore(\n    toastStore.subscribe,\n    toastStore.getState,\n    toastStore.getState,\n  )\n\n  const {\n    motionVariants,\n    component: Component = ToastComponent,\n    portalProps,\n  } = props\n\n  const stateKeys = Object.keys(state) as Array<keyof typeof state>\n  const toastList = stateKeys.map((position) => {\n    const toasts = state[position]\n\n    return (\n      <div\n        role=\"region\"\n        aria-live=\"polite\"\n        aria-label=\"Notifications\"\n        key={position}\n        id={`chakra-toast-manager-${position}`}\n        style={getToastListStyle(position)}\n      >\n        <AnimatePresence initial={false}>\n          {toasts.map((toast) => (\n            <Component\n              key={toast.id}\n              motionVariants={motionVariants}\n              {...toast}\n            />\n          ))}\n        </AnimatePresence>\n      </div>\n    )\n  })\n\n  return <Portal {...portalProps}>{toastList}</Portal>\n}\n"],"mappings":";;;;;;;;;AAAA,SAASA,eAAA,QAAiC;AAC1C,SAASC,MAAA,QAA2B;AAWpC,SAASC,oBAAA,QAA4B;AACrC,SAASC,aAAA,QAAqB;AAyHlB,SAAAC,GAAA;AAvCL,IAAAC,cAAA,GAAqDF,aAAA,CAE1D;IACAG,IAAA,uBAAM;IACNC,MAAA,EAAQ;EACV,CAAC;EAAAC,eAAA,GAAAC,cAAA,CAAAJ,cAAA;EALaK,mBAAA,GAAAF,eAAA;EAAqBG,qBAAqB,GAAAH,eAAA;AAWjD,IAAMI,aAAA,GAAgB,SAAhBA,cAAiBC,KAAA,EAA8B;EAC1D,IAAMC,KAAA,GAAQZ,oBAAA,CACZa,UAAA,CAAWC,SAAA,EACXD,UAAA,CAAWE,QAAA,EACXF,UAAA,CAAWE,QACb;EAEA,IACEC,cAAA,GAGEL,KAAA,CAHFK,cAAA;IAAAC,gBAAA,GAGEN,KAAA,CAFFO,SAAA;IAAWC,SAAA,GAAAF,gBAAA,cAAYG,cAAA,GAAAH,gBAAA;IACvBI,WAAA,GACEV,KAAA,CADFU,WAAA;EAGF,IAAMC,SAAA,GAAYC,MAAA,CAAOC,IAAA,CAAKZ,KAAK;EACnC,IAAMa,SAAA,GAAYH,SAAA,CAAUI,GAAA,CAAI,UAACC,QAAA,EAAa;IAC5C,IAAMC,MAAA,GAAShB,KAAA,CAAMe,QAAQ;IAE7B,OACE,eAAAzB,GAAA,CAAC;MACC2B,IAAA,EAAK;MACL,aAAU;MACV,cAAW;MAEXC,EAAA,0BAAAC,MAAA,CAA4BJ,QAAQ;MACpCK,KAAA,EAAOC,iBAAA,CAAkBN,QAAQ;MAEjCO,QAAA,iBAAAhC,GAAA,CAACJ,eAAA;QAAgBqC,OAAA,EAAS;QACvBD,QAAA,EAAAN,MAAA,CAAOF,GAAA,CAAI,UAACU,KAAA;UAAA,OACX,eAAAlC,GAAA,CAACiB,SAAA,EAAAkB,aAAA;YAECrB,cAAA,EAAAA;UAAA,GACIoB,KAAA,GAFCA,KAAA,CAAMN,EAGb,CACD;QAAA;MAAA,CACH;IAAA,GAZKH,QAaP;EAEJ,CAAC;EAED,OAAO,eAAAzB,GAAA,CAACH,MAAA,EAAAsC,aAAA,CAAAA,aAAA,KAAWhB,WAAA;IAAca,QAAA,EAAAT;EAAA,EAAU;AAC7C"},"metadata":{},"sourceType":"module","externalDependencies":[]}