{"ast":null,"code":"'use client';\n\nimport { usePointerEvent } from \"./chunk-ZCYNKCF5.mjs\";\n\n// src/use-focus-on-pointerdown.ts\nimport { contains, detectBrowser, focus, getOwnerDocument, isActiveElement, isRefObject } from \"@chakra-ui/utils\";\nfunction useFocusOnPointerDown(props) {\n  var ref = props.ref,\n    elements = props.elements,\n    enabled = props.enabled;\n  var isSafari = detectBrowser(\"Safari\");\n  var doc = function doc() {\n    return getOwnerDocument(ref.current);\n  };\n  usePointerEvent(doc, \"pointerdown\", function (event) {\n    if (!isSafari || !enabled) return;\n    var target = event.target;\n    var els = elements != null ? elements : [ref];\n    var isValidTarget = els.some(function (elementOrRef) {\n      var el = isRefObject(elementOrRef) ? elementOrRef.current : elementOrRef;\n      return contains(el, target);\n    });\n    if (!isActiveElement(target) && isValidTarget) {\n      event.preventDefault();\n      focus(target);\n    }\n  });\n}\nexport { useFocusOnPointerDown };","map":{"version":3,"names":["contains","detectBrowser","focus","getOwnerDocument","isActiveElement","isRefObject","useFocusOnPointerDown","props","ref","elements","enabled","isSafari","doc","current","usePointerEvent","event","target","els","isValidTarget","some","elementOrRef","el","preventDefault"],"sources":["/Users/eyliu/Desktop/FitBuddy/node_modules/@chakra-ui/hooks/src/use-focus-on-pointerdown.ts"],"sourcesContent":["import {\n  contains,\n  detectBrowser,\n  focus,\n  getOwnerDocument,\n  isActiveElement,\n  isRefObject,\n} from \"@chakra-ui/utils\"\nimport { usePointerEvent } from \"./use-pointer-event\"\n\nexport interface UseFocusOnMouseDownProps {\n  enabled?: boolean\n  ref: React.RefObject<HTMLElement>\n  elements?: Array<React.RefObject<HTMLElement> | HTMLElement | null>\n}\n\n/**\n * Polyfill to get `relatedTarget` working correctly consistently\n * across all browsers.\n *\n * It ensures that elements receives focus on pointer down if\n * it's not the active element.\n *\n * @internal\n */\nexport function useFocusOnPointerDown(props: UseFocusOnMouseDownProps) {\n  const { ref, elements, enabled } = props\n\n  const isSafari = detectBrowser(\"Safari\")\n  const doc = () => getOwnerDocument(ref.current)\n\n  usePointerEvent(doc, \"pointerdown\", (event) => {\n    if (!isSafari || !enabled) return\n    const target = event.target as HTMLElement\n\n    const els = elements ?? [ref]\n    const isValidTarget = els.some((elementOrRef) => {\n      const el = isRefObject(elementOrRef) ? elementOrRef.current : elementOrRef\n      return contains(el, target)\n    })\n\n    if (!isActiveElement(target) && isValidTarget) {\n      event.preventDefault()\n      focus(target)\n    }\n  })\n}\n"],"mappings":";;;;;AAAA,SACEA,QAAA,EACAC,aAAA,EACAC,KAAA,EACAC,gBAAA,EACAC,eAAA,EACAC,WAAA,QACK;AAkBA,SAASC,sBAAsBC,KAAA,EAAiC;EACrE,IAAQC,GAAA,GAA2BD,KAAA,CAA3BC,GAAA;IAAKC,QAAA,GAAsBF,KAAA,CAAtBE,QAAA;IAAUC,OAAA,GAAYH,KAAA,CAAZG,OAAA;EAEvB,IAAMC,QAAA,GAAWV,aAAA,CAAc,QAAQ;EACvC,IAAMW,GAAA,GAAM,SAANA,IAAA;IAAA,OAAYT,gBAAA,CAAiBK,GAAA,CAAIK,OAAO;EAAA;EAE9CC,eAAA,CAAgBF,GAAA,EAAK,eAAe,UAACG,KAAA,EAAU;IAC7C,IAAI,CAACJ,QAAA,IAAY,CAACD,OAAA,EAAS;IAC3B,IAAMM,MAAA,GAASD,KAAA,CAAMC,MAAA;IAErB,IAAMC,GAAA,GAAMR,QAAA,WAAAA,QAAA,GAAY,CAACD,GAAG;IAC5B,IAAMU,aAAA,GAAgBD,GAAA,CAAIE,IAAA,CAAK,UAACC,YAAA,EAAiB;MAC/C,IAAMC,EAAA,GAAKhB,WAAA,CAAYe,YAAY,IAAIA,YAAA,CAAaP,OAAA,GAAUO,YAAA;MAC9D,OAAOpB,QAAA,CAASqB,EAAA,EAAIL,MAAM;IAC5B,CAAC;IAED,IAAI,CAACZ,eAAA,CAAgBY,MAAM,KAAKE,aAAA,EAAe;MAC7CH,KAAA,CAAMO,cAAA,CAAe;MACrBpB,KAAA,CAAMc,MAAM;IACd;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}