{"ast":null,"code":"'use client';\n\nimport _objectWithoutProperties from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _excluded = [\"isDisabled\", \"isLoading\", \"isActive\", \"children\", \"leftIcon\", \"rightIcon\", \"loadingText\", \"iconSpacing\", \"type\", \"spinner\", \"spinnerPlacement\", \"className\", \"as\"];\nimport { useButtonType } from \"./chunk-J37R6SZE.mjs\";\nimport { useButtonGroup } from \"./chunk-T6ZDZOLO.mjs\";\nimport { ButtonIcon } from \"./chunk-3RENZ2UO.mjs\";\nimport { ButtonSpinner } from \"./chunk-QB2Y5VKH.mjs\";\n\n// src/button.tsx\nimport { useMergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\";\nimport { useMemo } from \"react\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nvar Button = forwardRef(function (props, ref) {\n  var group = useButtonGroup();\n  var styles = useStyleConfig(\"Button\", _objectSpread(_objectSpread({}, group), props));\n  var _omitThemingProps = omitThemingProps(props),\n    _omitThemingProps$isD = _omitThemingProps.isDisabled,\n    isDisabled = _omitThemingProps$isD === void 0 ? group == null ? void 0 : group.isDisabled : _omitThemingProps$isD,\n    isLoading = _omitThemingProps.isLoading,\n    isActive = _omitThemingProps.isActive,\n    children = _omitThemingProps.children,\n    leftIcon = _omitThemingProps.leftIcon,\n    rightIcon = _omitThemingProps.rightIcon,\n    loadingText = _omitThemingProps.loadingText,\n    _omitThemingProps$ico = _omitThemingProps.iconSpacing,\n    iconSpacing = _omitThemingProps$ico === void 0 ? \"0.5rem\" : _omitThemingProps$ico,\n    type = _omitThemingProps.type,\n    spinner = _omitThemingProps.spinner,\n    _omitThemingProps$spi = _omitThemingProps.spinnerPlacement,\n    spinnerPlacement = _omitThemingProps$spi === void 0 ? \"start\" : _omitThemingProps$spi,\n    className = _omitThemingProps.className,\n    as = _omitThemingProps.as,\n    rest = _objectWithoutProperties(_omitThemingProps, _excluded);\n  var buttonStyles = useMemo(function () {\n    var _focus = _objectSpread(_objectSpread({}, styles == null ? void 0 : styles[\"_focus\"]), {}, {\n      zIndex: 1\n    });\n    return _objectSpread(_objectSpread({\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\"\n    }, styles), !!group && {\n      _focus: _focus\n    });\n  }, [styles, group]);\n  var _useButtonType = useButtonType(as),\n    _ref = _useButtonType.ref,\n    defaultType = _useButtonType.type;\n  var contentProps = {\n    rightIcon: rightIcon,\n    leftIcon: leftIcon,\n    iconSpacing: iconSpacing,\n    children: children\n  };\n  return /* @__PURE__ */jsxs(chakra.button, _objectSpread(_objectSpread({\n    ref: useMergeRefs(ref, _ref),\n    as: as,\n    type: type != null ? type : defaultType,\n    \"data-active\": dataAttr(isActive),\n    \"data-loading\": dataAttr(isLoading),\n    __css: buttonStyles,\n    className: cx(\"chakra-button\", className)\n  }, rest), {}, {\n    disabled: isDisabled || isLoading,\n    children: [isLoading && spinnerPlacement === \"start\" && /* @__PURE__ */jsx(ButtonSpinner, {\n      className: \"chakra-button__spinner--start\",\n      label: loadingText,\n      placement: \"start\",\n      spacing: iconSpacing,\n      children: spinner\n    }), isLoading ? loadingText || /* @__PURE__ */jsx(chakra.span, {\n      opacity: 0,\n      children: /* @__PURE__ */jsx(ButtonContent, _objectSpread({}, contentProps))\n    }) : /* @__PURE__ */jsx(ButtonContent, _objectSpread({}, contentProps)), isLoading && spinnerPlacement === \"end\" && /* @__PURE__ */jsx(ButtonSpinner, {\n      className: \"chakra-button__spinner--end\",\n      label: loadingText,\n      placement: \"end\",\n      spacing: iconSpacing,\n      children: spinner\n    })]\n  }));\n});\nButton.displayName = \"Button\";\nfunction ButtonContent(props) {\n  var leftIcon = props.leftIcon,\n    rightIcon = props.rightIcon,\n    children = props.children,\n    iconSpacing = props.iconSpacing;\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [leftIcon && /* @__PURE__ */jsx(ButtonIcon, {\n      marginEnd: iconSpacing,\n      children: leftIcon\n    }), children, rightIcon && /* @__PURE__ */jsx(ButtonIcon, {\n      marginStart: iconSpacing,\n      children: rightIcon\n    })]\n  });\n}\nexport { Button };","map":{"version":3,"names":["useMergeRefs","chakra","forwardRef","omitThemingProps","useStyleConfig","cx","dataAttr","useMemo","Fragment","jsx","jsxs","Button","props","ref","group","useButtonGroup","styles","_objectSpread","_omitThemingProps","_omitThemingProps$isD","isDisabled","isLoading","isActive","children","leftIcon","rightIcon","loadingText","_omitThemingProps$ico","iconSpacing","type","spinner","_omitThemingProps$spi","spinnerPlacement","className","as","rest","_objectWithoutProperties","_excluded","buttonStyles","_focus","zIndex","display","appearance","alignItems","justifyContent","userSelect","position","whiteSpace","verticalAlign","outline","_useButtonType","useButtonType","_ref","defaultType","contentProps","button","__css","disabled","ButtonSpinner","label","placement","spacing","span","opacity","ButtonContent","displayName","ButtonIcon","marginEnd","marginStart"],"sources":["/Users/eyliu/Desktop/FitBuddy/node_modules/@chakra-ui/button/src/button.tsx"],"sourcesContent":["import { useMergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\n\nimport { useMemo } from \"react\"\nimport { useButtonGroup } from \"./button-context\"\nimport { ButtonIcon } from \"./button-icon\"\nimport { ButtonSpinner } from \"./button-spinner\"\nimport { ButtonOptions } from \"./button-types\"\nimport { useButtonType } from \"./use-button-type\"\n\nexport interface ButtonProps\n  extends HTMLChakraProps<\"button\">,\n    ButtonOptions,\n    ThemingProps<\"Button\"> {}\n\n/**\n * Button component is used to trigger an action or event, such as submitting a form, opening a Dialog, canceling an action, or performing a delete operation.\n *\n * @see Docs https://chakra-ui.com/docs/components/button\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/button/\n */\nexport const Button = forwardRef<ButtonProps, \"button\">((props, ref) => {\n  const group = useButtonGroup()\n  const styles = useStyleConfig(\"Button\", { ...group, ...props })\n\n  const {\n    isDisabled = group?.isDisabled,\n    isLoading,\n    isActive,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props)\n\n  /**\n   * When button is used within ButtonGroup (i.e. flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n  const buttonStyles: SystemStyleObject = useMemo(() => {\n    // @ts-ignore\n    const _focus = { ...styles?.[\"_focus\"], zIndex: 1 }\n    return {\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\",\n      ...styles,\n      ...(!!group && { _focus }),\n    }\n  }, [styles, group])\n\n  const { ref: _ref, type: defaultType } = useButtonType(as)\n\n  const contentProps = { rightIcon, leftIcon, iconSpacing, children }\n\n  return (\n    <chakra.button\n      ref={useMergeRefs(ref, _ref)}\n      as={as}\n      type={type ?? defaultType}\n      data-active={dataAttr(isActive)}\n      data-loading={dataAttr(isLoading)}\n      __css={buttonStyles}\n      className={cx(\"chakra-button\", className)}\n      {...rest}\n      disabled={isDisabled || isLoading}\n    >\n      {isLoading && spinnerPlacement === \"start\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--start\"\n          label={loadingText}\n          placement=\"start\"\n          spacing={iconSpacing}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n\n      {isLoading ? (\n        loadingText || (\n          <chakra.span opacity={0}>\n            <ButtonContent {...contentProps} />\n          </chakra.span>\n        )\n      ) : (\n        <ButtonContent {...contentProps} />\n      )}\n\n      {isLoading && spinnerPlacement === \"end\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--end\"\n          label={loadingText}\n          placement=\"end\"\n          spacing={iconSpacing}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n    </chakra.button>\n  )\n})\n\nButton.displayName = \"Button\"\n\ntype ButtonContentProps = Pick<\n  ButtonProps,\n  \"leftIcon\" | \"rightIcon\" | \"children\" | \"iconSpacing\"\n>\n\nfunction ButtonContent(props: ButtonContentProps) {\n  const { leftIcon, rightIcon, children, iconSpacing } = props\n  return (\n    <>\n      {leftIcon && <ButtonIcon marginEnd={iconSpacing}>{leftIcon}</ButtonIcon>}\n      {children}\n      {rightIcon && (\n        <ButtonIcon marginStart={iconSpacing}>{rightIcon}</ButtonIcon>\n      )}\n    </>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}