{"ast":null,"code":"import _slicedToArray from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n// src/anatomy.ts\nfunction anatomy(name) {\n  var map = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var called = false;\n  function assert() {\n    if (!called) {\n      called = true;\n      return;\n    }\n    throw new Error(\"[anatomy] .part(...) should only be called once. Did you mean to use .extend(...) ?\");\n  }\n  function parts() {\n    assert();\n    for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n      values[_key] = arguments[_key];\n    }\n    for (var _i = 0, _values = values; _i < _values.length; _i++) {\n      var part = _values[_i];\n      ;\n      map[part] = toPart(part);\n    }\n    return anatomy(name, map);\n  }\n  function extend() {\n    for (var _len2 = arguments.length, parts2 = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      parts2[_key2] = arguments[_key2];\n    }\n    for (var _i2 = 0, _parts = parts2; _i2 < _parts.length; _i2++) {\n      var part = _parts[_i2];\n      if (part in map) continue;\n      map[part] = toPart(part);\n    }\n    return anatomy(name, map);\n  }\n  function selectors() {\n    var value = Object.fromEntries(Object.entries(map).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        part = _ref2[1];\n      return [key, part.selector];\n    }));\n    return value;\n  }\n  function classnames() {\n    var value = Object.fromEntries(Object.entries(map).map(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n        key = _ref4[0],\n        part = _ref4[1];\n      return [key, part.className];\n    }));\n    return value;\n  }\n  function toPart(part) {\n    var el = [\"container\", \"root\"].includes(part != null ? part : \"\") ? [name] : [name, part];\n    var attr = el.filter(Boolean).join(\"__\");\n    var className = \"chakra-\".concat(attr);\n    var partObj = {\n      className: className,\n      selector: \".\".concat(className),\n      toString: function toString() {\n        return part;\n      }\n    };\n    return partObj;\n  }\n  var __type = {};\n  return {\n    parts: parts,\n    toPart: toPart,\n    extend: extend,\n    selectors: selectors,\n    classnames: classnames,\n    get keys() {\n      return Object.keys(map);\n    },\n    __type: __type\n  };\n}\nexport { anatomy };","map":{"version":3,"names":["anatomy","name","map","arguments","length","undefined","called","assert","Error","parts","_len","values","Array","_key","_i","_values","part","toPart","extend","_len2","parts2","_key2","_i2","_parts","selectors","value","Object","fromEntries","entries","_ref","_ref2","_slicedToArray","key","selector","classnames","_ref3","_ref4","className","el","includes","attr","filter","Boolean","join","concat","partObj","toString","__type","keys"],"sources":["/Users/eyliu/Desktop/FitBuddy/node_modules/@chakra-ui/anatomy/src/anatomy.ts"],"sourcesContent":["/**\n * Used to define the anatomy/parts of a component in a way that provides\n * a consistent API for `className`, css selector and `theming`.\n */\nexport function anatomy<T extends string = string>(\n  name: string,\n  map = {} as Record<T, Part>,\n): Anatomy<T> {\n  let called = false\n\n  /**\n   * Prevents user from calling `.parts` multiple times.\n   * It should only be called once.\n   */\n  function assert() {\n    if (!called) {\n      called = true\n      return\n    }\n\n    throw new Error(\n      \"[anatomy] .part(...) should only be called once. Did you mean to use .extend(...) ?\",\n    )\n  }\n\n  /**\n   * Add the core parts of the components\n   */\n  function parts<V extends string>(...values: V[]) {\n    assert()\n    for (const part of values) {\n      ;(map as any)[part] = toPart(part)\n    }\n    return anatomy(name, map) as unknown as Omit<Anatomy<V>, \"parts\">\n  }\n\n  /**\n   * Extend the component anatomy to includes new parts\n   */\n  function extend<U extends string>(...parts: U[]) {\n    for (const part of parts) {\n      if (part in map) continue\n      ;(map as any)[part] = toPart(part)\n    }\n    return anatomy(name, map) as unknown as Omit<Anatomy<T | U>, \"parts\">\n  }\n\n  /**\n   * Get all selectors for the component anatomy\n   */\n  function selectors() {\n    const value = Object.fromEntries(\n      Object.entries(map).map(([key, part]) => [key, (part as any).selector]),\n    )\n    return value as Record<T, string>\n  }\n\n  /**\n   * Get all classNames for the component anatomy\n   */\n  function classnames() {\n    const value = Object.fromEntries(\n      Object.entries(map).map(([key, part]) => [key, (part as any).className]),\n    )\n    return value as Record<T, string>\n  }\n\n  /**\n   * Creates the part object for the given part\n   */\n  function toPart(part: string) {\n    const el = [\"container\", \"root\"].includes(part ?? \"\")\n      ? [name]\n      : [name, part]\n    const attr = el.filter(Boolean).join(\"__\")\n    const className = `chakra-${attr}`\n\n    const partObj = {\n      className,\n      selector: `.${className}`,\n      toString: () => part,\n    }\n\n    return partObj as typeof partObj & string\n  }\n\n  /**\n   * Used to get the derived type of the anatomy\n   */\n  const __type = {} as T\n\n  return {\n    parts,\n    toPart,\n    extend,\n    selectors,\n    classnames,\n    get keys(): T[] {\n      return Object.keys(map) as T[]\n    },\n    __type,\n  }\n}\n\ntype Part = {\n  className: string\n  selector: string\n  toString: () => string\n}\n\ntype Anatomy<T extends string> = {\n  parts: <V extends string>(...values: V[]) => Omit<Anatomy<V>, \"parts\">\n  toPart: (part: string) => Part\n  extend: <U extends string>(...parts: U[]) => Omit<Anatomy<T | U>, \"parts\">\n  selectors: () => Record<T, string>\n  classnames: () => Record<T, string>\n  keys: T[]\n  __type: T\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}