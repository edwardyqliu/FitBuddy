{"ast":null,"code":"'use client';\n\n// src/use-checkbox-group.ts\nimport _defineProperty from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\";\nimport { isObject } from \"@chakra-ui/shared-utils\";\nimport { useCallback } from \"react\";\nfunction isInputEvent(value) {\n  return value && isObject(value) && isObject(value.target);\n}\nfunction useCheckboxGroup() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var defaultValue = props.defaultValue,\n    valueProp = props.value,\n    onChange = props.onChange,\n    isDisabled = props.isDisabled,\n    isNative = props.isNative;\n  var onChangeProp = useCallbackRef(onChange);\n  var _useControllableState = useControllableState({\n      value: valueProp,\n      defaultValue: defaultValue || [],\n      onChange: onChangeProp\n    }),\n    _useControllableState2 = _slicedToArray(_useControllableState, 2),\n    value = _useControllableState2[0],\n    setValue = _useControllableState2[1];\n  var handleChange = useCallback(function (eventOrValue) {\n    if (!value) return;\n    var isChecked = isInputEvent(eventOrValue) ? eventOrValue.target.checked : !value.includes(eventOrValue);\n    var selectedValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n    var nextValue = isChecked ? [].concat(_toConsumableArray(value), [selectedValue]) : value.filter(function (v) {\n      return String(v) !== String(selectedValue);\n    });\n    setValue(nextValue);\n  }, [setValue, value]);\n  var getCheckboxProps = useCallback(function () {\n    var _objectSpread2;\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var checkedKey = isNative ? \"checked\" : \"isChecked\";\n    return _objectSpread(_objectSpread({}, props2), {}, (_objectSpread2 = {}, _defineProperty(_objectSpread2, checkedKey, value.some(function (val) {\n      return String(props2.value) === String(val);\n    })), _defineProperty(_objectSpread2, \"onChange\", handleChange), _objectSpread2));\n  }, [handleChange, isNative, value]);\n  return {\n    value: value,\n    isDisabled: isDisabled,\n    onChange: handleChange,\n    setValue: setValue,\n    getCheckboxProps: getCheckboxProps\n  };\n}\nexport { useCheckboxGroup };","map":{"version":3,"names":["useCallbackRef","useControllableState","isObject","useCallback","isInputEvent","value","target","useCheckboxGroup","props","arguments","length","undefined","defaultValue","valueProp","onChange","isDisabled","isNative","onChangeProp","_useControllableState","_useControllableState2","_slicedToArray","setValue","handleChange","eventOrValue","isChecked","checked","includes","selectedValue","nextValue","concat","_toConsumableArray","filter","v","String","getCheckboxProps","_objectSpread2","props2","checkedKey","_objectSpread","_defineProperty","some","val"],"sources":["/Users/eyliu/Desktop/FitBuddy/node_modules/@chakra-ui/checkbox/src/use-checkbox-group.ts"],"sourcesContent":["import { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\"\nimport { isObject } from \"@chakra-ui/shared-utils\"\nimport { useCallback } from \"react\"\nimport { EventOrValue, UseCheckboxGroupProps } from \"./checkbox-types\"\n\nfunction isInputEvent(value: any): value is { target: HTMLInputElement } {\n  return value && isObject(value) && isObject(value.target)\n}\n\n/**\n * React hook that provides all the state management logic\n * for a group of checkboxes.\n *\n * It is consumed by the `CheckboxGroup` component\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-checkbox-group\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/checkbox/\n */\nexport function useCheckboxGroup(props: UseCheckboxGroupProps = {}) {\n  const {\n    defaultValue,\n    value: valueProp,\n    onChange,\n    isDisabled,\n    isNative,\n  } = props\n\n  const onChangeProp = useCallbackRef(onChange)\n\n  const [value, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue || [],\n    onChange: onChangeProp,\n  })\n\n  const handleChange = useCallback(\n    (eventOrValue: EventOrValue) => {\n      if (!value) return\n\n      const isChecked = isInputEvent(eventOrValue)\n        ? eventOrValue.target.checked\n        : !value.includes(eventOrValue)\n\n      const selectedValue = isInputEvent(eventOrValue)\n        ? eventOrValue.target.value\n        : eventOrValue\n\n      const nextValue = isChecked\n        ? [...value, selectedValue]\n        : value.filter((v) => String(v) !== String(selectedValue))\n\n      setValue(nextValue)\n    },\n    [setValue, value],\n  )\n\n  const getCheckboxProps = useCallback(\n    (props: Record<string, any> = {}) => {\n      const checkedKey = isNative ? \"checked\" : \"isChecked\"\n      return {\n        ...props,\n        [checkedKey]: value.some((val) => String(props.value) === String(val)),\n        onChange: handleChange,\n      }\n    },\n    [handleChange, isNative, value],\n  )\n\n  return {\n    value,\n    isDisabled,\n    onChange: handleChange,\n    setValue,\n    getCheckboxProps,\n  }\n}\n\nexport type UseCheckboxGroupReturn = ReturnType<typeof useCheckboxGroup>\n"],"mappings":";;;;;;;AAAA,SAASA,cAAA,QAAsB;AAC/B,SAASC,oBAAA,QAA4B;AACrC,SAASC,QAAA,QAAgB;AACzB,SAASC,WAAA,QAAmB;AAG5B,SAASC,aAAaC,KAAA,EAAmD;EACvE,OAAOA,KAAA,IAASH,QAAA,CAASG,KAAK,KAAKH,QAAA,CAASG,KAAA,CAAMC,MAAM;AAC1D;AAWO,SAASC,iBAAA,EAAoD;EAAA,IAAnCC,KAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA+B,CAAC;EAC/D,IACEG,YAAA,GAKEJ,KAAA,CALFI,YAAA;IACOC,SAAA,GAILL,KAAA,CAJFH,KAAA;IACAS,QAAA,GAGEN,KAAA,CAHFM,QAAA;IACAC,UAAA,GAEEP,KAAA,CAFFO,UAAA;IACAC,QAAA,GACER,KAAA,CADFQ,QAAA;EAGF,IAAMC,YAAA,GAAejB,cAAA,CAAec,QAAQ;EAE5C,IAAAI,qBAAA,GAA0BjB,oBAAA,CAAqB;MAC7CI,KAAA,EAAOQ,SAAA;MACPD,YAAA,EAAcA,YAAA,IAAgB,EAAC;MAC/BE,QAAA,EAAUG;IACZ,CAAC;IAAAE,sBAAA,GAAAC,cAAA,CAAAF,qBAAA;IAJMb,KAAA,GAAAc,sBAAA;IAAOE,QAAQ,GAAAF,sBAAA;EAMtB,IAAMG,YAAA,GAAenB,WAAA,CACnB,UAACoB,YAAA,EAA+B;IAC9B,IAAI,CAAClB,KAAA,EAAO;IAEZ,IAAMmB,SAAA,GAAYpB,YAAA,CAAamB,YAAY,IACvCA,YAAA,CAAajB,MAAA,CAAOmB,OAAA,GACpB,CAACpB,KAAA,CAAMqB,QAAA,CAASH,YAAY;IAEhC,IAAMI,aAAA,GAAgBvB,YAAA,CAAamB,YAAY,IAC3CA,YAAA,CAAajB,MAAA,CAAOD,KAAA,GACpBkB,YAAA;IAEJ,IAAMK,SAAA,GAAYJ,SAAA,MAAAK,MAAA,CAAAC,kBAAA,CACVzB,KAAA,IAAOsB,aAAa,KACxBtB,KAAA,CAAM0B,MAAA,CAAO,UAACC,CAAA;MAAA,OAAMC,MAAA,CAAOD,CAAC,MAAMC,MAAA,CAAON,aAAa,CAAC;IAAA;IAE3DN,QAAA,CAASO,SAAS;EACpB,GACA,CAACP,QAAA,EAAUhB,KAAK,CAClB;EAEA,IAAM6B,gBAAA,GAAmB/B,WAAA,CACvB,YAAqC;IAAA,IAAAgC,cAAA;IAAA,IAApCC,MAAA,GAAA3B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA6B,CAAC;IAC7B,IAAM4B,UAAA,GAAarB,QAAA,GAAW,YAAY;IAC1C,OAAAsB,aAAA,CAAAA,aAAA,KACKF,MAAA,QAAAD,cAAA,OAAAI,eAAA,CAAAJ,cAAA,EACFE,UAAU,EAAGhC,KAAA,CAAMmC,IAAA,CAAK,UAACC,GAAA;MAAA,OAAQR,MAAA,CAAOG,MAAA,CAAM/B,KAAK,MAAM4B,MAAA,CAAOQ,GAAG,CAAC;IAAA,KAAAF,eAAA,CAAAJ,cAAA,cAC3Db,YAAA,GAAAa,cAAA;EAEd,GACA,CAACb,YAAA,EAAcN,QAAA,EAAUX,KAAK,CAChC;EAEA,OAAO;IACLA,KAAA,EAAAA,KAAA;IACAU,UAAA,EAAAA,UAAA;IACAD,QAAA,EAAUQ,YAAA;IACVD,QAAA,EAAAA,QAAA;IACAa,gBAAA,EAAAA;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}