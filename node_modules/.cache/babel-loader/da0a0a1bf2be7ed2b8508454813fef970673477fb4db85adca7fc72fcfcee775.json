{"ast":null,"code":"'use client';\n\n// src/use-spinner.ts\nimport _slicedToArray from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useInterval } from \"@chakra-ui/react-use-interval\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nvar CONTINUOUS_CHANGE_INTERVAL = 50;\nvar CONTINUOUS_CHANGE_DELAY = 300;\nfunction useSpinner(increment, decrement) {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isSpinning = _useState2[0],\n    setIsSpinning = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    action = _useState4[0],\n    setAction = _useState4[1];\n  var _useState5 = useState(true),\n    _useState6 = _slicedToArray(_useState5, 2),\n    runOnce = _useState6[0],\n    setRunOnce = _useState6[1];\n  var timeoutRef = useRef(null);\n  var removeTimeout = function removeTimeout() {\n    return clearTimeout(timeoutRef.current);\n  };\n  useInterval(function () {\n    if (action === \"increment\") {\n      increment();\n    }\n    if (action === \"decrement\") {\n      decrement();\n    }\n  }, isSpinning ? CONTINUOUS_CHANGE_INTERVAL : null);\n  var up = useCallback(function () {\n    if (runOnce) {\n      increment();\n    }\n    timeoutRef.current = setTimeout(function () {\n      setRunOnce(false);\n      setIsSpinning(true);\n      setAction(\"increment\");\n    }, CONTINUOUS_CHANGE_DELAY);\n  }, [increment, runOnce]);\n  var down = useCallback(function () {\n    if (runOnce) {\n      decrement();\n    }\n    timeoutRef.current = setTimeout(function () {\n      setRunOnce(false);\n      setIsSpinning(true);\n      setAction(\"decrement\");\n    }, CONTINUOUS_CHANGE_DELAY);\n  }, [decrement, runOnce]);\n  var stop = useCallback(function () {\n    setRunOnce(true);\n    setIsSpinning(false);\n    removeTimeout();\n  }, []);\n  useEffect(function () {\n    return function () {\n      return removeTimeout();\n    };\n  }, []);\n  return {\n    up: up,\n    down: down,\n    stop: stop,\n    isSpinning: isSpinning\n  };\n}\nexport { useSpinner };","map":{"version":3,"names":["useInterval","useCallback","useEffect","useRef","useState","CONTINUOUS_CHANGE_INTERVAL","CONTINUOUS_CHANGE_DELAY","useSpinner","increment","decrement","_useState","_useState2","_slicedToArray","isSpinning","setIsSpinning","_useState3","_useState4","action","setAction","_useState5","_useState6","runOnce","setRunOnce","timeoutRef","removeTimeout","clearTimeout","current","up","setTimeout","down","stop"],"sources":["/Users/eyliu/Desktop/FitBuddy/node_modules/@chakra-ui/number-input/src/use-spinner.ts"],"sourcesContent":["import { useInterval } from \"@chakra-ui/react-use-interval\"\nimport { useCallback, useEffect, useRef, useState } from \"react\"\n\n/**\n * When click and hold on a button - the speed of auto changing the value.\n */\nconst CONTINUOUS_CHANGE_INTERVAL = 50\n\n/**\n * When click and hold on a button - the delay before auto changing the value.\n */\nconst CONTINUOUS_CHANGE_DELAY = 300\n\ntype Action = \"increment\" | \"decrement\"\n\n/**\n * React hook used in the number input to spin its\n * value on long press of the spin buttons\n *\n * @param increment the function to increment\n * @param decrement the function to decrement\n */\nexport function useSpinner(increment: Function, decrement: Function) {\n  /**\n   * To keep incrementing/decrementing on press, we call that `spinning`\n   */\n  const [isSpinning, setIsSpinning] = useState(false)\n\n  // This state keeps track of the action (\"increment\" or \"decrement\")\n  const [action, setAction] = useState<Action | null>(null)\n\n  // To increment the value the first time you mousedown, we call that `runOnce`\n  const [runOnce, setRunOnce] = useState(true)\n\n  // Store the timeout instance id in a ref, so we can clear the timeout later\n  const timeoutRef = useRef<any>(null)\n\n  // Clears the timeout from memory\n  const removeTimeout = () => clearTimeout(timeoutRef.current)\n\n  /**\n   * useInterval hook provides a performant way to\n   * update the state value at specific interval\n   */\n  useInterval(\n    () => {\n      if (action === \"increment\") {\n        increment()\n      }\n      if (action === \"decrement\") {\n        decrement()\n      }\n    },\n    isSpinning ? CONTINUOUS_CHANGE_INTERVAL : null,\n  )\n\n  // Function to activate the spinning and increment the value\n  const up = useCallback(() => {\n    // increment the first time\n    if (runOnce) {\n      increment()\n    }\n\n    // after a delay, keep incrementing at interval (\"spinning up\")\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false)\n      setIsSpinning(true)\n      setAction(\"increment\")\n    }, CONTINUOUS_CHANGE_DELAY)\n  }, [increment, runOnce])\n\n  // Function to activate the spinning and increment the value\n  const down = useCallback(() => {\n    // decrement the first time\n    if (runOnce) {\n      decrement()\n    }\n\n    // after a delay, keep decrementing at interval (\"spinning down\")\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false)\n      setIsSpinning(true)\n      setAction(\"decrement\")\n    }, CONTINUOUS_CHANGE_DELAY)\n  }, [decrement, runOnce])\n\n  // Function to stop spinning (useful for mouseup, keyup handlers)\n  const stop = useCallback(() => {\n    setRunOnce(true)\n    setIsSpinning(false)\n    removeTimeout()\n  }, [])\n\n  /**\n   * If the component unmounts while spinning,\n   * let's clear the timeout as well\n   */\n  useEffect(() => {\n    return () => removeTimeout()\n  }, [])\n\n  return { up, down, stop, isSpinning }\n}\n"],"mappings":";;;;AAAA,SAASA,WAAA,QAAmB;AAC5B,SAASC,WAAA,EAAaC,SAAA,EAAWC,MAAA,EAAQC,QAAA,QAAgB;AAKzD,IAAMC,0BAAA,GAA6B;AAKnC,IAAMC,uBAAA,GAA0B;AAWzB,SAASC,WAAWC,SAAA,EAAqBC,SAAA,EAAqB;EAInE,IAAAC,SAAA,GAAoCN,QAAA,CAAS,KAAK;IAAAO,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA3CG,UAAA,GAAAF,UAAA;IAAYG,aAAa,GAAAH,UAAA;EAGhC,IAAAI,UAAA,GAA4BX,QAAA,CAAwB,IAAI;IAAAY,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAjDE,MAAA,GAAAD,UAAA;IAAQE,SAAS,GAAAF,UAAA;EAGxB,IAAAG,UAAA,GAA8Bf,QAAA,CAAS,IAAI;IAAAgB,UAAA,GAAAR,cAAA,CAAAO,UAAA;IAApCE,OAAA,GAAAD,UAAA;IAASE,UAAU,GAAAF,UAAA;EAG1B,IAAMG,UAAA,GAAapB,MAAA,CAAY,IAAI;EAGnC,IAAMqB,aAAA,GAAgB,SAAhBA,cAAA;IAAA,OAAsBC,YAAA,CAAaF,UAAA,CAAWG,OAAO;EAAA;EAM3D1B,WAAA,CACE,YAAM;IACJ,IAAIiB,MAAA,KAAW,aAAa;MAC1BT,SAAA,CAAU;IACZ;IACA,IAAIS,MAAA,KAAW,aAAa;MAC1BR,SAAA,CAAU;IACZ;EACF,GACAI,UAAA,GAAaR,0BAAA,GAA6B,IAC5C;EAGA,IAAMsB,EAAA,GAAK1B,WAAA,CAAY,YAAM;IAE3B,IAAIoB,OAAA,EAAS;MACXb,SAAA,CAAU;IACZ;IAGAe,UAAA,CAAWG,OAAA,GAAUE,UAAA,CAAW,YAAM;MACpCN,UAAA,CAAW,KAAK;MAChBR,aAAA,CAAc,IAAI;MAClBI,SAAA,CAAU,WAAW;IACvB,GAAGZ,uBAAuB;EAC5B,GAAG,CAACE,SAAA,EAAWa,OAAO,CAAC;EAGvB,IAAMQ,IAAA,GAAO5B,WAAA,CAAY,YAAM;IAE7B,IAAIoB,OAAA,EAAS;MACXZ,SAAA,CAAU;IACZ;IAGAc,UAAA,CAAWG,OAAA,GAAUE,UAAA,CAAW,YAAM;MACpCN,UAAA,CAAW,KAAK;MAChBR,aAAA,CAAc,IAAI;MAClBI,SAAA,CAAU,WAAW;IACvB,GAAGZ,uBAAuB;EAC5B,GAAG,CAACG,SAAA,EAAWY,OAAO,CAAC;EAGvB,IAAMS,IAAA,GAAO7B,WAAA,CAAY,YAAM;IAC7BqB,UAAA,CAAW,IAAI;IACfR,aAAA,CAAc,KAAK;IACnBU,aAAA,CAAc;EAChB,GAAG,EAAE;EAMLtB,SAAA,CAAU,YAAM;IACd,OAAO;MAAA,OAAMsB,aAAA,CAAc;IAAA;EAC7B,GAAG,EAAE;EAEL,OAAO;IAAEG,EAAA,EAAAA,EAAA;IAAIE,IAAA,EAAAA,IAAA;IAAMC,IAAA,EAAAA,IAAA;IAAMjB,UAAA,EAAAA;EAAW;AACtC"},"metadata":{},"sourceType":"module","externalDependencies":[]}