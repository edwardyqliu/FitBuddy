{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"children\", \"borderColor\", \"max\", \"spacing\", \"borderRadius\"];\nimport { baseStyle } from \"./chunk-V7PAE35Z.mjs\";\n\n// src/avatar-group.tsx\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\";\n\n// ../../utilities/object-utils/src/compact.ts\nfunction compact(object) {\n  var clone = Object.assign({}, object);\n  for (var key in clone) {\n    if (clone[key] === void 0) delete clone[key];\n  }\n  return clone;\n}\n\n// src/avatar-group.tsx\nimport { cloneElement } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar AvatarGroup = forwardRef(function AvatarGroup2(props, ref) {\n  var styles = useMultiStyleConfig(\"Avatar\", props);\n  var _omitThemingProps = omitThemingProps(props),\n    children = _omitThemingProps.children,\n    borderColor = _omitThemingProps.borderColor,\n    max = _omitThemingProps.max,\n    _omitThemingProps$spa = _omitThemingProps.spacing,\n    spacing = _omitThemingProps$spa === void 0 ? \"-0.75rem\" : _omitThemingProps$spa,\n    _omitThemingProps$bor = _omitThemingProps.borderRadius,\n    borderRadius = _omitThemingProps$bor === void 0 ? \"full\" : _omitThemingProps$bor,\n    rest = _objectWithoutProperties(_omitThemingProps, _excluded);\n  var validChildren = getValidChildren(children);\n  var childrenWithinMax = max != null ? validChildren.slice(0, max) : validChildren;\n  var excess = max != null ? validChildren.length - max : 0;\n  var reversedChildren = childrenWithinMax.reverse();\n  var clones = reversedChildren.map(function (child, index) {\n    var _a;\n    var isFirstAvatar = index === 0;\n    var childProps = {\n      marginEnd: isFirstAvatar ? 0 : spacing,\n      size: props.size,\n      borderColor: (_a = child.props.borderColor) != null ? _a : borderColor,\n      showBorder: true\n    };\n    return cloneElement(child, compact(childProps));\n  });\n  var groupStyles = _objectSpread({\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    flexDirection: \"row-reverse\"\n  }, styles.group);\n  var excessStyles = _objectSpread(_objectSpread({\n    borderRadius: borderRadius,\n    marginStart: spacing\n  }, baseStyle), styles.excessLabel);\n  return /* @__PURE__ */jsxs(chakra.div, _objectSpread(_objectSpread({\n    ref: ref,\n    role: \"group\",\n    __css: groupStyles\n  }, rest), {}, {\n    className: cx(\"chakra-avatar__group\", props.className),\n    children: [excess > 0 && /* @__PURE__ */jsx(chakra.span, {\n      className: \"chakra-avatar__excess\",\n      __css: excessStyles,\n      children: \"+\".concat(excess)\n    }), clones]\n  }));\n});\nAvatarGroup.displayName = \"AvatarGroup\";\nexport { AvatarGroup };","map":{"version":3,"names":["chakra","forwardRef","omitThemingProps","useMultiStyleConfig","cx","getValidChildren","compact","object","clone","Object","assign","key","cloneElement","jsx","jsxs","AvatarGroup","AvatarGroup2","props","ref","styles","_omitThemingProps","children","borderColor","max","_omitThemingProps$spa","spacing","_omitThemingProps$bor","borderRadius","rest","_objectWithoutProperties","_excluded","validChildren","childrenWithinMax","slice","excess","length","reversedChildren","reverse","clones","map","child","index","_a","isFirstAvatar","childProps","marginEnd","size","showBorder","groupStyles","_objectSpread","display","alignItems","justifyContent","flexDirection","group","excessStyles","marginStart","baseStyle","excessLabel","div","role","__css","className","span","concat","displayName"],"sources":["/Users/eyliu/Desktop/FitBuddy/node_modules/@chakra-ui/avatar/src/avatar-group.tsx","/Users/eyliu/Desktop/FitBuddy/node_modules/utilities/object-utils/src/compact.ts"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\nimport { baseStyle } from \"./avatar\"\nimport { cloneElement } from \"react\"\n\ninterface AvatarGroupOptions {\n  /**\n   * The children of the avatar group.\n   *\n   * Ideally should be `Avatar` and `MoreIndicator` components\n   */\n  children: React.ReactNode\n  /**\n   * The space between the avatars in the group.\n   * @default \"-0.75rem\"\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The maximum number of visible avatars\n   */\n  max?: number\n}\n\nexport interface AvatarGroupProps\n  extends AvatarGroupOptions,\n    Omit<HTMLChakraProps<\"div\">, \"children\">,\n    ThemingProps<\"Avatar\"> {}\n\n/**\n * AvatarGroup displays a number of avatars grouped together in a stack.\n */\nexport const AvatarGroup = forwardRef<AvatarGroupProps, \"div\">(\n  function AvatarGroup(props, ref) {\n    const styles = useMultiStyleConfig(\"Avatar\", props)\n\n    const {\n      children,\n      borderColor,\n      max,\n      spacing = \"-0.75rem\",\n      borderRadius = \"full\",\n      ...rest\n    } = omitThemingProps(props)\n\n    const validChildren = getValidChildren(children)\n\n    /**\n     * get the avatars within the max\n     */\n    const childrenWithinMax =\n      max != null ? validChildren.slice(0, max) : validChildren\n\n    /**\n     * get the remaining avatar count\n     */\n    const excess = max != null ? validChildren.length - max : 0\n\n    /**\n     * Reversing the children is a great way to avoid using zIndex\n     * to overlap the avatars\n     */\n    const reversedChildren = childrenWithinMax.reverse()\n\n    const clones = reversedChildren.map((child, index) => {\n      const isFirstAvatar = index === 0\n\n      const childProps = {\n        marginEnd: isFirstAvatar ? 0 : spacing,\n        size: props.size,\n        borderColor: child.props.borderColor ?? borderColor,\n        showBorder: true,\n      }\n\n      return cloneElement(child, compact(childProps))\n    })\n\n    const groupStyles: SystemStyleObject = {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-end\",\n      flexDirection: \"row-reverse\",\n      ...styles.group,\n    }\n\n    const excessStyles: SystemStyleObject = {\n      borderRadius,\n      marginStart: spacing,\n      ...baseStyle,\n      ...styles.excessLabel,\n    }\n\n    return (\n      <chakra.div\n        ref={ref}\n        role=\"group\"\n        __css={groupStyles}\n        {...rest}\n        className={cx(\"chakra-avatar__group\", props.className)}\n      >\n        {excess > 0 && (\n          <chakra.span className=\"chakra-avatar__excess\" __css={excessStyles}>\n            {`+${excess}`}\n          </chakra.span>\n        )}\n        {clones}\n      </chakra.div>\n    )\n  },\n)\n\nAvatarGroup.displayName = \"AvatarGroup\"\n","export function compact<T extends Record<any, any>>(object: T) {\n  const clone = Object.assign({}, object)\n  for (let key in clone) {\n    if (clone[key] === undefined) delete clone[key]\n  }\n  return clone\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}