{"ast":null,"code":"'use client';\n\n// src/providers.tsx\nimport _slicedToArray from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _defineProperty from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { useColorMode } from \"@chakra-ui/color-mode\";\nimport { createContext } from \"@chakra-ui/react-utils\";\nimport { css, toCSSVar } from \"@chakra-ui/styled-system\";\nimport { memoizedGet as get, runIfFn } from \"@chakra-ui/utils\";\nimport { Global, ThemeProvider as EmotionThemeProvider } from \"@emotion/react\";\nimport { useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nfunction ThemeProvider(props) {\n  var cssVarsRoot = props.cssVarsRoot,\n    theme = props.theme,\n    children = props.children;\n  var computedTheme = useMemo(function () {\n    return toCSSVar(theme);\n  }, [theme]);\n  return /* @__PURE__ */jsxs(EmotionThemeProvider, {\n    theme: computedTheme,\n    children: [/* @__PURE__ */jsx(CSSVars, {\n      root: cssVarsRoot\n    }), children]\n  });\n}\nfunction CSSVars(_ref) {\n  var _ref$root = _ref.root,\n    root = _ref$root === void 0 ? \":host, :root\" : _ref$root;\n  var selector = [root, \"[data-theme]\"].join(\",\");\n  return /* @__PURE__ */jsx(Global, {\n    styles: function styles(theme) {\n      return _defineProperty({}, selector, theme.__cssVars);\n    }\n  });\n}\nvar _createContext = createContext({\n    name: \"StylesContext\",\n    errorMessage: \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \"\n  }),\n  _createContext2 = _slicedToArray(_createContext, 2),\n  StylesProvider = _createContext2[0],\n  useStyles = _createContext2[1];\nfunction createStylesContext(componentName) {\n  return createContext({\n    name: \"\".concat(componentName, \"StylesContext\"),\n    errorMessage: \"useStyles: \\\"styles\\\" is undefined. Seems you forgot to wrap the components in \\\"<\".concat(componentName, \" />\\\" \")\n  });\n}\nfunction GlobalStyle() {\n  var _useColorMode = useColorMode(),\n    colorMode = _useColorMode.colorMode;\n  return /* @__PURE__ */jsx(Global, {\n    styles: function styles(theme) {\n      var styleObjectOrFn = get(theme, \"styles.global\");\n      var globalStyles = runIfFn(styleObjectOrFn, {\n        theme: theme,\n        colorMode: colorMode\n      });\n      if (!globalStyles) return void 0;\n      var styles = css(globalStyles)(theme);\n      return styles;\n    }\n  });\n}\nexport { ThemeProvider, CSSVars, StylesProvider, useStyles, createStylesContext, GlobalStyle };","map":{"version":3,"names":["useColorMode","createContext","css","toCSSVar","memoizedGet","get","runIfFn","Global","ThemeProvider","EmotionThemeProvider","useMemo","jsx","jsxs","props","cssVarsRoot","theme","children","computedTheme","CSSVars","root","_ref","_ref$root","selector","join","styles","_defineProperty","__cssVars","_createContext","name","errorMessage","_createContext2","_slicedToArray","StylesProvider","useStyles","createStylesContext","componentName","concat","GlobalStyle","_useColorMode","colorMode","styleObjectOrFn","globalStyles"],"sources":["/Users/eyliu/Desktop/FitBuddy/node_modules/@chakra-ui/system/src/providers.tsx"],"sourcesContent":["import { useColorMode } from \"@chakra-ui/color-mode\"\nimport { createContext, CreateContextReturn } from \"@chakra-ui/react-utils\"\nimport { css, toCSSVar, SystemStyleObject } from \"@chakra-ui/styled-system\"\nimport { memoizedGet as get, runIfFn } from \"@chakra-ui/utils\"\nimport {\n  Global,\n  Interpolation,\n  ThemeProvider as EmotionThemeProvider,\n  ThemeProviderProps as EmotionThemeProviderProps,\n} from \"@emotion/react\"\nimport { useMemo } from \"react\"\n\nexport interface ThemeProviderProps extends EmotionThemeProviderProps {\n  cssVarsRoot?: string\n}\n\nexport function ThemeProvider(props: ThemeProviderProps): JSX.Element {\n  const { cssVarsRoot, theme, children } = props\n  const computedTheme = useMemo(() => toCSSVar(theme), [theme])\n  return (\n    <EmotionThemeProvider theme={computedTheme}>\n      <CSSVars root={cssVarsRoot} />\n      {children}\n    </EmotionThemeProvider>\n  )\n}\n\nexport interface CSSVarsProps {\n  /**\n   * The element to attach the CSS custom properties to.\n   * @default \":host, :root\"\n   */\n  root?: string\n}\n\nexport function CSSVars({ root = \":host, :root\" }: CSSVarsProps): JSX.Element {\n  /**\n   * Append color mode selector to allow semantic tokens to change according to the color mode\n   */\n  const selector = [root, `[data-theme]`].join(\",\")\n  return <Global styles={(theme: any) => ({ [selector]: theme.__cssVars })} />\n}\n\n/**\n * @deprecated - Prefer to use `createStylesContext` to provide better error messages\n *\n * @example\n *\n * ```jsx\n * import { createStylesContext } from \"@chakra-ui/react\"\n *\n * const [StylesProvider, useStyles] = createStylesContext(\"Component\")\n * ```\n */\nconst [StylesProvider, useStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: \"StylesContext\",\n  errorMessage:\n    \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \",\n})\n\nexport { StylesProvider, useStyles }\n\n/**\n * Helper function that creates context with a standardized errorMessage related to the component\n * @param componentName\n * @returns [StylesProvider, useStyles]\n */\nexport function createStylesContext(\n  componentName: string,\n): CreateStyleContextReturn {\n  return createContext<Record<string, SystemStyleObject>>({\n    name: `${componentName}StylesContext`,\n    errorMessage: `useStyles: \"styles\" is undefined. Seems you forgot to wrap the components in \"<${componentName} />\" `,\n  })\n}\n\nexport type CreateStyleContextReturn = CreateContextReturn<\n  Record<string, SystemStyleObject>\n>\n\n/**\n * Applies styles defined in `theme.styles.global` globally\n * using emotion's `Global` component\n */\nexport function GlobalStyle(): JSX.Element {\n  const { colorMode } = useColorMode()\n  return (\n    <Global\n      styles={(theme: any) => {\n        const styleObjectOrFn = get(theme, \"styles.global\")\n        const globalStyles = runIfFn(styleObjectOrFn, { theme, colorMode })\n        if (!globalStyles) return undefined\n        const styles = css(globalStyles)(theme)\n        return styles as Interpolation<{}>\n      }}\n    />\n  )\n}\n"],"mappings":";;;;;AAAA,SAASA,YAAA,QAAoB;AAC7B,SAASC,aAAA,QAA0C;AACnD,SAASC,GAAA,EAAKC,QAAA,QAAmC;AACjD,SAASC,WAAA,IAAeC,GAAA,EAAKC,OAAA,QAAe;AAC5C,SACEC,MAAA,EAEAC,aAAA,IAAiBC,oBAAA,QAEZ;AACP,SAASC,OAAA,QAAe;AAUpB,SACEC,GAAA,EADFC,IAAA;AAJG,SAASJ,cAAcK,KAAA,EAAwC;EACpE,IAAQC,WAAA,GAAiCD,KAAA,CAAjCC,WAAA;IAAaC,KAAA,GAAoBF,KAAA,CAApBE,KAAA;IAAOC,QAAA,GAAaH,KAAA,CAAbG,QAAA;EAC5B,IAAMC,aAAA,GAAgBP,OAAA,CAAQ;IAAA,OAAMP,QAAA,CAASY,KAAK;EAAA,GAAG,CAACA,KAAK,CAAC;EAC5D,OACE,eAAAH,IAAA,CAACH,oBAAA;IAAqBM,KAAA,EAAOE,aAAA;IAC3BD,QAAA,kBAAAL,GAAA,CAACO,OAAA;MAAQC,IAAA,EAAML;IAAA,CAAa,GAC3BE,QAAA;EAAA,CACH;AAEJ;AAUO,SAASE,QAAAE,IAAA,EAA8D;EAAA,IAAAC,SAAA,GAAAD,IAAA,CAApDD,IAAA;IAAAA,IAAA,GAAAE,SAAA,cAAO,iBAAAA,SAAA;EAI/B,IAAMC,QAAA,GAAW,CAACH,IAAA,iBAAoB,CAAEI,IAAA,CAAK,GAAG;EAChD,OAAO,eAAAZ,GAAA,CAACJ,MAAA;IAAOiB,MAAA,EAAQ,SAAAA,OAACT,KAAA;MAAA,OAAAU,eAAA,KAAmBH,QAAQ,EAAGP,KAAA,CAAMW,SAAA;IAAA;EAAU,CAAI;AAC5E;AAaA,IAAAC,cAAA,GAAoC1B,aAAA,CAElC;IACA2B,IAAA,EAAM;IACNC,YAAA,EACE;EACJ,CAAC;EAAAC,eAAA,GAAAC,cAAA,CAAAJ,cAAA;EANMK,cAAA,GAAAF,eAAA;EAAgBG,SAAS,GAAAH,eAAA;AAezB,SAASI,oBACdC,aAAA,EAC0B;EAC1B,OAAOlC,aAAA,CAAiD;IACtD2B,IAAA,KAAAQ,MAAA,CAASD,aAAa;IACtBN,YAAA,uFAAAO,MAAA,CAAgGD,aAAa;EAC/G,CAAC;AACH;AAUO,SAASE,YAAA,EAA2B;EACzC,IAAAC,aAAA,GAAsBtC,YAAA,CAAa;IAA3BuC,SAAA,GAAAD,aAAA,CAAAC,SAAA;EACR,OACE,eAAA5B,GAAA,CAACJ,MAAA;IACCiB,MAAA,EAAQ,SAAAA,OAACT,KAAA,EAAe;MACtB,IAAMyB,eAAA,GAAkBnC,GAAA,CAAIU,KAAA,EAAO,eAAe;MAClD,IAAM0B,YAAA,GAAenC,OAAA,CAAQkC,eAAA,EAAiB;QAAEzB,KAAA,EAAAA,KAAA;QAAOwB,SAAA,EAAAA;MAAU,CAAC;MAClE,IAAI,CAACE,YAAA,EAAc,OAAO;MAC1B,IAAMjB,MAAA,GAAStB,GAAA,CAAIuC,YAAY,EAAE1B,KAAK;MACtC,OAAOS,MAAA;IACT;EAAA,CACF;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}