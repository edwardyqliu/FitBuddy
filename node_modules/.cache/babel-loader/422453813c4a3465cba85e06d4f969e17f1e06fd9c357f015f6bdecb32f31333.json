{"ast":null,"code":"'use client';\n\n// src/index.ts\nimport _objectSpread from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { useCallback, useState, useId } from \"react\";\nfunction useDisclosure() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var onCloseProp = props.onClose,\n    onOpenProp = props.onOpen,\n    isOpenProp = props.isOpen,\n    idProp = props.id;\n  var handleOpen = useCallbackRef(onOpenProp);\n  var handleClose = useCallbackRef(onCloseProp);\n  var _useState = useState(props.defaultIsOpen || false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isOpenState = _useState2[0],\n    setIsOpen = _useState2[1];\n  var isOpen = isOpenProp !== void 0 ? isOpenProp : isOpenState;\n  var isControlled = isOpenProp !== void 0;\n  var uid = useId();\n  var id = idProp != null ? idProp : \"disclosure-\".concat(uid);\n  var onClose = useCallback(function () {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n    handleClose == null ? void 0 : handleClose();\n  }, [isControlled, handleClose]);\n  var onOpen = useCallback(function () {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n    handleOpen == null ? void 0 : handleOpen();\n  }, [isControlled, handleOpen]);\n  var onToggle = useCallback(function () {\n    if (isOpen) {\n      onClose();\n    } else {\n      onOpen();\n    }\n  }, [isOpen, onOpen, onClose]);\n  function getButtonProps() {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": id,\n      onClick: function onClick(event) {\n        var _a;\n        (_a = props2.onClick) == null ? void 0 : _a.call(props2, event);\n        onToggle();\n      }\n    });\n  }\n  function getDisclosureProps() {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      hidden: !isOpen,\n      id: id\n    });\n  }\n  return {\n    isOpen: isOpen,\n    onOpen: onOpen,\n    onClose: onClose,\n    onToggle: onToggle,\n    isControlled: isControlled,\n    getButtonProps: getButtonProps,\n    getDisclosureProps: getDisclosureProps\n  };\n}\nexport { useDisclosure };","map":{"version":3,"names":["useCallbackRef","useCallback","useState","useId","useDisclosure","props","arguments","length","undefined","onCloseProp","onClose","onOpenProp","onOpen","isOpenProp","isOpen","idProp","id","handleOpen","handleClose","_useState","defaultIsOpen","_useState2","_slicedToArray","isOpenState","setIsOpen","isControlled","uid","concat","onToggle","getButtonProps","props2","_objectSpread","onClick","event","_a","call","getDisclosureProps","hidden"],"sources":["/Users/eyliu/Desktop/FitBuddy/node_modules/@chakra-ui/react-use-disclosure/src/index.ts"],"sourcesContent":["import { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport React, { useCallback, useState, useId } from \"react\"\n\nexport interface UseDisclosureProps {\n  isOpen?: boolean\n  defaultIsOpen?: boolean\n  onClose?(): void\n  onOpen?(): void\n  id?: string\n}\n\ntype HTMLProps = React.HTMLAttributes<HTMLElement>\n\n/**\n * `useDisclosure` is a custom hook used to help handle common open, close, or toggle scenarios.\n * It can be used to control feedback component such as `Modal`, `AlertDialog`, `Drawer`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-disclosure\n */\nexport function useDisclosure(props: UseDisclosureProps = {}) {\n  const {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp,\n  } = props\n\n  const handleOpen = useCallbackRef(onOpenProp)\n  const handleClose = useCallbackRef(onCloseProp)\n\n  const [isOpenState, setIsOpen] = useState(props.defaultIsOpen || false)\n\n  const isOpen = isOpenProp !== undefined ? isOpenProp : isOpenState\n\n  const isControlled = isOpenProp !== undefined\n\n  const uid = useId()\n  const id = idProp ?? `disclosure-${uid}`\n\n  const onClose = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false)\n    }\n    handleClose?.()\n  }, [isControlled, handleClose])\n\n  const onOpen = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true)\n    }\n    handleOpen?.()\n  }, [isControlled, handleOpen])\n\n  const onToggle = useCallback(() => {\n    if (isOpen) {\n      onClose()\n    } else {\n      onOpen()\n    }\n  }, [isOpen, onOpen, onClose])\n\n  function getButtonProps(props: HTMLProps = {}): HTMLProps {\n    return {\n      ...props,\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": id,\n      onClick(event) {\n        props.onClick?.(event)\n        onToggle()\n      },\n    }\n  }\n\n  function getDisclosureProps(props: HTMLProps = {}): HTMLProps {\n    return {\n      ...props,\n      hidden: !isOpen,\n      id,\n    }\n  }\n\n  return {\n    isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps,\n    getDisclosureProps,\n  }\n}\n\nexport type UseDisclosureReturn = ReturnType<typeof useDisclosure>\n"],"mappings":";;;;;AAAA,SAASA,cAAA,QAAsB;AAC/B,SAAgBC,WAAA,EAAaC,QAAA,EAAUC,KAAA,QAAa;AAkB7C,SAASC,cAAA,EAA8C;EAAA,IAAhCC,KAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA4B,CAAC;EACzD,IACWG,WAAA,GAIPJ,KAAA,CAJFK,OAAA;IACQC,UAAA,GAGNN,KAAA,CAHFO,MAAA;IACQC,UAAA,GAENR,KAAA,CAFFS,MAAA;IACIC,MAAA,GACFV,KAAA,CADFW,EAAA;EAGF,IAAMC,UAAA,GAAajB,cAAA,CAAeW,UAAU;EAC5C,IAAMO,WAAA,GAAclB,cAAA,CAAeS,WAAW;EAE9C,IAAAU,SAAA,GAAiCjB,QAAA,CAASG,KAAA,CAAMe,aAAA,IAAiB,KAAK;IAAAC,UAAA,GAAAC,cAAA,CAAAH,SAAA;IAA/DI,WAAA,GAAAF,UAAA;IAAaG,SAAS,GAAAH,UAAA;EAE7B,IAAMP,MAAA,GAASD,UAAA,KAAe,SAAYA,UAAA,GAAaU,WAAA;EAEvD,IAAME,YAAA,GAAeZ,UAAA,KAAe;EAEpC,IAAMa,GAAA,GAAMvB,KAAA,CAAM;EAClB,IAAMa,EAAA,GAAKD,MAAA,WAAAA,MAAA,iBAAAY,MAAA,CAAwBD,GAAA;EAEnC,IAAMhB,OAAA,GAAUT,WAAA,CAAY,YAAM;IAChC,IAAI,CAACwB,YAAA,EAAc;MACjBD,SAAA,CAAU,KAAK;IACjB;IACAN,WAAA,oBAAAA,WAAA;EACF,GAAG,CAACO,YAAA,EAAcP,WAAW,CAAC;EAE9B,IAAMN,MAAA,GAASX,WAAA,CAAY,YAAM;IAC/B,IAAI,CAACwB,YAAA,EAAc;MACjBD,SAAA,CAAU,IAAI;IAChB;IACAP,UAAA,oBAAAA,UAAA;EACF,GAAG,CAACQ,YAAA,EAAcR,UAAU,CAAC;EAE7B,IAAMW,QAAA,GAAW3B,WAAA,CAAY,YAAM;IACjC,IAAIa,MAAA,EAAQ;MACVJ,OAAA,CAAQ;IACV,OAAO;MACLE,MAAA,CAAO;IACT;EACF,GAAG,CAACE,MAAA,EAAQF,MAAA,EAAQF,OAAO,CAAC;EAE5B,SAASmB,eAAA,EAAiD;IAAA,IAAlCC,MAAA,GAAAxB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAmB,CAAC;IAC1C,OAAAyB,aAAA,CAAAA,aAAA,KACKD,MAAA;MACH,iBAAiBhB,MAAA;MACjB,iBAAiBE,EAAA;MACjBgB,OAAA,WAAAA,QAAQC,KAAA,EAAO;QAlErB,IAAAC,EAAA;QAmEQ,CAAAA,EAAA,GAAAJ,MAAA,CAAME,OAAA,KAAN,gBAAAE,EAAA,CAAAC,IAAA,CAAAL,MAAA,EAAgBG,KAAA;QAChBL,QAAA,CAAS;MACX;IAAA;EAEJ;EAEA,SAASQ,mBAAA,EAAqD;IAAA,IAAlCN,MAAA,GAAAxB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAmB,CAAC;IAC9C,OAAAyB,aAAA,CAAAA,aAAA,KACKD,MAAA;MACHO,MAAA,EAAQ,CAACvB,MAAA;MACTE,EAAA,EAAAA;IAAA;EAEJ;EAEA,OAAO;IACLF,MAAA,EAAAA,MAAA;IACAF,MAAA,EAAAA,MAAA;IACAF,OAAA,EAAAA,OAAA;IACAkB,QAAA,EAAAA,QAAA;IACAH,YAAA,EAAAA,YAAA;IACAI,cAAA,EAAAA,cAAA;IACAO,kBAAA,EAAAA;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}