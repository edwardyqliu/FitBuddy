{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { ColorModeContext } from \"./chunk-UQDW7KKV.mjs\";\nimport { getColorModeUtils } from \"./chunk-X7ZBZ4KW.mjs\";\nimport { localStorageManager } from \"./chunk-44OWBZ77.mjs\";\n\n// src/color-mode-provider.tsx\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar noop = function noop() {};\nfunction getTheme(manager, fallback) {\n  return manager.type === \"cookie\" && manager.ssr ? manager.get(fallback) : fallback;\n}\nfunction ColorModeProvider(props) {\n  var value = props.value,\n    children = props.children,\n    _props$options = props.options,\n    _props$options2 = _props$options === void 0 ? {} : _props$options,\n    useSystemColorMode = _props$options2.useSystemColorMode,\n    initialColorMode = _props$options2.initialColorMode,\n    disableTransitionOnChange = _props$options2.disableTransitionOnChange,\n    _props$colorModeManag = props.colorModeManager,\n    colorModeManager = _props$colorModeManag === void 0 ? localStorageManager : _props$colorModeManag;\n  var defaultColorMode = initialColorMode === \"dark\" ? \"dark\" : \"light\";\n  var _useState = useState(function () {\n      return getTheme(colorModeManager, defaultColorMode);\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    colorMode = _useState2[0],\n    rawSetColorMode = _useState2[1];\n  var _useState3 = useState(function () {\n      return getTheme(colorModeManager);\n    }),\n    _useState4 = _slicedToArray(_useState3, 2),\n    resolvedColorMode = _useState4[0],\n    setResolvedColorMode = _useState4[1];\n  var _useMemo = useMemo(function () {\n      return getColorModeUtils({\n        preventTransition: disableTransitionOnChange\n      });\n    }, [disableTransitionOnChange]),\n    getSystemTheme = _useMemo.getSystemTheme,\n    setClassName = _useMemo.setClassName,\n    setDataset = _useMemo.setDataset,\n    addListener = _useMemo.addListener;\n  var resolvedValue = initialColorMode === \"system\" && !colorMode ? resolvedColorMode : colorMode;\n  var setColorMode = useCallback(function (value2) {\n    var resolved = value2 === \"system\" ? getSystemTheme() : value2;\n    rawSetColorMode(resolved);\n    setClassName(resolved === \"dark\");\n    setDataset(resolved);\n    colorModeManager.set(resolved);\n  }, [colorModeManager, getSystemTheme, setClassName, setDataset]);\n  useSafeLayoutEffect(function () {\n    if (initialColorMode === \"system\") {\n      setResolvedColorMode(getSystemTheme());\n    }\n  }, []);\n  useEffect(function () {\n    var managerValue = colorModeManager.get();\n    if (managerValue) {\n      setColorMode(managerValue);\n      return;\n    }\n    if (initialColorMode === \"system\") {\n      setColorMode(\"system\");\n      return;\n    }\n    setColorMode(defaultColorMode);\n  }, [colorModeManager, defaultColorMode, initialColorMode, setColorMode]);\n  var toggleColorMode = useCallback(function () {\n    setColorMode(resolvedValue === \"dark\" ? \"light\" : \"dark\");\n  }, [resolvedValue, setColorMode]);\n  useEffect(function () {\n    if (!useSystemColorMode) return;\n    return addListener(setColorMode);\n  }, [useSystemColorMode, addListener, setColorMode]);\n  var context = useMemo(function () {\n    return {\n      colorMode: value != null ? value : resolvedValue,\n      toggleColorMode: value ? noop : toggleColorMode,\n      setColorMode: value ? noop : setColorMode,\n      forced: value !== void 0\n    };\n  }, [resolvedValue, toggleColorMode, setColorMode, value]);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, {\n    value: context,\n    children: children\n  });\n}\nColorModeProvider.displayName = \"ColorModeProvider\";\nfunction DarkMode(props) {\n  var context = useMemo(function () {\n    return {\n      colorMode: \"dark\",\n      toggleColorMode: noop,\n      setColorMode: noop,\n      forced: true\n    };\n  }, []);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, _objectSpread({\n    value: context\n  }, props));\n}\nDarkMode.displayName = \"DarkMode\";\nfunction LightMode(props) {\n  var context = useMemo(function () {\n    return {\n      colorMode: \"light\",\n      toggleColorMode: noop,\n      setColorMode: noop,\n      forced: true\n    };\n  }, []);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, _objectSpread({\n    value: context\n  }, props));\n}\nLightMode.displayName = \"LightMode\";\nexport { ColorModeProvider, DarkMode, LightMode };","map":{"version":3,"names":["useSafeLayoutEffect","useCallback","useEffect","useMemo","useState","jsx","noop","getTheme","manager","fallback","type","ssr","get","ColorModeProvider","props","value","children","_props$options","options","_props$options2","useSystemColorMode","initialColorMode","disableTransitionOnChange","_props$colorModeManag","colorModeManager","localStorageManager","defaultColorMode","_useState","_useState2","_slicedToArray","colorMode","rawSetColorMode","_useState3","_useState4","resolvedColorMode","setResolvedColorMode","_useMemo","getColorModeUtils","preventTransition","getSystemTheme","setClassName","setDataset","addListener","resolvedValue","setColorMode","value2","resolved","set","managerValue","toggleColorMode","context","forced","ColorModeContext","Provider","displayName","DarkMode","_objectSpread","LightMode"],"sources":["/Users/eyliu/Desktop/FitBuddy/node_modules/@chakra-ui/color-mode/src/color-mode-provider.tsx"],"sourcesContent":["import { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useCallback, useEffect, useMemo, useState } from \"react\"\nimport { ColorModeContext } from \"./color-mode-context\"\nimport {\n  ColorMode,\n  ColorModeContextType,\n  ColorModeOptions,\n} from \"./color-mode-types\"\nimport { getColorModeUtils } from \"./color-mode.utils\"\nimport { localStorageManager, StorageManager } from \"./storage-manager\"\n\nconst noop = () => {}\n\nexport interface ColorModeProviderProps {\n  value?: ColorMode\n  children?: React.ReactNode\n  options?: ColorModeOptions\n  colorModeManager?: StorageManager\n}\n\nfunction getTheme(manager: StorageManager, fallback?: ColorMode) {\n  return manager.type === \"cookie\" && manager.ssr\n    ? manager.get(fallback)\n    : fallback\n}\n\n/**\n * Provides context for the color mode based on config in `theme`\n * Returns the color mode and function to toggle the color mode\n */\nexport function ColorModeProvider(props: ColorModeProviderProps) {\n  const {\n    value,\n    children,\n    options: {\n      useSystemColorMode,\n      initialColorMode,\n      disableTransitionOnChange,\n    } = {},\n    colorModeManager = localStorageManager,\n  } = props\n\n  const defaultColorMode = initialColorMode === \"dark\" ? \"dark\" : \"light\"\n\n  const [colorMode, rawSetColorMode] = useState(() =>\n    getTheme(colorModeManager, defaultColorMode),\n  )\n\n  const [resolvedColorMode, setResolvedColorMode] = useState(() =>\n    getTheme(colorModeManager),\n  )\n\n  const { getSystemTheme, setClassName, setDataset, addListener } = useMemo(\n    () => getColorModeUtils({ preventTransition: disableTransitionOnChange }),\n    [disableTransitionOnChange],\n  )\n\n  const resolvedValue =\n    initialColorMode === \"system\" && !colorMode ? resolvedColorMode : colorMode\n\n  const setColorMode = useCallback(\n    (value: ColorMode | \"system\") => {\n      //\n      const resolved = value === \"system\" ? getSystemTheme() : value\n      rawSetColorMode(resolved)\n\n      setClassName(resolved === \"dark\")\n      setDataset(resolved)\n\n      colorModeManager.set(resolved)\n    },\n    [colorModeManager, getSystemTheme, setClassName, setDataset],\n  )\n\n  useSafeLayoutEffect(() => {\n    if (initialColorMode === \"system\") {\n      setResolvedColorMode(getSystemTheme())\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    const managerValue = colorModeManager.get()\n\n    if (managerValue) {\n      setColorMode(managerValue)\n      return\n    }\n\n    if (initialColorMode === \"system\") {\n      setColorMode(\"system\")\n      return\n    }\n\n    setColorMode(defaultColorMode)\n  }, [colorModeManager, defaultColorMode, initialColorMode, setColorMode])\n\n  const toggleColorMode = useCallback(() => {\n    setColorMode(resolvedValue === \"dark\" ? \"light\" : \"dark\")\n  }, [resolvedValue, setColorMode])\n\n  useEffect(() => {\n    if (!useSystemColorMode) return\n    return addListener(setColorMode)\n  }, [useSystemColorMode, addListener, setColorMode])\n\n  // presence of `value` indicates a controlled context\n  const context = useMemo(\n    () => ({\n      colorMode: value ?? (resolvedValue as ColorMode),\n      toggleColorMode: value ? noop : toggleColorMode,\n      setColorMode: value ? noop : setColorMode,\n      forced: value !== undefined,\n    }),\n    [resolvedValue, toggleColorMode, setColorMode, value],\n  )\n\n  return (\n    <ColorModeContext.Provider value={context}>\n      {children}\n    </ColorModeContext.Provider>\n  )\n}\n\nColorModeProvider.displayName = \"ColorModeProvider\"\n\n/**\n * Locks the color mode to `dark`, without any way to change it.\n */\nexport function DarkMode(props: React.PropsWithChildren<{}>) {\n  const context = useMemo<ColorModeContextType>(\n    () => ({\n      colorMode: \"dark\",\n      toggleColorMode: noop,\n      setColorMode: noop,\n      forced: true,\n    }),\n    [],\n  )\n\n  return <ColorModeContext.Provider value={context} {...props} />\n}\n\nDarkMode.displayName = \"DarkMode\"\n\n/**\n * Locks the color mode to `light` without any way to change it.\n */\nexport function LightMode(props: React.PropsWithChildren<{}>) {\n  const context = useMemo<ColorModeContextType>(\n    () => ({\n      colorMode: \"light\",\n      toggleColorMode: noop,\n      setColorMode: noop,\n      forced: true,\n    }),\n    [],\n  )\n\n  return <ColorModeContext.Provider value={context} {...props} />\n}\n\nLightMode.displayName = \"LightMode\"\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}