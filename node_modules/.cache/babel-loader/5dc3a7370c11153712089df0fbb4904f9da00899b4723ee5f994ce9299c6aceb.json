{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport PhoneNumberMatcher from './PhoneNumberMatcher.js';\nimport normalizeArguments from './normalizeArguments.js';\nexport default function searchPhoneNumbersInText() {\n  var _normalizeArguments = normalizeArguments(arguments),\n    text = _normalizeArguments.text,\n    options = _normalizeArguments.options,\n    metadata = _normalizeArguments.metadata;\n  var matcher = new PhoneNumberMatcher(text, _objectSpread(_objectSpread({}, options), {}, {\n    v2: true\n  }), metadata);\n  return _defineProperty({}, Symbol.iterator, function () {\n    return {\n      next: function next() {\n        if (matcher.hasNext()) {\n          return {\n            done: false,\n            value: matcher.next()\n          };\n        }\n        return {\n          done: true\n        };\n      }\n    };\n  });\n}","map":{"version":3,"names":["PhoneNumberMatcher","normalizeArguments","searchPhoneNumbersInText","_normalizeArguments","arguments","text","options","metadata","matcher","_objectSpread","v2","_defineProperty","Symbol","iterator","next","hasNext","done","value"],"sources":["/Users/eyliu/Desktop/FitBuddy/node_modules/libphonenumber-js/source/searchPhoneNumbersInText.js"],"sourcesContent":["import PhoneNumberMatcher from './PhoneNumberMatcher.js'\r\nimport normalizeArguments from './normalizeArguments.js'\r\n\r\nexport default function searchPhoneNumbersInText() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\tconst matcher = new PhoneNumberMatcher(text, { ...options, v2: true }, metadata)\r\n\treturn  {\r\n\t\t[Symbol.iterator]() {\r\n\t\t\treturn {\r\n\t    \t\tnext: () => {\r\n\t    \t\t\tif (matcher.hasNext()) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tdone: false,\r\n\t\t\t\t\t\t\tvalue: matcher.next()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tdone: true\r\n\t\t\t\t\t}\r\n\t    \t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,kBAAP,MAA+B,yBAA/B;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;AAEA,eAAe,SAASC,wBAATA,CAAA,EAAoC;EAClD,IAAAC,mBAAA,GAAoCF,kBAAkB,CAACG,SAAD,CAAtD;IAAQC,IAAR,GAAAF,mBAAA,CAAQE,IAAR;IAAcC,OAAd,GAAAH,mBAAA,CAAcG,OAAd;IAAuBC,QAAvB,GAAAJ,mBAAA,CAAuBI,QAAvB;EACA,IAAMC,OAAO,GAAG,IAAIR,kBAAJ,CAAuBK,IAAvB,EAAAI,aAAA,CAAAA,aAAA,KAAkCH,OAAlC;IAA2CI,EAAE,EAAE;EAA/C,IAAuDH,QAAvD,CAAhB;EACA,OAAAI,eAAA,KACEC,MAAM,CAACC,QADT,cACqB;IACnB,OAAO;MACHC,IAAI,EAAE,SAAAA,KAAA,EAAM;QACX,IAAIN,OAAO,CAACO,OAAR,EAAJ,EAAuB;UACzB,OAAO;YACNC,IAAI,EAAE,KADA;YAENC,KAAK,EAAET,OAAO,CAACM,IAAR;UAFD,CAAP;QAIA;QACD,OAAO;UACNE,IAAI,EAAE;QADA,CAAP;MAGG;IAXE,CAAP;EAaA,CAfF;AAiBA"},"metadata":{},"sourceType":"module","externalDependencies":[]}