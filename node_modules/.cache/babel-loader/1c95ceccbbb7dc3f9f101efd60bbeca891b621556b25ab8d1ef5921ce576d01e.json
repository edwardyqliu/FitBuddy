{"ast":null,"code":"var _excluded = [\"value\", \"onChange\", \"country\", \"international\", \"withCountryCallingCode\", \"metadata\", \"inputComponent\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { parseIncompletePhoneNumber, formatIncompletePhoneNumber } from 'libphonenumber-js/core';\nimport { getInputValuePrefix, removeInputValuePrefix } from './helpers/inputValuePrefix.js';\nexport function createInput(defaultMetadata) {\n  /**\r\n   * `InputBasic` is the most basic implementation of a `Component`\r\n   * that can be passed to `<PhoneInput/>`. It parses and formats\r\n   * the user's input but doesn't control the caret in the process:\r\n   * when erasing or inserting digits in the middle of a phone number\r\n   * the caret usually jumps to the end (this is the expected behavior).\r\n   * Why does `InputBasic` exist when there's `InputSmart`?\r\n   * One reason is working around the [Samsung Galaxy smart caret positioning bug]\r\n   * (https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n   * Another reason is that, unlike `InputSmart`, it doesn't require DOM environment.\r\n   */\n  function InputBasic(_ref, ref) {\n    var value = _ref.value,\n      onChange = _ref.onChange,\n      country = _ref.country,\n      international = _ref.international,\n      withCountryCallingCode = _ref.withCountryCallingCode,\n      _ref$metadata = _ref.metadata,\n      metadata = _ref$metadata === void 0 ? defaultMetadata : _ref$metadata,\n      _ref$inputComponent = _ref.inputComponent,\n      Input = _ref$inputComponent === void 0 ? 'input' : _ref$inputComponent,\n      rest = _objectWithoutProperties(_ref, _excluded);\n    var prefix = getInputValuePrefix({\n      country: country,\n      international: international,\n      withCountryCallingCode: withCountryCallingCode,\n      metadata: metadata\n    });\n    var _onChange = useCallback(function (event) {\n      var newValue = parseIncompletePhoneNumber(event.target.value); // By default, if a value is something like `\"(123)\"`\n      // then Backspace would only erase the rightmost brace\n      // becoming something like `\"(123\"`\n      // which would give the same `\"123\"` value\n      // which would then be formatted back to `\"(123)\"`\n      // and so a user wouldn't be able to erase the phone number.\n      // Working around this issue with this simple hack.\n\n      if (newValue === value) {\n        var newValueFormatted = format(prefix, newValue, country, metadata);\n        if (newValueFormatted.indexOf(event.target.value) === 0) {\n          // Trim the last digit (or plus sign).\n          newValue = newValue.slice(0, -1);\n        }\n      }\n      onChange(newValue);\n    }, [prefix, value, onChange, country, metadata]);\n    return /*#__PURE__*/React.createElement(Input, _extends({}, rest, {\n      ref: ref,\n      value: format(prefix, value, country, metadata),\n      onChange: _onChange\n    }));\n  }\n  InputBasic = /*#__PURE__*/React.forwardRef(InputBasic);\n  InputBasic.propTypes = {\n    /**\r\n     * The parsed phone number.\r\n     * \"Parsed\" not in a sense of \"E.164\"\r\n     * but rather in a sense of \"having only\r\n     * digits and possibly a leading plus character\".\r\n     * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n     */\n    value: PropTypes.string.isRequired,\n    /**\r\n     * A function of `value: string`.\r\n     * Updates the `value` property.\r\n     */\n    onChange: PropTypes.func.isRequired,\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * as a national phone number (e.g. `(800) 555 35 35`).\r\n     * E.g. \"US\", \"RU\", etc.\r\n     * If no `country` is passed then `value`\r\n     * is formatted as an international phone number.\r\n     * (e.g. `+7 800 555 35 35`)\r\n     * Perhaps the `country` property should have been called `defaultCountry`\r\n     * because if `value` is an international number then `country` is ignored.\r\n     */\n    country: PropTypes.string,\n    /**\r\n     * If `country` property is passed along with `international={true}` property\r\n     * then the phone number will be input in \"international\" format for that `country`\r\n     * (without \"country calling code\").\r\n     * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n     * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n     * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n     * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n     * (without \"country calling code\" `+1`).\r\n     */\n    international: PropTypes.bool,\n    /**\r\n     * If `country` and `international` properties are set,\r\n     * then by default it won't include \"country calling code\" in the input field.\r\n     * To change that, pass `withCountryCallingCode` property,\r\n     * and it will include \"country calling code\" in the input field.\r\n     */\n    withCountryCallingCode: PropTypes.bool,\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: PropTypes.object,\n    /**\r\n     * The `<input/>` component.\r\n     */\n    inputComponent: PropTypes.elementType\n  };\n  return InputBasic;\n}\nexport default createInput();\nfunction format(prefix, value, country, metadata) {\n  return removeInputValuePrefix(formatIncompletePhoneNumber(prefix + value, country, metadata), prefix);\n}","map":{"version":3,"names":["React","useCallback","PropTypes","parseIncompletePhoneNumber","formatIncompletePhoneNumber","getInputValuePrefix","removeInputValuePrefix","createInput","defaultMetadata","InputBasic","_ref","ref","value","onChange","country","international","withCountryCallingCode","_ref$metadata","metadata","_ref$inputComponent","inputComponent","Input","rest","_objectWithoutProperties","_excluded","prefix","_onChange","event","newValue","target","newValueFormatted","format","indexOf","slice","createElement","_extends","forwardRef","propTypes","string","isRequired","func","bool","object","elementType"],"sources":["/Users/eyliu/Desktop/FitBuddy/node_modules/react-phone-number-input/source/InputBasic.js"],"sourcesContent":["import React, { useCallback } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { parseIncompletePhoneNumber, formatIncompletePhoneNumber } from 'libphonenumber-js/core'\r\n\r\nimport { getInputValuePrefix, removeInputValuePrefix } from './helpers/inputValuePrefix.js'\r\n\r\nexport function createInput(defaultMetadata) {\r\n\t/**\r\n\t * `InputBasic` is the most basic implementation of a `Component`\r\n\t * that can be passed to `<PhoneInput/>`. It parses and formats\r\n\t * the user's input but doesn't control the caret in the process:\r\n\t * when erasing or inserting digits in the middle of a phone number\r\n\t * the caret usually jumps to the end (this is the expected behavior).\r\n\t * Why does `InputBasic` exist when there's `InputSmart`?\r\n\t * One reason is working around the [Samsung Galaxy smart caret positioning bug]\r\n\t * (https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n\t * Another reason is that, unlike `InputSmart`, it doesn't require DOM environment.\r\n\t */\r\n\tfunction InputBasic({\r\n\t\tvalue,\r\n\t\tonChange,\r\n\t\tcountry,\r\n\t\tinternational,\r\n\t\twithCountryCallingCode,\r\n\t\tmetadata = defaultMetadata,\r\n\t\tinputComponent: Input = 'input',\r\n\t\t...rest\r\n\t}, ref) {\r\n\t\tconst prefix = getInputValuePrefix({\r\n\t\t\tcountry,\r\n\t\t\tinternational,\r\n\t\t\twithCountryCallingCode,\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\tconst _onChange = useCallback((event) => {\r\n\t\t\tlet newValue = parseIncompletePhoneNumber(event.target.value)\r\n\t\t\t// By default, if a value is something like `\"(123)\"`\r\n\t\t\t// then Backspace would only erase the rightmost brace\r\n\t\t\t// becoming something like `\"(123\"`\r\n\t\t\t// which would give the same `\"123\"` value\r\n\t\t\t// which would then be formatted back to `\"(123)\"`\r\n\t\t\t// and so a user wouldn't be able to erase the phone number.\r\n\t\t\t// Working around this issue with this simple hack.\r\n\t\t\tif (newValue === value) {\r\n\t\t\t\tconst newValueFormatted = format(prefix, newValue, country, metadata)\r\n\t\t\t\tif (newValueFormatted.indexOf(event.target.value) === 0) {\r\n\t\t\t\t\t// Trim the last digit (or plus sign).\r\n\t\t\t\t\tnewValue = newValue.slice(0, -1)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tonChange(newValue)\r\n\t\t}, [\r\n\t\t\tprefix,\r\n\t\t\tvalue,\r\n\t\t\tonChange,\r\n\t\t\tcountry,\r\n\t\t\tmetadata\r\n\t\t])\r\n\r\n\t\treturn (\r\n\t\t\t<Input\r\n\t\t\t\t{...rest}\r\n\t\t\t\tref={ref}\r\n\t\t\t\tvalue={format(prefix, value, country, metadata)}\r\n\t\t\t\tonChange={_onChange}/>\r\n\t\t)\r\n\t}\r\n\r\n\tInputBasic = React.forwardRef(InputBasic)\r\n\r\n\tInputBasic.propTypes = {\r\n\t\t/**\r\n\t\t * The parsed phone number.\r\n\t\t * \"Parsed\" not in a sense of \"E.164\"\r\n\t\t * but rather in a sense of \"having only\r\n\t\t * digits and possibly a leading plus character\".\r\n\t\t * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t\t */\r\n\t\tvalue: PropTypes.string.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A function of `value: string`.\r\n\t\t * Updates the `value` property.\r\n\t\t */\r\n\t\tonChange: PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A two-letter country code for formatting `value`\r\n\t\t * as a national phone number (e.g. `(800) 555 35 35`).\r\n\t\t * E.g. \"US\", \"RU\", etc.\r\n\t\t * If no `country` is passed then `value`\r\n\t\t * is formatted as an international phone number.\r\n\t\t * (e.g. `+7 800 555 35 35`)\r\n\t\t * Perhaps the `country` property should have been called `defaultCountry`\r\n\t\t * because if `value` is an international number then `country` is ignored.\r\n\t\t */\r\n\t\tcountry : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * If `country` property is passed along with `international={true}` property\r\n\t\t * then the phone number will be input in \"international\" format for that `country`\r\n\t\t * (without \"country calling code\").\r\n\t\t * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n\t\t * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n\t\t * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n\t\t * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n\t\t * (without \"country calling code\" `+1`).\r\n\t\t */\r\n\t\tinternational: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * If `country` and `international` properties are set,\r\n\t\t * then by default it won't include \"country calling code\" in the input field.\r\n\t\t * To change that, pass `withCountryCallingCode` property,\r\n\t\t * and it will include \"country calling code\" in the input field.\r\n\t\t */\r\n\t\twithCountryCallingCode: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: PropTypes.object,\r\n\r\n\t\t/**\r\n\t\t * The `<input/>` component.\r\n\t\t */\r\n\t\tinputComponent: PropTypes.elementType\r\n\t}\r\n\r\n\treturn InputBasic\r\n}\r\n\r\nexport default createInput()\r\n\r\nfunction format(prefix, value, country, metadata) {\r\n\treturn removeInputValuePrefix(\r\n\t\tformatIncompletePhoneNumber(\r\n\t\t\tprefix + value,\r\n\t\t\tcountry,\r\n\t\t\tmetadata\r\n\t\t),\r\n\t\tprefix\r\n\t)\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}