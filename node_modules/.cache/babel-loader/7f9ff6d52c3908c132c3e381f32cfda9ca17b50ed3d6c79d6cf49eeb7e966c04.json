{"ast":null,"code":"'use client';\n\n// src/chakra-provider.tsx\nimport _objectSpread from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"children\", \"theme\", \"toastOptions\"];\nimport { ChakraProvider as BaseChakraProvider } from \"@chakra-ui/provider\";\nimport { theme as defaultTheme, baseTheme } from \"@chakra-ui/theme\";\nimport { ToastProvider, ToastOptionProvider } from \"@chakra-ui/toast\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar createChakraProvider = function createChakraProvider(providerTheme) {\n  return function ChakraProvider2(_ref) {\n    var children = _ref.children,\n      _ref$theme = _ref.theme,\n      theme = _ref$theme === void 0 ? providerTheme : _ref$theme,\n      toastOptions = _ref.toastOptions,\n      restProps = _objectWithoutProperties(_ref, _excluded);\n    return /* @__PURE__ */jsxs(BaseChakraProvider, _objectSpread(_objectSpread({\n      theme: theme\n    }, restProps), {}, {\n      children: [/* @__PURE__ */jsx(ToastOptionProvider, {\n        value: toastOptions == null ? void 0 : toastOptions.defaultOptions,\n        children: children\n      }), /* @__PURE__ */jsx(ToastProvider, _objectSpread({}, toastOptions))]\n    }));\n  };\n};\nvar ChakraProvider = createChakraProvider(defaultTheme);\nvar ChakraBaseProvider = createChakraProvider(baseTheme);\nexport { ChakraProvider, ChakraBaseProvider };","map":{"version":3,"names":["ChakraProvider","BaseChakraProvider","theme","defaultTheme","baseTheme","ToastProvider","ToastOptionProvider","jsx","jsxs","createChakraProvider","providerTheme","ChakraProvider2","_ref","children","_ref$theme","toastOptions","restProps","_objectWithoutProperties","_excluded","_objectSpread","value","defaultOptions","ChakraBaseProvider"],"sources":["/Users/eyliu/Desktop/FitBuddy/node_modules/@chakra-ui/react/src/chakra-provider.tsx"],"sourcesContent":["import {\n  ChakraProvider as BaseChakraProvider,\n  ChakraProviderProps as BaseChakraProviderProps,\n} from \"@chakra-ui/provider\"\nimport { theme as defaultTheme, baseTheme, Theme } from \"@chakra-ui/theme\"\nimport {\n  ToastProvider,\n  ToastProviderProps,\n  ToastOptionProvider,\n} from \"@chakra-ui/toast\"\nimport { Dict } from \"@chakra-ui/utils\"\n\nexport interface ChakraProviderProps extends BaseChakraProviderProps {\n  /**\n   * Provide defaults for `useToast()` usages for `ChakraProvider`s children\n   */\n  toastOptions?: ToastProviderProps\n}\n\nconst createChakraProvider = (\n  providerTheme: Theme | (Omit<Theme, \"components\"> & { components: Dict }),\n) => {\n  return function ChakraProvider({\n    children,\n    theme = providerTheme,\n    toastOptions,\n    ...restProps\n  }: ChakraProviderProps) {\n    return (\n      <BaseChakraProvider theme={theme} {...restProps}>\n        <ToastOptionProvider value={toastOptions?.defaultOptions}>\n          {children}\n        </ToastOptionProvider>\n        <ToastProvider {...toastOptions} />\n      </BaseChakraProvider>\n    )\n  }\n}\n\nexport const ChakraProvider = createChakraProvider(defaultTheme)\nexport const ChakraBaseProvider = createChakraProvider(baseTheme)\n"],"mappings":";;;;;;AAAA,SACEA,cAAA,IAAkBC,kBAAA,QAEb;AACP,SAASC,KAAA,IAASC,YAAA,EAAcC,SAAA,QAAwB;AACxD,SACEC,aAAA,EAEAC,mBAAA,QACK;AAoBD,SACEC,GAAA,EADFC,IAAA;AAVN,IAAMC,oBAAA,GAAuB,SAAvBA,qBACJC,aAAA,EACG;EACH,OAAO,SAASC,gBAAAC,IAAA,EAKQ;IAAA,IAJtBC,QAAA,GAAAD,IAAA,CAAAC,QAAA;MAAAC,UAAA,GAAAF,IAAA,CACAV,KAAA;MAAAA,KAAA,GAAAY,UAAA,cAAQJ,aAAA,GAAAI,UAAA;MACRC,YAAA,GAAAH,IAAA,CAAAG,YAAA;MACGC,SAAA,GAAAC,wBAAA,CAAAL,IAAA,EAAAM,SAAA;IAEH,OACE,eAAAV,IAAA,CAACP,kBAAA,EAAAkB,aAAA,CAAAA,aAAA;MAAmBjB,KAAA,EAAAA;IAAA,GAAkBc,SAAA;MACpCH,QAAA,kBAAAN,GAAA,CAACD,mBAAA;QAAoBc,KAAA,EAAOL,YAAA,oBAAAA,YAAA,CAAcM,cAAA;QACvCR,QAAA,EAAAA;MAAA,CACH,GACA,eAAAN,GAAA,CAACF,aAAA,EAAAc,aAAA,KAAkBJ,YAAA,CAAc;IAAA,EACnC;EAEJ;AACF;AAEO,IAAMf,cAAA,GAAiBS,oBAAA,CAAqBN,YAAY;AACxD,IAAMmB,kBAAA,GAAqBb,oBAAA,CAAqBL,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}