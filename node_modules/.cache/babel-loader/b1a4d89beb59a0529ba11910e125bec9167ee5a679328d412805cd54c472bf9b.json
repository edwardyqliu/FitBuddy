{"ast":null,"code":"'use client';\n\nimport _defineProperty from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _excluded = [\"startColor\", \"endColor\", \"isLoaded\", \"fadeDuration\", \"speed\", \"className\", \"fitContent\"];\nimport { useIsFirstRender } from \"./chunk-AASO4CLC.mjs\";\n\n// src/skeleton.tsx\nimport { usePrevious } from \"@chakra-ui/react-use-previous\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { chakra, cssVar, forwardRef, keyframes, omitThemingProps, useStyleConfig, useToken } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar StyledSkeleton = chakra(\"div\", {\n  baseStyle: {\n    boxShadow: \"none\",\n    backgroundClip: \"padding-box\",\n    cursor: \"default\",\n    color: \"transparent\",\n    pointerEvents: \"none\",\n    userSelect: \"none\",\n    \"&::before, &::after, *\": {\n      visibility: \"hidden\"\n    }\n  }\n});\nvar $startColor = cssVar(\"skeleton-start-color\");\nvar $endColor = cssVar(\"skeleton-end-color\");\nvar fade = keyframes({\n  from: {\n    opacity: 0\n  },\n  to: {\n    opacity: 1\n  }\n});\nvar bgFade = keyframes({\n  from: {\n    borderColor: $startColor.reference,\n    background: $startColor.reference\n  },\n  to: {\n    borderColor: $endColor.reference,\n    background: $endColor.reference\n  }\n});\nvar Skeleton = forwardRef(function (props, ref) {\n  var skeletonProps = _objectSpread(_objectSpread({}, props), {}, {\n    fadeDuration: typeof props.fadeDuration === \"number\" ? props.fadeDuration : 0.4,\n    speed: typeof props.speed === \"number\" ? props.speed : 0.8\n  });\n  var styles = useStyleConfig(\"Skeleton\", skeletonProps);\n  var isFirstRender = useIsFirstRender();\n  var _omitThemingProps = omitThemingProps(skeletonProps),\n    _omitThemingProps$sta = _omitThemingProps.startColor,\n    startColor = _omitThemingProps$sta === void 0 ? \"\" : _omitThemingProps$sta,\n    _omitThemingProps$end = _omitThemingProps.endColor,\n    endColor = _omitThemingProps$end === void 0 ? \"\" : _omitThemingProps$end,\n    isLoaded = _omitThemingProps.isLoaded,\n    fadeDuration = _omitThemingProps.fadeDuration,\n    speed = _omitThemingProps.speed,\n    className = _omitThemingProps.className,\n    fitContent = _omitThemingProps.fitContent,\n    rest = _objectWithoutProperties(_omitThemingProps, _excluded);\n  var _useToken = useToken(\"colors\", [startColor, endColor]),\n    _useToken2 = _slicedToArray(_useToken, 2),\n    startColorVar = _useToken2[0],\n    endColorVar = _useToken2[1];\n  var wasPreviouslyLoaded = usePrevious(isLoaded);\n  var _className = cx(\"chakra-skeleton\", className);\n  var cssVarStyles = _objectSpread(_objectSpread({}, startColorVar && _defineProperty({}, $startColor.variable, startColorVar)), endColorVar && _defineProperty({}, $endColor.variable, endColorVar));\n  if (isLoaded) {\n    var animation = isFirstRender || wasPreviouslyLoaded ? \"none\" : \"\".concat(fade, \" \").concat(fadeDuration, \"s\");\n    return /* @__PURE__ */jsx(chakra.div, _objectSpread({\n      ref: ref,\n      className: _className,\n      __css: {\n        animation: animation\n      }\n    }, rest));\n  }\n  return /* @__PURE__ */jsx(StyledSkeleton, _objectSpread(_objectSpread({\n    ref: ref,\n    className: _className\n  }, rest), {}, {\n    __css: _objectSpread(_objectSpread(_objectSpread({\n      width: fitContent ? \"fit-content\" : void 0\n    }, styles), cssVarStyles), {}, {\n      _dark: _objectSpread(_objectSpread({}, styles[\"_dark\"]), cssVarStyles),\n      animation: \"\".concat(speed, \"s linear infinite alternate \").concat(bgFade)\n    })\n  }));\n});\nSkeleton.displayName = \"Skeleton\";\nexport { Skeleton };","map":{"version":3,"names":["usePrevious","cx","chakra","cssVar","forwardRef","keyframes","omitThemingProps","useStyleConfig","useToken","jsx","StyledSkeleton","baseStyle","boxShadow","backgroundClip","cursor","color","pointerEvents","userSelect","visibility","$startColor","$endColor","fade","from","opacity","to","bgFade","borderColor","reference","background","Skeleton","props","ref","skeletonProps","_objectSpread","fadeDuration","speed","styles","isFirstRender","useIsFirstRender","_omitThemingProps","_omitThemingProps$sta","startColor","_omitThemingProps$end","endColor","isLoaded","className","fitContent","rest","_objectWithoutProperties","_excluded","_useToken","_useToken2","_slicedToArray","startColorVar","endColorVar","wasPreviouslyLoaded","_className","cssVarStyles","_defineProperty","variable","animation","concat","div","__css","width","_dark","displayName"],"sources":["/Users/eyliu/Desktop/FitBuddy/node_modules/@chakra-ui/skeleton/src/skeleton.tsx"],"sourcesContent":["import { usePrevious } from \"@chakra-ui/react-use-previous\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  cssVar,\n  forwardRef,\n  HTMLChakraProps,\n  keyframes,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  useToken,\n} from \"@chakra-ui/system\"\nimport { useIsFirstRender } from \"./use-is-first-render\"\n\nexport interface SkeletonOptions {\n  /**\n   * The color at the animation start\n   */\n  startColor?: string\n  /**\n   * The color at the animation end\n   */\n  endColor?: string\n  /**\n   * If `true`, it'll render its children with a nice fade transition\n   *\n   * @default false\n   */\n  isLoaded?: boolean\n  /**\n   * The animation speed in seconds\n   *\n   * @default 0.8\n   */\n  speed?: number\n  /**\n   * The fadeIn duration in seconds. Requires `isLoaded` toggled to `true` in order to see the transition.\n   *\n   * @default 0.4\n   */\n  fadeDuration?: number\n  /**\n   * If `true`, the skeleton will take the width of it's children\n   * @default false\n   */\n  fitContent?: boolean\n}\n\nconst StyledSkeleton = chakra(\"div\", {\n  baseStyle: {\n    boxShadow: \"none\",\n    backgroundClip: \"padding-box\",\n    cursor: \"default\",\n    color: \"transparent\",\n    pointerEvents: \"none\",\n    userSelect: \"none\",\n    \"&::before, &::after, *\": {\n      visibility: \"hidden\",\n    },\n  },\n})\n\nconst $startColor = cssVar(\"skeleton-start-color\")\nconst $endColor = cssVar(\"skeleton-end-color\")\n\nexport type ISkeleton = SkeletonOptions\n\nexport interface SkeletonProps\n  extends HTMLChakraProps<\"div\">,\n    SkeletonOptions,\n    ThemingProps<\"Skeleton\"> {}\n\nconst fade = keyframes({\n  from: { opacity: 0 },\n  to: { opacity: 1 },\n})\n\nconst bgFade = keyframes({\n  from: {\n    borderColor: $startColor.reference,\n    background: $startColor.reference,\n  },\n  to: {\n    borderColor: $endColor.reference,\n    background: $endColor.reference,\n  },\n})\n\n/**\n * `Skeleton` is used to display the loading state of some component.\n *\n * @see Docs https://chakra-ui.com/docs/components/skeleton\n */\nexport const Skeleton = forwardRef<SkeletonProps, \"div\">((props, ref) => {\n  const skeletonProps: SkeletonProps = {\n    ...props,\n    fadeDuration:\n      typeof props.fadeDuration === \"number\" ? props.fadeDuration : 0.4,\n    speed: typeof props.speed === \"number\" ? props.speed : 0.8,\n  }\n  const styles = useStyleConfig(\"Skeleton\", skeletonProps)\n  const isFirstRender = useIsFirstRender()\n\n  const {\n    startColor = \"\",\n    endColor = \"\",\n    isLoaded,\n    fadeDuration,\n    speed,\n    className,\n    fitContent,\n    ...rest\n  } = omitThemingProps(skeletonProps)\n\n  const [startColorVar, endColorVar] = useToken(\"colors\", [\n    startColor,\n    endColor,\n  ])\n\n  const wasPreviouslyLoaded = usePrevious(isLoaded)\n\n  const _className = cx(\"chakra-skeleton\", className)\n\n  const cssVarStyles = {\n    ...(startColorVar && { [$startColor.variable]: startColorVar }),\n    ...(endColorVar && { [$endColor.variable]: endColorVar }),\n  }\n\n  if (isLoaded) {\n    const animation =\n      isFirstRender || wasPreviouslyLoaded ? \"none\" : `${fade} ${fadeDuration}s`\n\n    return (\n      <chakra.div\n        ref={ref}\n        className={_className}\n        __css={{ animation }}\n        {...rest}\n      />\n    )\n  }\n\n  return (\n    <StyledSkeleton\n      ref={ref}\n      className={_className}\n      {...rest}\n      __css={{\n        width: fitContent ? \"fit-content\" : undefined,\n        ...styles,\n        ...cssVarStyles,\n        _dark: { ...(styles as any)[\"_dark\"], ...cssVarStyles },\n        animation: `${speed}s linear infinite alternate ${bgFade}`,\n      }}\n    />\n  )\n})\n\nSkeleton.displayName = \"Skeleton\"\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}