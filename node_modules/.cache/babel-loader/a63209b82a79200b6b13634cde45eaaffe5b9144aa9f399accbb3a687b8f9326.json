{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { getClosestValue } from \"./chunk-C53CKZDP.mjs\";\nimport { useBreakpoint } from \"./chunk-6KW5I77S.mjs\";\n\n// src/use-breakpoint-value.ts\nimport { useTheme } from \"@chakra-ui/system\";\nimport { isObject } from \"@chakra-ui/shared-utils\";\nimport { arrayToObjectNotation } from \"@chakra-ui/breakpoint-utils\";\nfunction useBreakpointValue(values, arg) {\n  var _a;\n  var opts = isObject(arg) ? arg : {\n    fallback: arg != null ? arg : \"base\"\n  };\n  var breakpoint = useBreakpoint(opts);\n  var theme = useTheme();\n  if (!breakpoint) return;\n  var breakpoints = Array.from(((_a = theme.__breakpoints) == null ? void 0 : _a.keys) || []);\n  var obj = Array.isArray(values) ? Object.fromEntries(Object.entries(arrayToObjectNotation(values, breakpoints)).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      key = _ref2[0],\n      value = _ref2[1];\n    return [key, value];\n  })) : values;\n  return getClosestValue(obj, breakpoint, breakpoints);\n}\nexport { useBreakpointValue };","map":{"version":3,"names":["useTheme","isObject","arrayToObjectNotation","useBreakpointValue","values","arg","_a","opts","fallback","breakpoint","useBreakpoint","theme","breakpoints","Array","from","__breakpoints","keys","obj","isArray","Object","fromEntries","entries","map","_ref","_ref2","_slicedToArray","key","value","getClosestValue"],"sources":["/Users/eyliu/Desktop/FitBuddy/node_modules/@chakra-ui/media-query/src/use-breakpoint-value.ts"],"sourcesContent":["import { useTheme } from \"@chakra-ui/system\"\nimport { isObject } from \"@chakra-ui/shared-utils\"\nimport { arrayToObjectNotation } from \"@chakra-ui/breakpoint-utils\"\nimport { getClosestValue } from \"./media-query.utils\"\nimport { useBreakpoint, UseBreakpointOptions } from \"./use-breakpoint\"\n\n/**\n * React hook for getting the value for the current breakpoint from the\n * provided responsive values object.\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n *\n * @example\n * const width = useBreakpointValue({ base: '150px', md: '250px' })\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-breakpoint-value\n */\nexport function useBreakpointValue<T = any>(\n  values: Partial<Record<string, T>> | Array<T | null>,\n  arg?: UseBreakpointOptions | string,\n): T | undefined {\n  const opts = isObject(arg) ? arg : { fallback: arg ?? \"base\" }\n  const breakpoint = useBreakpoint(opts)\n  const theme = useTheme()\n\n  if (!breakpoint) return\n\n  /**\n   * Get the sorted breakpoint keys from the provided breakpoints\n   */\n  const breakpoints = Array.from(theme.__breakpoints?.keys || [])\n\n  const obj = Array.isArray(values)\n    ? Object.fromEntries<any>(\n        Object.entries(arrayToObjectNotation(values, breakpoints)).map(\n          ([key, value]) => [key, value],\n        ),\n      )\n    : values\n\n  return getClosestValue(obj, breakpoint, breakpoints)\n}\n"],"mappings":";;;;;;;AAAA,SAASA,QAAA,QAAgB;AACzB,SAASC,QAAA,QAAgB;AACzB,SAASC,qBAAA,QAA6B;AAgB/B,SAASC,mBACdC,MAAA,EACAC,GAAA,EACe;EArBjB,IAAAC,EAAA;EAsBE,IAAMC,IAAA,GAAON,QAAA,CAASI,GAAG,IAAIA,GAAA,GAAM;IAAEG,QAAA,EAAUH,GAAA,WAAAA,GAAA,GAAO;EAAO;EAC7D,IAAMI,UAAA,GAAaC,aAAA,CAAcH,IAAI;EACrC,IAAMI,KAAA,GAAQX,QAAA,CAAS;EAEvB,IAAI,CAACS,UAAA,EAAY;EAKjB,IAAMG,WAAA,GAAcC,KAAA,CAAMC,IAAA,GAAKR,EAAA,GAAAK,KAAA,CAAMI,aAAA,KAAN,gBAAAT,EAAA,CAAqBU,IAAA,KAAQ,EAAE;EAE9D,IAAMC,GAAA,GAAMJ,KAAA,CAAMK,OAAA,CAAQd,MAAM,IAC5Be,MAAA,CAAOC,WAAA,CACLD,MAAA,CAAOE,OAAA,CAAQnB,qBAAA,CAAsBE,MAAA,EAAQQ,WAAW,CAAC,EAAEU,GAAA,CACzD,UAAAC,IAAA;IAAA,IAAAC,KAAA,GAAAC,cAAA,CAAAF,IAAA;MAAEG,GAAA,GAAAF,KAAA;MAAKG,KAAK,GAAAH,KAAA;IAAA,OAAM,CAACE,GAAA,EAAKC,KAAK;EAAA,CAC/B,CACF,IACAvB,MAAA;EAEJ,OAAOwB,eAAA,CAAgBX,GAAA,EAAKR,UAAA,EAAYG,WAAW;AACrD"},"metadata":{},"sourceType":"module","externalDependencies":[]}