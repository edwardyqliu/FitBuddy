{"ast":null,"code":"import _toConsumableArray from\"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from'react';import{Box,Text,Grid}from'@chakra-ui/react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var TimeSlotSelector=function TimeSlotSelector(_ref){var onSelectSlot=_ref.onSelectSlot,dayTextColor=_ref.dayTextColor,selectedSlots=_ref.selectedSlots,defaultSlotColor=_ref.defaultSlotColor;var _useState=useState(selectedSlots||Array(49).fill(false)),_useState2=_slicedToArray(_useState,2),slots=_useState2[0],setSlots=_useState2[1];var weekdays=['Mon','Tue','Wed','Thu','Fri','Sat','Sun'];var times=[\"8:30-10:15\",\"10:15-12:00\",\"12:00-1:45\",\"1:45-3:30\",\"3:30-5:15\",\"5:15-7:00\",\"7:00-8:45\"];useEffect(function(){if(selectedSlots){setSlots(selectedSlots);}},[selectedSlots]);var toggleSlot=function toggleSlot(index){var newSlots=_toConsumableArray(slots);newSlots[index]=!newSlots[index];setSlots(newSlots);onSelectSlot(newSlots);};return/*#__PURE__*/_jsx(Grid,{templateColumns:\"repeat(7, 1fr)\",gap:4,children:weekdays.map(function(day,dayIndex){return/*#__PURE__*/_jsxs(Box,{textAlign:\"center\",children:[/*#__PURE__*/_jsx(Text,{fontSize:\"lg\",color:dayTextColor,children:day}),times.map(function(time,slotIndex){var index=dayIndex*7+slotIndex;return/*#__PURE__*/_jsx(Box,{p:2,borderRadius:\"md\",bg:slots[index]?'pink':defaultSlotColor,onClick:function onClick(){return toggleSlot(index);},cursor:\"pointer\",children:time},time);})]},day);})});};export default TimeSlotSelector;","map":{"version":3,"names":["React","useState","useEffect","Box","Text","Grid","jsx","_jsx","jsxs","_jsxs","TimeSlotSelector","_ref","onSelectSlot","dayTextColor","selectedSlots","defaultSlotColor","_useState","Array","fill","_useState2","_slicedToArray","slots","setSlots","weekdays","times","toggleSlot","index","newSlots","_toConsumableArray","templateColumns","gap","children","map","day","dayIndex","textAlign","fontSize","color","time","slotIndex","p","borderRadius","bg","onClick","cursor"],"sources":["/Users/eyliu/Desktop/FitBuddy/src/TimeSlotSelector.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Box, Text, Grid } from '@chakra-ui/react';\n\nconst TimeSlotSelector = ({ onSelectSlot, dayTextColor, selectedSlots, defaultSlotColor }) => {\n  const [slots, setSlots] = useState(selectedSlots || Array(49).fill(false)); \n  const weekdays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n  const times = [\"8:30-10:15\", \"10:15-12:00\", \"12:00-1:45\", \"1:45-3:30\", \"3:30-5:15\", \"5:15-7:00\", \"7:00-8:45\"];\n  \n  useEffect(() => {\n    if (selectedSlots) {\n      setSlots(selectedSlots);\n    }\n  }, [selectedSlots]);\n\n  const toggleSlot = (index) => {\n    const newSlots = [...slots];\n    newSlots[index] = !newSlots[index];\n    setSlots(newSlots);\n    onSelectSlot(newSlots);\n  };\n\n  return (\n    <Grid templateColumns='repeat(7, 1fr)' gap={4}>\n      {weekdays.map((day, dayIndex) => (\n        <Box key={day} textAlign='center'>\n          <Text fontSize='lg' color={dayTextColor}>{day}</Text>\n          {times.map((time, slotIndex) => {\n            const index = dayIndex * 7 + slotIndex;\n            return (\n              <Box \n                key={time}\n                p={2}\n                borderRadius='md'\n                bg={slots[index] ? 'pink' : defaultSlotColor} \n                onClick={() => toggleSlot(index)}\n                cursor='pointer'\n              >\n                {time}\n              </Box>\n            );\n          })}\n        </Box>\n      ))}\n    </Grid>\n  );\n};\n\nTimeSlotSelector.propTypes = {\n  onSelectSlot: PropTypes.func.isRequired,\n  dayTextColor: PropTypes.string,\n  selectedSlots: PropTypes.array, \n  defaultSlotColor: PropTypes.string, \n};\n\nexport default TimeSlotSelector;\n"],"mappings":"8OAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAElD,OAASC,GAAG,CAAEC,IAAI,CAAEC,IAAI,KAAQ,kBAAkB,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAEnD,GAAM,CAAAC,gBAAgB,CAAG,QAAnB,CAAAA,gBAAgBA,CAAAC,IAAA,CAAwE,IAAlE,CAAAC,YAAY,CAAAD,IAAA,CAAZC,YAAY,CAAEC,YAAY,CAAAF,IAAA,CAAZE,YAAY,CAAEC,aAAa,CAAAH,IAAA,CAAbG,aAAa,CAAEC,gBAAgB,CAAAJ,IAAA,CAAhBI,gBAAgB,CACrF,IAAAC,SAAA,CAA0Bf,QAAQ,CAACa,aAAa,EAAIG,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAAC,UAAA,CAAAC,cAAA,CAAAJ,SAAA,IAAnEK,KAAK,CAAAF,UAAA,IAAEG,QAAQ,CAAAH,UAAA,IACtB,GAAM,CAAAI,QAAQ,CAAG,CAAC,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAC,CAClE,GAAM,CAAAC,KAAK,CAAG,CAAC,YAAY,CAAE,aAAa,CAAE,YAAY,CAAE,WAAW,CAAE,WAAW,CAAE,WAAW,CAAE,WAAW,CAAC,CAE7GtB,SAAS,CAAC,UAAM,CACd,GAAIY,aAAa,CAAE,CACjBQ,QAAQ,CAACR,aAAa,CAAC,CACzB,CACF,CAAC,CAAE,CAACA,aAAa,CAAC,CAAC,CAEnB,GAAM,CAAAW,UAAU,CAAG,QAAb,CAAAA,UAAUA,CAAIC,KAAK,CAAK,CAC5B,GAAM,CAAAC,QAAQ,CAAAC,kBAAA,CAAOP,KAAK,CAAC,CAC3BM,QAAQ,CAACD,KAAK,CAAC,CAAG,CAACC,QAAQ,CAACD,KAAK,CAAC,CAClCJ,QAAQ,CAACK,QAAQ,CAAC,CAClBf,YAAY,CAACe,QAAQ,CAAC,CACxB,CAAC,CAED,mBACEpB,IAAA,CAACF,IAAI,EAACwB,eAAe,CAAC,gBAAgB,CAACC,GAAG,CAAE,CAAE,CAAAC,QAAA,CAC3CR,QAAQ,CAACS,GAAG,CAAC,SAACC,GAAG,CAAEC,QAAQ,qBAC1BzB,KAAA,CAACN,GAAG,EAAWgC,SAAS,CAAC,QAAQ,CAAAJ,QAAA,eAC/BxB,IAAA,CAACH,IAAI,EAACgC,QAAQ,CAAC,IAAI,CAACC,KAAK,CAAExB,YAAa,CAAAkB,QAAA,CAAEE,GAAG,CAAO,CAAC,CACpDT,KAAK,CAACQ,GAAG,CAAC,SAACM,IAAI,CAAEC,SAAS,CAAK,CAC9B,GAAM,CAAAb,KAAK,CAAGQ,QAAQ,CAAG,CAAC,CAAGK,SAAS,CACtC,mBACEhC,IAAA,CAACJ,GAAG,EAEFqC,CAAC,CAAE,CAAE,CACLC,YAAY,CAAC,IAAI,CACjBC,EAAE,CAAErB,KAAK,CAACK,KAAK,CAAC,CAAG,MAAM,CAAGX,gBAAiB,CAC7C4B,OAAO,CAAE,SAAAA,QAAA,QAAM,CAAAlB,UAAU,CAACC,KAAK,CAAC,EAAC,CACjCkB,MAAM,CAAC,SAAS,CAAAb,QAAA,CAEfO,IAAI,EAPAA,IAQF,CAAC,CAEV,CAAC,CAAC,GAhBML,GAiBL,CAAC,EACP,CAAC,CACE,CAAC,CAEX,CAAC,CASD,cAAe,CAAAvB,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}