{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"className\", \"children\", \"requiredIndicator\", \"optionalIndicator\"];\nimport { useFormControlContext, useFormControlStyles } from \"./chunk-OSN4JR34.mjs\";\n\n// src/form-label.tsx\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar FormLabel = forwardRef(function FormLabel2(passedProps, ref) {\n  var _a;\n  var styles = useStyleConfig(\"FormLabel\", passedProps);\n  var props = omitThemingProps(passedProps);\n  var className = props.className,\n    children = props.children,\n    _props$requiredIndica = props.requiredIndicator,\n    requiredIndicator = _props$requiredIndica === void 0 ? /* @__PURE__ */jsx(RequiredIndicator, {}) : _props$requiredIndica,\n    _props$optionalIndica = props.optionalIndicator,\n    optionalIndicator = _props$optionalIndica === void 0 ? null : _props$optionalIndica,\n    rest = _objectWithoutProperties(props, _excluded);\n  var field = useFormControlContext();\n  var ownProps = (_a = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _a : _objectSpread({\n    ref: ref\n  }, rest);\n  return /* @__PURE__ */jsxs(chakra.label, _objectSpread(_objectSpread({}, ownProps), {}, {\n    className: cx(\"chakra-form__label\", props.className),\n    __css: _objectSpread({\n      display: \"block\",\n      textAlign: \"start\"\n    }, styles),\n    children: [children, (field == null ? void 0 : field.isRequired) ? requiredIndicator : optionalIndicator]\n  }));\n});\nFormLabel.displayName = \"FormLabel\";\nvar RequiredIndicator = forwardRef(function RequiredIndicator2(props, ref) {\n  var field = useFormControlContext();\n  var styles = useFormControlStyles();\n  if (!(field == null ? void 0 : field.isRequired)) return null;\n  var className = cx(\"chakra-form__required-indicator\", props.className);\n  return /* @__PURE__ */jsx(chakra.span, _objectSpread(_objectSpread({}, field == null ? void 0 : field.getRequiredIndicatorProps(props, ref)), {}, {\n    __css: styles.requiredIndicator,\n    className: className\n  }));\n});\nRequiredIndicator.displayName = \"RequiredIndicator\";\nexport { FormLabel, RequiredIndicator };","map":{"version":3,"names":["chakra","forwardRef","omitThemingProps","useStyleConfig","cx","jsx","jsxs","FormLabel","FormLabel2","passedProps","ref","_a","styles","props","className","children","_props$requiredIndica","requiredIndicator","RequiredIndicator","_props$optionalIndica","optionalIndicator","rest","_objectWithoutProperties","_excluded","field","useFormControlContext","ownProps","getLabelProps","_objectSpread","label","__css","display","textAlign","isRequired","displayName","RequiredIndicator2","useFormControlStyles","span","getRequiredIndicatorProps"],"sources":["/Users/eyliu/Desktop/FitBuddy/node_modules/@chakra-ui/form-control/src/form-label.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactElement\n   */\n  requiredIndicator?: React.ReactElement\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n"],"mappings":";;;;;;;;AAAA,SACEA,MAAA,EACAC,UAAA,EAEAC,gBAAA,EAEAC,cAAA,QACK;AACP,SAASC,EAAA,QAAU;AAkCK,SAAAC,GAAA,EASpBC,IAAA,QAToB;AAVjB,IAAMC,SAAA,GAAYN,UAAA,CAAoC,SAASO,WACpEC,WAAA,EACAC,GAAA,EACA;EAnCF,IAAAC,EAAA;EAoCE,IAAMC,MAAA,GAAST,cAAA,CAAe,aAAaM,WAAW;EACtD,IAAMI,KAAA,GAAQX,gBAAA,CAAiBO,WAAW;EAE1C,IACEK,SAAA,GAKED,KAAA,CALFC,SAAA;IACAC,QAAA,GAIEF,KAAA,CAJFE,QAAA;IAAAC,qBAAA,GAIEH,KAAA,CAHFI,iBAAA;IAAAA,iBAAA,GAAAD,qBAAA,cAAoB,eAAAX,GAAA,CAACa,iBAAA,IAAkB,IAAAF,qBAAA;IAAAG,qBAAA,GAGrCN,KAAA,CAFFO,iBAAA;IAAAA,iBAAA,GAAAD,qBAAA,cAAoB,OAAAA,qBAAA;IACjBE,IAAA,GAAAC,wBAAA,CACDT,KAAA,EAAAU,SAAA;EAEJ,IAAMC,KAAA,GAAQC,qBAAA,CAAsB;EACpC,IAAMC,QAAA,IAAWf,EAAA,GAAAa,KAAA,oBAAAA,KAAA,CAAOG,aAAA,CAAcN,IAAA,EAAMX,GAAA,MAA3B,OAAAC,EAAA,GAAAiB,aAAA;IAAqClB,GAAA,EAAAA;EAAA,GAAQW,IAAA,CAAK;EAEnE,OACE,eAAAf,IAAA,CAACN,MAAA,CAAO6B,KAAA,EAAAD,aAAA,CAAAA,aAAA,KACFF,QAAA;IACJZ,SAAA,EAAWV,EAAA,CAAG,sBAAsBS,KAAA,CAAMC,SAAS;IACnDgB,KAAA,EAAAF,aAAA;MACEG,OAAA,EAAS;MACTC,SAAA,EAAW;IAAA,GACRpB,MAAA,CACL;IAECG,QAAA,GAAAA,QAAA,GACAS,KAAA,oBAAAA,KAAA,CAAOS,UAAA,IAAahB,iBAAA,GAAoBG,iBAAA;EAAA,EAC3C;AAEJ,CAAC;AAEDb,SAAA,CAAU2B,WAAA,GAAc;AAQjB,IAAMhB,iBAAA,GAAoBjB,UAAA,CAC/B,SAASkC,mBAAkBtB,KAAA,EAAOH,GAAA,EAAK;EACrC,IAAMc,KAAA,GAAQC,qBAAA,CAAsB;EACpC,IAAMb,MAAA,GAASwB,oBAAA,CAAqB;EAEpC,IAAI,EAACZ,KAAA,oBAAAA,KAAA,CAAOS,UAAA,GAAY,OAAO;EAE/B,IAAMnB,SAAA,GAAYV,EAAA,CAAG,mCAAmCS,KAAA,CAAMC,SAAS;EAEvE,OACE,eAAAT,GAAA,CAACL,MAAA,CAAOqC,IAAA,EAAAT,aAAA,CAAAA,aAAA,KACFJ,KAAA,oBAAAA,KAAA,CAAOc,yBAAA,CAA0BzB,KAAA,EAAOH,GAAA;IAC5CoB,KAAA,EAAOlB,MAAA,CAAOK,iBAAA;IACdH,SAAA,EAAAA;EAAA,EACF;AAEJ,CACF;AAEAI,iBAAA,CAAkBgB,WAAA,GAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}