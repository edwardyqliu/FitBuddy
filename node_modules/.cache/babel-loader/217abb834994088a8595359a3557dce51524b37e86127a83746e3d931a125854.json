{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"type\"];\nimport { useMenuStyles } from \"./chunk-UZJ3TPNQ.mjs\";\n\n// src/styled-menu-item.tsx\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { useMemo } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar StyledMenuItem = forwardRef(function (props, ref) {\n  var type = props.type,\n    rest = _objectWithoutProperties(props, _excluded);\n  var styles = useMenuStyles();\n  var btnType = rest.as || type ? type != null ? type : void 0 : \"button\";\n  var buttonStyles = useMemo(function () {\n    return _objectSpread({\n      textDecoration: \"none\",\n      color: \"inherit\",\n      userSelect: \"none\",\n      display: \"flex\",\n      width: \"100%\",\n      alignItems: \"center\",\n      textAlign: \"start\",\n      flex: \"0 0 auto\",\n      outline: 0\n    }, styles.item);\n  }, [styles.item]);\n  return /* @__PURE__ */jsx(chakra.button, _objectSpread(_objectSpread({\n    ref: ref,\n    type: btnType\n  }, rest), {}, {\n    __css: buttonStyles\n  }));\n});\nexport { StyledMenuItem };","map":{"version":3,"names":["chakra","forwardRef","useMemo","jsx","StyledMenuItem","props","ref","type","rest","_objectWithoutProperties","_excluded","styles","useMenuStyles","btnType","as","buttonStyles","_objectSpread","textDecoration","color","userSelect","display","width","alignItems","textAlign","flex","outline","item","button","__css"],"sources":["/Users/eyliu/Desktop/FitBuddy/node_modules/@chakra-ui/menu/src/styled-menu-item.tsx"],"sourcesContent":["import { chakra, forwardRef, SystemStyleObject } from \"@chakra-ui/system\"\nimport { useMemo } from \"react\"\nimport { useMenuStyles } from \"./menu\"\nimport { StyledMenuItemProps } from \"./menu-item\"\n\nexport const StyledMenuItem = forwardRef<StyledMenuItemProps, \"button\">(\n  (props, ref) => {\n    const { type, ...rest } = props\n    const styles = useMenuStyles()\n\n    /**\n     * Given another component, use its type if present\n     * Else, use no type to avoid invalid html, e.g. <a type=\"button\" />\n     * Else, fall back to \"button\"\n     */\n    const btnType = rest.as || type ? type ?? undefined : \"button\"\n\n    const buttonStyles: SystemStyleObject = useMemo(\n      () => ({\n        textDecoration: \"none\",\n        color: \"inherit\",\n        userSelect: \"none\",\n        display: \"flex\",\n        width: \"100%\",\n        alignItems: \"center\",\n        textAlign: \"start\",\n        flex: \"0 0 auto\",\n        outline: 0,\n        ...styles.item,\n      }),\n      [styles.item],\n    )\n\n    return (\n      <chakra.button ref={ref} type={btnType} {...rest} __css={buttonStyles} />\n    )\n  },\n)\n"],"mappings":";;;;;;;;AAAA,SAASA,MAAA,EAAQC,UAAA,QAAqC;AACtD,SAASC,OAAA,QAAe;AAiClB,SAAAC,GAAA;AA7BC,IAAMC,cAAA,GAAiBH,UAAA,CAC5B,UAACI,KAAA,EAAOC,GAAA,EAAQ;EACd,IAAQC,IAAA,GAAkBF,KAAA,CAAlBE,IAAA;IAASC,IAAA,GAAAC,wBAAA,CAASJ,KAAA,EAAAK,SAAA;EAC1B,IAAMC,MAAA,GAASC,aAAA,CAAc;EAO7B,IAAMC,OAAA,GAAUL,IAAA,CAAKM,EAAA,IAAMP,IAAA,GAAOA,IAAA,WAAAA,IAAA,GAAQ,SAAY;EAEtD,IAAMQ,YAAA,GAAkCb,OAAA,CACtC;IAAA,OAAAc,aAAA;MACEC,cAAA,EAAgB;MAChBC,KAAA,EAAO;MACPC,UAAA,EAAY;MACZC,OAAA,EAAS;MACTC,KAAA,EAAO;MACPC,UAAA,EAAY;MACZC,SAAA,EAAW;MACXC,IAAA,EAAM;MACNC,OAAA,EAAS;IAAA,GACNd,MAAA,CAAOe,IAAA;EAAA,CACZ,EACA,CAACf,MAAA,CAAOe,IAAI,CACd;EAEA,OACE,eAAAvB,GAAA,CAACH,MAAA,CAAO2B,MAAA,EAAAX,aAAA,CAAAA,aAAA;IAAOV,GAAA,EAAAA,GAAA;IAAUC,IAAA,EAAMM;EAAA,GAAaL,IAAA;IAAMoB,KAAA,EAAOb;EAAA,EAAc;AAE3E,CACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}