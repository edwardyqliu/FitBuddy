{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"size\", \"max\", \"min\", \"valueText\", \"getValueText\", \"value\", \"capIsRound\", \"children\", \"thickness\", \"color\", \"trackColor\", \"isIndeterminate\"];\nimport { Circle } from \"./chunk-7CG3L4JY.mjs\";\nimport { Shape } from \"./chunk-EMKK5VRD.mjs\";\nimport { getProgressProps, spin } from \"./chunk-TXZFUZNG.mjs\";\n\n// src/circular-progress.tsx\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar CircularProgress = forwardRef(function (props, ref) {\n  var _a;\n  var _props$size = props.size,\n    size = _props$size === void 0 ? \"48px\" : _props$size,\n    _props$max = props.max,\n    max = _props$max === void 0 ? 100 : _props$max,\n    _props$min = props.min,\n    min = _props$min === void 0 ? 0 : _props$min,\n    valueText = props.valueText,\n    getValueText = props.getValueText,\n    value = props.value,\n    capIsRound = props.capIsRound,\n    children = props.children,\n    _props$thickness = props.thickness,\n    thickness = _props$thickness === void 0 ? \"10px\" : _props$thickness,\n    _props$color = props.color,\n    color = _props$color === void 0 ? \"#0078d4\" : _props$color,\n    _props$trackColor = props.trackColor,\n    trackColor = _props$trackColor === void 0 ? \"#edebe9\" : _props$trackColor,\n    isIndeterminate = props.isIndeterminate,\n    rest = _objectWithoutProperties(props, _excluded);\n  var progress = getProgressProps({\n    min: min,\n    max: max,\n    value: value,\n    valueText: valueText,\n    getValueText: getValueText,\n    isIndeterminate: isIndeterminate\n  });\n  var determinant = isIndeterminate ? void 0 : ((_a = progress.percent) != null ? _a : 0) * 2.64;\n  var strokeDasharray = determinant == null ? void 0 : \"\".concat(determinant, \" \").concat(264 - determinant);\n  var indicatorProps = isIndeterminate ? {\n    css: {\n      animation: \"\".concat(spin, \" 1.5s linear infinite\")\n    }\n  } : {\n    strokeDashoffset: 66,\n    strokeDasharray: strokeDasharray,\n    transitionProperty: \"stroke-dasharray, stroke\",\n    transitionDuration: \"0.6s\",\n    transitionTimingFunction: \"ease\"\n  };\n  var rootStyles = {\n    display: \"inline-block\",\n    position: \"relative\",\n    verticalAlign: \"middle\",\n    fontSize: size\n  };\n  return /* @__PURE__ */jsxs(chakra.div, _objectSpread(_objectSpread(_objectSpread({\n    ref: ref,\n    className: \"chakra-progress\"\n  }, progress.bind), rest), {}, {\n    __css: rootStyles,\n    children: [/* @__PURE__ */jsxs(Shape, {\n      size: size,\n      isIndeterminate: isIndeterminate,\n      children: [/* @__PURE__ */jsx(Circle, {\n        stroke: trackColor,\n        strokeWidth: thickness,\n        className: \"chakra-progress__track\"\n      }), /* @__PURE__ */jsx(Circle, _objectSpread({\n        stroke: color,\n        strokeWidth: thickness,\n        className: \"chakra-progress__indicator\",\n        strokeLinecap: capIsRound ? \"round\" : void 0,\n        opacity: progress.value === 0 && !isIndeterminate ? 0 : void 0\n      }, indicatorProps))]\n    }), children]\n  }));\n});\nCircularProgress.displayName = \"CircularProgress\";\nexport { CircularProgress };","map":{"version":3,"names":["chakra","forwardRef","jsx","jsxs","CircularProgress","props","ref","_a","_props$size","size","_props$max","max","_props$min","min","valueText","getValueText","value","capIsRound","children","_props$thickness","thickness","_props$color","color","_props$trackColor","trackColor","isIndeterminate","rest","_objectWithoutProperties","_excluded","progress","getProgressProps","determinant","percent","strokeDasharray","concat","indicatorProps","css","animation","spin","strokeDashoffset","transitionProperty","transitionDuration","transitionTimingFunction","rootStyles","display","position","verticalAlign","fontSize","div","_objectSpread","className","bind","__css","Shape","Circle","stroke","strokeWidth","strokeLinecap","opacity","displayName"],"sources":["/Users/eyliu/Desktop/FitBuddy/node_modules/@chakra-ui/progress/src/circular-progress.tsx"],"sourcesContent":["import {\n  chakra,\n  SystemStyleObject,\n  HTMLChakraProps,\n  forwardRef,\n} from \"@chakra-ui/system\"\n\nimport { getProgressProps, spin } from \"./progress.utils\"\nimport { Shape } from \"./shape\"\nimport { Circle } from \"./circle\"\n\ninterface CircularProgressOptions {\n  /**\n   * The size of the circular progress in CSS units\n   */\n  size?: string | number\n  /**\n   * Maximum value defining 100% progress made (must be higher than 'min')\n   * @default 100\n   */\n  max?: number\n  /**\n   * Minimum value defining 'no progress' (must be lower than 'max')\n   * @default 0\n   */\n  min?: number\n  /**\n   * This defines the stroke width of the svg circle.\n   * @default \"10px\"\n   */\n  thickness?: string | number\n  /**\n   * Current progress (must be between min/max)\n   */\n  value?: number\n  /**\n   * If `true`, the cap of the progress indicator will be rounded.\n   *\n   * @default false\n   */\n  capIsRound?: boolean\n  /**\n   * The content of the circular progress bar. If passed, the content will be inside and centered in the progress bar.\n   */\n  children?: React.ReactNode\n  /**\n   * The color name of the progress track. Use a color key in the theme object\n   */\n  trackColor?: string\n  /**\n   * The color of the progress indicator. Use a color key in the theme object\n   */\n  color?: string\n  /**\n   * The desired valueText to use in place of the value\n   */\n  valueText?: string\n  /**\n   * A function that returns the desired valueText to use in place of the value\n   */\n  getValueText?(value: number, percent: number): string\n  /**\n   * If `true`, the progress will be indeterminate and the `value`\n   * prop will be ignored\n   *\n   * @default false\n   */\n  isIndeterminate?: boolean\n}\n\nexport interface CircularProgressProps\n  extends Omit<HTMLChakraProps<\"div\">, \"color\">,\n    CircularProgressOptions {}\n\n/**\n * CircularProgress is used to indicate the progress of an activity.\n * It is built using `svg` and `circle` components with support for\n * theming and `indeterminate` state\n *\n * @see Docs https://chakra-ui.com/circularprogress\n * @todo add theming support for circular progress\n */\nexport const CircularProgress = forwardRef<CircularProgressProps, \"div\">(\n  (props, ref) => {\n    const {\n      size = \"48px\",\n      max = 100,\n      min = 0,\n      valueText,\n      getValueText,\n      value,\n      capIsRound,\n      children,\n      thickness = \"10px\",\n      color = \"#0078d4\",\n      trackColor = \"#edebe9\",\n      isIndeterminate,\n      ...rest\n    } = props\n\n    const progress = getProgressProps({\n      min,\n      max,\n      value,\n      valueText,\n      getValueText,\n      isIndeterminate,\n    })\n\n    const determinant = isIndeterminate\n      ? undefined\n      : (progress.percent ?? 0) * 2.64\n\n    const strokeDasharray =\n      determinant == null ? undefined : `${determinant} ${264 - determinant}`\n\n    const indicatorProps = isIndeterminate\n      ? {\n          css: { animation: `${spin} 1.5s linear infinite` },\n        }\n      : {\n          strokeDashoffset: 66,\n          strokeDasharray,\n          transitionProperty: \"stroke-dasharray, stroke\",\n          transitionDuration: \"0.6s\",\n          transitionTimingFunction: \"ease\",\n        }\n\n    const rootStyles: SystemStyleObject = {\n      display: \"inline-block\",\n      position: \"relative\",\n      verticalAlign: \"middle\",\n      fontSize: size,\n    }\n\n    return (\n      <chakra.div\n        ref={ref}\n        className=\"chakra-progress\"\n        {...progress.bind}\n        {...rest}\n        __css={rootStyles}\n      >\n        <Shape size={size} isIndeterminate={isIndeterminate}>\n          <Circle\n            stroke={trackColor}\n            strokeWidth={thickness}\n            className=\"chakra-progress__track\"\n          />\n          <Circle\n            stroke={color}\n            strokeWidth={thickness}\n            className=\"chakra-progress__indicator\"\n            strokeLinecap={capIsRound ? \"round\" : undefined}\n            /**\n             * fix issue in Safari where indicator still shows when value is 0\n             * @see Issue https://github.com/chakra-ui/chakra-ui/issues/3754\n             */\n            opacity={progress.value === 0 && !isIndeterminate ? 0 : undefined}\n            {...indicatorProps}\n          />\n        </Shape>\n        {children}\n      </chakra.div>\n    )\n  },\n)\n\nCircularProgress.displayName = \"CircularProgress\"\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}