{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"isInline\", \"direction\", \"align\", \"justify\", \"spacing\", \"wrap\", \"children\", \"divider\", \"className\", \"shouldWrapChildren\"];\nimport { StackItem } from \"./chunk-ZFQCCYWD.mjs\";\nimport { getDividerStyles } from \"./chunk-5VJV6UNA.mjs\";\n\n// src/stack/stack.tsx\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { cloneElement, Fragment, useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar Stack = forwardRef(function (props, ref) {\n  var isInline = props.isInline,\n    directionProp = props.direction,\n    align = props.align,\n    justify = props.justify,\n    _props$spacing = props.spacing,\n    spacing = _props$spacing === void 0 ? \"0.5rem\" : _props$spacing,\n    wrap = props.wrap,\n    children = props.children,\n    divider = props.divider,\n    className = props.className,\n    shouldWrapChildren = props.shouldWrapChildren,\n    rest = _objectWithoutProperties(props, _excluded);\n  var direction = isInline ? \"row\" : directionProp != null ? directionProp : \"column\";\n  var dividerStyle = useMemo(function () {\n    return getDividerStyles({\n      spacing: spacing,\n      direction: direction\n    });\n  }, [spacing, direction]);\n  var hasDivider = !!divider;\n  var shouldUseChildren = !shouldWrapChildren && !hasDivider;\n  var clones = useMemo(function () {\n    var validChildren = getValidChildren(children);\n    return shouldUseChildren ? validChildren : validChildren.map(function (child, index) {\n      var key = typeof child.key !== \"undefined\" ? child.key : index;\n      var isLast = index + 1 === validChildren.length;\n      var wrappedChild = /* @__PURE__ */jsx(StackItem, {\n        children: child\n      }, key);\n      var _child = shouldWrapChildren ? wrappedChild : child;\n      if (!hasDivider) return _child;\n      var clonedDivider = cloneElement(divider, {\n        __css: dividerStyle\n      });\n      var _divider = isLast ? null : clonedDivider;\n      return /* @__PURE__ */jsxs(Fragment, {\n        children: [_child, _divider]\n      }, key);\n    });\n  }, [divider, dividerStyle, hasDivider, shouldUseChildren, shouldWrapChildren, children]);\n  var _className = cx(\"chakra-stack\", className);\n  return /* @__PURE__ */jsx(chakra.div, _objectSpread(_objectSpread({\n    ref: ref,\n    display: \"flex\",\n    alignItems: align,\n    justifyContent: justify,\n    flexDirection: direction,\n    flexWrap: wrap,\n    gap: hasDivider ? void 0 : spacing,\n    className: _className\n  }, rest), {}, {\n    children: clones\n  }));\n});\nStack.displayName = \"Stack\";\nexport { Stack };","map":{"version":3,"names":["getValidChildren","cx","chakra","forwardRef","cloneElement","Fragment","useMemo","jsx","jsxs","Stack","props","ref","isInline","directionProp","direction","align","justify","_props$spacing","spacing","wrap","children","divider","className","shouldWrapChildren","rest","_objectWithoutProperties","_excluded","dividerStyle","getDividerStyles","hasDivider","shouldUseChildren","clones","validChildren","map","child","index","key","isLast","length","wrappedChild","StackItem","_child","clonedDivider","__css","_divider","_className","div","_objectSpread","display","alignItems","justifyContent","flexDirection","flexWrap","gap","displayName"],"sources":["/Users/eyliu/Desktop/FitBuddy/node_modules/@chakra-ui/layout/src/stack/stack.tsx"],"sourcesContent":["import { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { cloneElement, Fragment, useMemo } from \"react\"\n\nimport { StackItem } from \"./stack-item\"\nimport type { StackDirection } from \"./stack.utils\"\nimport { getDividerStyles } from \"./stack.utils\"\n\nexport type { StackDirection }\n\ninterface StackOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n  /**\n   * The space between each stack item\n   * @type SystemProps[\"margin\"]\n   * @default \"0.5rem\"\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The direction to stack the items.\n   * @default \"column\"\n   */\n  direction?: StackDirection\n  /**\n   * If `true`, each stack item will show a divider\n   * @type React.ReactElement\n   */\n  divider?: React.ReactElement\n  /**\n   * If `true`, the children will be wrapped in a `Box` with\n   * `display: inline-block`, and the `Box` will take the spacing props\n   *\n   * @default false\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true` the items will be stacked horizontally.\n   *\n   * @default false\n   *\n   * @deprecated - Use `direction=\"row\"` or `HStack` instead\n   */\n  isInline?: boolean\n}\n\nexport interface StackProps extends HTMLChakraProps<\"div\">, StackOptions {}\n\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/stack\n *\n */\nexport const Stack = forwardRef<StackProps, \"div\">((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const direction = isInline ? \"row\" : directionProp ?? \"column\"\n\n  const dividerStyle = useMemo(\n    () => getDividerStyles({ spacing, direction }),\n    [spacing, direction],\n  )\n\n  const hasDivider = !!divider\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider\n\n  const clones = useMemo(() => {\n    const validChildren = getValidChildren(children)\n    return shouldUseChildren\n      ? validChildren\n      : validChildren.map((child, index) => {\n          // Prefer provided child key, fallback to index\n          const key = typeof child.key !== \"undefined\" ? child.key : index\n          const isLast = index + 1 === validChildren.length\n          const wrappedChild = <StackItem key={key}>{child}</StackItem>\n          const _child = shouldWrapChildren ? wrappedChild : child\n\n          if (!hasDivider) return _child\n\n          const clonedDivider = cloneElement(\n            divider as React.ReactElement<any>,\n            {\n              __css: dividerStyle,\n            },\n          )\n\n          const _divider = isLast ? null : clonedDivider\n\n          return (\n            <Fragment key={key}>\n              {_child}\n              {_divider}\n            </Fragment>\n          )\n        })\n  }, [\n    divider,\n    dividerStyle,\n    hasDivider,\n    shouldUseChildren,\n    shouldWrapChildren,\n    children,\n  ])\n\n  const _className = cx(\"chakra-stack\", className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      display=\"flex\"\n      alignItems={align}\n      justifyContent={justify}\n      flexDirection={direction}\n      flexWrap={wrap}\n      gap={hasDivider ? undefined : spacing}\n      className={_className}\n      {...rest}\n    >\n      {clones}\n    </chakra.div>\n  )\n})\n\nStack.displayName = \"Stack\"\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}