{"ast":null,"code":"'use client';\n\n// src/use-button-type.tsx\nimport _slicedToArray from \"/Users/eyliu/Desktop/FitBuddy/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useCallback, useState } from \"react\";\nfunction useButtonType(value) {\n  var _useState = useState(!value),\n    _useState2 = _slicedToArray(_useState, 2),\n    isButton = _useState2[0],\n    setIsButton = _useState2[1];\n  var refCallback = useCallback(function (node) {\n    if (!node) return;\n    setIsButton(node.tagName === \"BUTTON\");\n  }, []);\n  var type = isButton ? \"button\" : void 0;\n  return {\n    ref: refCallback,\n    type: type\n  };\n}\nexport { useButtonType };","map":{"version":3,"names":["useCallback","useState","useButtonType","value","_useState","_useState2","_slicedToArray","isButton","setIsButton","refCallback","node","tagName","type","ref"],"sources":["/Users/eyliu/Desktop/FitBuddy/node_modules/@chakra-ui/button/src/use-button-type.tsx"],"sourcesContent":["import { useCallback, useState } from \"react\"\n\nexport function useButtonType(value?: React.ElementType) {\n  const [isButton, setIsButton] = useState(!value)\n  const refCallback = useCallback((node: HTMLElement | null) => {\n    if (!node) return\n    setIsButton(node.tagName === \"BUTTON\")\n  }, [])\n  const type = isButton ? \"button\" : undefined\n  return { ref: refCallback, type } as const\n}\n"],"mappings":";;;;AAAA,SAASA,WAAA,EAAaC,QAAA,QAAgB;AAE/B,SAASC,cAAcC,KAAA,EAA2B;EACvD,IAAAC,SAAA,GAAgCH,QAAA,CAAS,CAACE,KAAK;IAAAE,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAxCG,QAAA,GAAAF,UAAA;IAAUG,WAAW,GAAAH,UAAA;EAC5B,IAAMI,WAAA,GAAcT,WAAA,CAAY,UAACU,IAAA,EAA6B;IAC5D,IAAI,CAACA,IAAA,EAAM;IACXF,WAAA,CAAYE,IAAA,CAAKC,OAAA,KAAY,QAAQ;EACvC,GAAG,EAAE;EACL,IAAMC,IAAA,GAAOL,QAAA,GAAW,WAAW;EACnC,OAAO;IAAEM,GAAA,EAAKJ,WAAA;IAAaG,IAAA,EAAAA;EAAK;AAClC"},"metadata":{},"sourceType":"module","externalDependencies":[]}