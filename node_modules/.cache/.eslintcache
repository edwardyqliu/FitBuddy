[{"/Users/eyliu/Desktop/FitBuddy/src/index.js":"1","/Users/eyliu/Desktop/FitBuddy/src/App.js":"2","/Users/eyliu/Desktop/FitBuddy/src/SubscriptionForm.js":"3","/Users/eyliu/Desktop/FitBuddy/src/SubmissionPage.js":"4","/Users/eyliu/Desktop/FitBuddy/src/TimeSlotSelector.js":"5"},{"size":222,"mtime":1705211820948,"results":"6","hashOfConfig":"7"},{"size":1006,"mtime":1705212779158,"results":"8","hashOfConfig":"7"},{"size":5425,"mtime":1705211820947,"results":"9","hashOfConfig":"7"},{"size":436,"mtime":1705211820947,"results":"10","hashOfConfig":"7"},{"size":1704,"mtime":1705211820947,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ukksl2",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/eyliu/Desktop/FitBuddy/src/index.js",[],[],"/Users/eyliu/Desktop/FitBuddy/src/App.js",[],[],"/Users/eyliu/Desktop/FitBuddy/src/SubscriptionForm.js",["28"],[],"import React, { useState, useCallback } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport {\n  FormControl,\n  FormLabel,\n  Input,\n  Button,\n  Grid,\n  Text,\n  Container,\n  Heading,\n  Alert,\n  Image,\n  Flex,\n  ChakraProvider,\n  extendTheme,\n} from '@chakra-ui/react';\nimport { useNavigate } from 'react-router-dom';\nimport TimeSlotSelector from './TimeSlotSelector';\nimport PhoneInput from 'react-phone-number-input';\nimport 'react-phone-number-input/style.css';\nimport muscle from './images/muscle.png'\nimport logo from './images/logo2.png';\n\nconst theme = extendTheme({\n  styles: {\n    global: {\n      body: {\n        bgGradient: \"white\",\n        color: \"black\"\n      },\n    },\n  },\n  colors: {\n    mistyRose: \"rgb(255, 228, 225)\",\n    pink: \"rgb(255, 194, 209)\",\n    cherryBlossomPink: \"rgb(255, 179, 198)\",\n    rosePompadour: \"rgb(251, 111, 146)\"\n    \n  }\n});\n\nconst SubscriptionForm = () => {\n  const { handleSubmit, register, control } = useForm();\n  const navigate = useNavigate();\n  const [formData, setFormData] = useState({\n    username: '', \n    phoneNumber: '',\n    selectedSlots: [],\n  });\n  const [error, setError] = useState(null);\n  const [selectedTimeSlots, setSelectedTimeSlots] = useState(Array(49).fill(false));\n\n  const handleSlotSelection = useCallback((slots) => {\n    setSelectedTimeSlots(slots);\n  }, []);\n\n  const onSubmit = async () => {\n    const { username, phoneNumber } = formData;\n    const schedule = selectedTimeSlots;\n\n    console.log('Sending this data to the checkNumber endpoint:', {\n      phoneNumber: phoneNumber,\n    });\n\n    console.log('Sending this data to the addClient endpoint:', {\n      username: username,\n      phoneNumber: phoneNumber,\n      schedule: schedule\n    });\n\n    try {\n      const response = await fetch('https://108f-2607-f470-6-3001-c0ed-23fc-5f64-23ce.ngrok-free.app/checkNumber', {\n        method: 'POST',\n        headers: {\n          'accept': 'application/json',\n        },\n        body: new URLSearchParams({\n          'phoneNumber': phoneNumber,\n        }),\n      });\n\n      const responseData = await response.json();\n      if (!response.ok) {\n        setError('Error in checkNumber: ' + responseData.error);\n        return;\n      }\n\n      const clientResponse = await fetch('https://108f-2607-f470-6-3001-c0ed-23fc-5f64-23ce.ngrok-free.app/addClient', {\n        method: 'POST',\n        headers: {\n          'accept': 'application/json',\n        },\n        body: new URLSearchParams({\n          'username': username,\n          'phoneNumber': phoneNumber,\n          'schedule': schedule\n        }),\n      });\n\n      const clientData = await clientResponse.json();\n      if (!clientResponse.ok) {\n        setError('Error in adding client: ' + clientData.error);\n        return;\n      }\n\n      navigate('/success');\n    } catch (error) {\n      setError('Error in API call: ' + error.message);\n    }\n  };\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Container centerContent minHeight='100vh' p={6} maxWidth=\"full\">\n        <Flex direction='row' alignItems='center' justifyContent='flex-start' mb={2}>\n          <Image src={logo} alt=\"Logo\" h=\"50px\" w=\"50px\" mr=\"2\" />\n          <Heading as=\"h1\" size=\"2xl\" fontWeight=\"bold\" letterSpacing=\"tight\">\n            FitBuddy\n          </Heading>\n        </Flex>\n        <Text color='black' fontSize='lg' fontWeight='bold' mt={2} mb={2}>\n          Fill In Your Class Schedule To Be Loved By A Buddy\n        </Text>\n\n  \n        <Flex width='100%' direction='row'>\n          \n          <Image \n            src={muscle}\n            height=\"59vh\" \n            width=\"auto\" \n            objectFit=\"cover\"\n          />\n\n          \n          <Grid minH='80vh' p={6} gap={1} flex=\"1\">\n            <TimeSlotSelector\n              onSelectSlot={handleSlotSelection}\n              dayTextColor=\"#FF8FAB\"\n              selectedSlots={selectedTimeSlots}\n            />\n            {error && (\n              <Alert status=\"error\" mb={4}>\n                {error}\n              </Alert>\n            )}\n            <form onSubmit={handleSubmit(onSubmit)}>\n              <FormControl id='username' isRequired mt={-4}>\n                <FormLabel fontFamily=\"Roboto, sans-serif\" color=\"rosePompadour\">Username</FormLabel>\n                <Controller\n                  name='username'\n                  control={control}\n                  render={({ field }) => (\n                    <Input\n                      {...field}\n                      placeholder='Username'\n                      value={formData.username}\n                      onChange={(e) => setFormData({ ...formData, username: e.target.value })}\n                    />\n                  )}\n                />\n              </FormControl>\n              <FormControl id='phoneNumber' isRequired>\n                <FormLabel fontFamily=\"Roboto, sans-serif\" color=\"rosePompadour\">Phone Number</FormLabel>\n                <PhoneInput\n                  placeholder='Enter phone number'\n                  value={formData.phoneNumber}\n                  onChange={(phone) => setFormData({ ...formData, phoneNumber: phone })}\n                />\n              </FormControl>\n              <Button mt={4} colorScheme='pink' type='submit' bg='mistyRose' color='black'>\n                Sign Up\n              </Button>\n            </form>\n          </Grid>\n        </Flex>\n      </Container>\n    </ChakraProvider>\n  );\n};\n\nexport default SubscriptionForm;","/Users/eyliu/Desktop/FitBuddy/src/SubmissionPage.js",[],[],"/Users/eyliu/Desktop/FitBuddy/src/TimeSlotSelector.js",[],[],{"ruleId":"29","severity":1,"message":"30","line":44,"column":25,"nodeType":"31","messageId":"32","endLine":44,"endColumn":33},"no-unused-vars","'register' is assigned a value but never used.","Identifier","unusedVar"]